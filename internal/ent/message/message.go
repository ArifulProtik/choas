// Code generated by ent, DO NOT EDIT.

package message

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the message type in the database.
	Label = "message"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldConversationID holds the string denoting the conversation_id field in the database.
	FieldConversationID = "conversation_id"
	// FieldSenderID holds the string denoting the sender_id field in the database.
	FieldSenderID = "sender_id"
	// FieldContent holds the string denoting the content field in the database.
	FieldContent = "content"
	// FieldMessageType holds the string denoting the message_type field in the database.
	FieldMessageType = "message_type"
	// FieldIsDeleted holds the string denoting the is_deleted field in the database.
	FieldIsDeleted = "is_deleted"
	// FieldEditedAt holds the string denoting the edited_at field in the database.
	FieldEditedAt = "edited_at"
	// FieldCallID holds the string denoting the call_id field in the database.
	FieldCallID = "call_id"
	// EdgeConversation holds the string denoting the conversation edge name in mutations.
	EdgeConversation = "conversation"
	// EdgeSender holds the string denoting the sender edge name in mutations.
	EdgeSender = "sender"
	// EdgeCall holds the string denoting the call edge name in mutations.
	EdgeCall = "call"
	// Table holds the table name of the message in the database.
	Table = "messages"
	// ConversationTable is the table that holds the conversation relation/edge.
	ConversationTable = "messages"
	// ConversationInverseTable is the table name for the Conversation entity.
	// It exists in this package in order to avoid circular dependency with the "conversation" package.
	ConversationInverseTable = "conversations"
	// ConversationColumn is the table column denoting the conversation relation/edge.
	ConversationColumn = "conversation_id"
	// SenderTable is the table that holds the sender relation/edge.
	SenderTable = "messages"
	// SenderInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	SenderInverseTable = "users"
	// SenderColumn is the table column denoting the sender relation/edge.
	SenderColumn = "sender_id"
	// CallTable is the table that holds the call relation/edge.
	CallTable = "messages"
	// CallInverseTable is the table name for the Call entity.
	// It exists in this package in order to avoid circular dependency with the "call" package.
	CallInverseTable = "calls"
	// CallColumn is the table column denoting the call relation/edge.
	CallColumn = "call_id"
)

// Columns holds all SQL columns for message fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldConversationID,
	FieldSenderID,
	FieldContent,
	FieldMessageType,
	FieldIsDeleted,
	FieldEditedAt,
	FieldCallID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "messages"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"conversation_messages",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// ConversationIDValidator is a validator for the "conversation_id" field. It is called by the builders before save.
	ConversationIDValidator func(string) error
	// SenderIDValidator is a validator for the "sender_id" field. It is called by the builders before save.
	SenderIDValidator func(string) error
	// ContentValidator is a validator for the "content" field. It is called by the builders before save.
	ContentValidator func(string) error
	// DefaultIsDeleted holds the default value on creation for the "is_deleted" field.
	DefaultIsDeleted bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// MessageType defines the type for the "message_type" enum field.
type MessageType string

// MessageTypeText is the default value of the MessageType enum.
const DefaultMessageType = MessageTypeText

// MessageType values.
const (
	MessageTypeText      MessageType = "text"
	MessageTypeImage     MessageType = "image"
	MessageTypeFile      MessageType = "file"
	MessageTypeCallStart MessageType = "call_start"
	MessageTypeCallEnd   MessageType = "call_end"
)

func (mt MessageType) String() string {
	return string(mt)
}

// MessageTypeValidator is a validator for the "message_type" field enum values. It is called by the builders before save.
func MessageTypeValidator(mt MessageType) error {
	switch mt {
	case MessageTypeText, MessageTypeImage, MessageTypeFile, MessageTypeCallStart, MessageTypeCallEnd:
		return nil
	default:
		return fmt.Errorf("message: invalid enum value for message_type field: %q", mt)
	}
}

// OrderOption defines the ordering options for the Message queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByConversationID orders the results by the conversation_id field.
func ByConversationID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConversationID, opts...).ToFunc()
}

// BySenderID orders the results by the sender_id field.
func BySenderID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSenderID, opts...).ToFunc()
}

// ByContent orders the results by the content field.
func ByContent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldContent, opts...).ToFunc()
}

// ByMessageType orders the results by the message_type field.
func ByMessageType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessageType, opts...).ToFunc()
}

// ByIsDeleted orders the results by the is_deleted field.
func ByIsDeleted(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDeleted, opts...).ToFunc()
}

// ByEditedAt orders the results by the edited_at field.
func ByEditedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEditedAt, opts...).ToFunc()
}

// ByCallID orders the results by the call_id field.
func ByCallID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCallID, opts...).ToFunc()
}

// ByConversationField orders the results by conversation field.
func ByConversationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConversationStep(), sql.OrderByField(field, opts...))
	}
}

// BySenderField orders the results by sender field.
func BySenderField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSenderStep(), sql.OrderByField(field, opts...))
	}
}

// ByCallField orders the results by call field.
func ByCallField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCallStep(), sql.OrderByField(field, opts...))
	}
}
func newConversationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConversationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, ConversationTable, ConversationColumn),
	)
}
func newSenderStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SenderInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SenderTable, SenderColumn),
	)
}
func newCallStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CallInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CallTable, CallColumn),
	)
}
