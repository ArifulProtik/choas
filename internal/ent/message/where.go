// Code generated by ent, DO NOT EDIT.

package message

import (
	"kakashi/chaos/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldUpdatedAt, v))
}

// ConversationID applies equality check predicate on the "conversation_id" field. It's identical to ConversationIDEQ.
func ConversationID(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldConversationID, v))
}

// SenderID applies equality check predicate on the "sender_id" field. It's identical to SenderIDEQ.
func SenderID(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldSenderID, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldContent, v))
}

// IsDeleted applies equality check predicate on the "is_deleted" field. It's identical to IsDeletedEQ.
func IsDeleted(v bool) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldIsDeleted, v))
}

// EditedAt applies equality check predicate on the "edited_at" field. It's identical to EditedAtEQ.
func EditedAt(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldEditedAt, v))
}

// CallID applies equality check predicate on the "call_id" field. It's identical to CallIDEQ.
func CallID(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldCallID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldUpdatedAt, v))
}

// ConversationIDEQ applies the EQ predicate on the "conversation_id" field.
func ConversationIDEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldConversationID, v))
}

// ConversationIDNEQ applies the NEQ predicate on the "conversation_id" field.
func ConversationIDNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldConversationID, v))
}

// ConversationIDIn applies the In predicate on the "conversation_id" field.
func ConversationIDIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldConversationID, vs...))
}

// ConversationIDNotIn applies the NotIn predicate on the "conversation_id" field.
func ConversationIDNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldConversationID, vs...))
}

// ConversationIDGT applies the GT predicate on the "conversation_id" field.
func ConversationIDGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldConversationID, v))
}

// ConversationIDGTE applies the GTE predicate on the "conversation_id" field.
func ConversationIDGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldConversationID, v))
}

// ConversationIDLT applies the LT predicate on the "conversation_id" field.
func ConversationIDLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldConversationID, v))
}

// ConversationIDLTE applies the LTE predicate on the "conversation_id" field.
func ConversationIDLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldConversationID, v))
}

// ConversationIDContains applies the Contains predicate on the "conversation_id" field.
func ConversationIDContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldConversationID, v))
}

// ConversationIDHasPrefix applies the HasPrefix predicate on the "conversation_id" field.
func ConversationIDHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldConversationID, v))
}

// ConversationIDHasSuffix applies the HasSuffix predicate on the "conversation_id" field.
func ConversationIDHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldConversationID, v))
}

// ConversationIDEqualFold applies the EqualFold predicate on the "conversation_id" field.
func ConversationIDEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldConversationID, v))
}

// ConversationIDContainsFold applies the ContainsFold predicate on the "conversation_id" field.
func ConversationIDContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldConversationID, v))
}

// SenderIDEQ applies the EQ predicate on the "sender_id" field.
func SenderIDEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldSenderID, v))
}

// SenderIDNEQ applies the NEQ predicate on the "sender_id" field.
func SenderIDNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldSenderID, v))
}

// SenderIDIn applies the In predicate on the "sender_id" field.
func SenderIDIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldSenderID, vs...))
}

// SenderIDNotIn applies the NotIn predicate on the "sender_id" field.
func SenderIDNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldSenderID, vs...))
}

// SenderIDGT applies the GT predicate on the "sender_id" field.
func SenderIDGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldSenderID, v))
}

// SenderIDGTE applies the GTE predicate on the "sender_id" field.
func SenderIDGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldSenderID, v))
}

// SenderIDLT applies the LT predicate on the "sender_id" field.
func SenderIDLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldSenderID, v))
}

// SenderIDLTE applies the LTE predicate on the "sender_id" field.
func SenderIDLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldSenderID, v))
}

// SenderIDContains applies the Contains predicate on the "sender_id" field.
func SenderIDContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldSenderID, v))
}

// SenderIDHasPrefix applies the HasPrefix predicate on the "sender_id" field.
func SenderIDHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldSenderID, v))
}

// SenderIDHasSuffix applies the HasSuffix predicate on the "sender_id" field.
func SenderIDHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldSenderID, v))
}

// SenderIDEqualFold applies the EqualFold predicate on the "sender_id" field.
func SenderIDEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldSenderID, v))
}

// SenderIDContainsFold applies the ContainsFold predicate on the "sender_id" field.
func SenderIDContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldSenderID, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldContent, v))
}

// MessageTypeEQ applies the EQ predicate on the "message_type" field.
func MessageTypeEQ(v MessageType) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldMessageType, v))
}

// MessageTypeNEQ applies the NEQ predicate on the "message_type" field.
func MessageTypeNEQ(v MessageType) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldMessageType, v))
}

// MessageTypeIn applies the In predicate on the "message_type" field.
func MessageTypeIn(vs ...MessageType) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldMessageType, vs...))
}

// MessageTypeNotIn applies the NotIn predicate on the "message_type" field.
func MessageTypeNotIn(vs ...MessageType) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldMessageType, vs...))
}

// IsDeletedEQ applies the EQ predicate on the "is_deleted" field.
func IsDeletedEQ(v bool) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldIsDeleted, v))
}

// IsDeletedNEQ applies the NEQ predicate on the "is_deleted" field.
func IsDeletedNEQ(v bool) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldIsDeleted, v))
}

// EditedAtEQ applies the EQ predicate on the "edited_at" field.
func EditedAtEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldEditedAt, v))
}

// EditedAtNEQ applies the NEQ predicate on the "edited_at" field.
func EditedAtNEQ(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldEditedAt, v))
}

// EditedAtIn applies the In predicate on the "edited_at" field.
func EditedAtIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldEditedAt, vs...))
}

// EditedAtNotIn applies the NotIn predicate on the "edited_at" field.
func EditedAtNotIn(vs ...time.Time) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldEditedAt, vs...))
}

// EditedAtGT applies the GT predicate on the "edited_at" field.
func EditedAtGT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldEditedAt, v))
}

// EditedAtGTE applies the GTE predicate on the "edited_at" field.
func EditedAtGTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldEditedAt, v))
}

// EditedAtLT applies the LT predicate on the "edited_at" field.
func EditedAtLT(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldEditedAt, v))
}

// EditedAtLTE applies the LTE predicate on the "edited_at" field.
func EditedAtLTE(v time.Time) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldEditedAt, v))
}

// EditedAtIsNil applies the IsNil predicate on the "edited_at" field.
func EditedAtIsNil() predicate.Message {
	return predicate.Message(sql.FieldIsNull(FieldEditedAt))
}

// EditedAtNotNil applies the NotNil predicate on the "edited_at" field.
func EditedAtNotNil() predicate.Message {
	return predicate.Message(sql.FieldNotNull(FieldEditedAt))
}

// CallIDEQ applies the EQ predicate on the "call_id" field.
func CallIDEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldEQ(FieldCallID, v))
}

// CallIDNEQ applies the NEQ predicate on the "call_id" field.
func CallIDNEQ(v string) predicate.Message {
	return predicate.Message(sql.FieldNEQ(FieldCallID, v))
}

// CallIDIn applies the In predicate on the "call_id" field.
func CallIDIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldIn(FieldCallID, vs...))
}

// CallIDNotIn applies the NotIn predicate on the "call_id" field.
func CallIDNotIn(vs ...string) predicate.Message {
	return predicate.Message(sql.FieldNotIn(FieldCallID, vs...))
}

// CallIDGT applies the GT predicate on the "call_id" field.
func CallIDGT(v string) predicate.Message {
	return predicate.Message(sql.FieldGT(FieldCallID, v))
}

// CallIDGTE applies the GTE predicate on the "call_id" field.
func CallIDGTE(v string) predicate.Message {
	return predicate.Message(sql.FieldGTE(FieldCallID, v))
}

// CallIDLT applies the LT predicate on the "call_id" field.
func CallIDLT(v string) predicate.Message {
	return predicate.Message(sql.FieldLT(FieldCallID, v))
}

// CallIDLTE applies the LTE predicate on the "call_id" field.
func CallIDLTE(v string) predicate.Message {
	return predicate.Message(sql.FieldLTE(FieldCallID, v))
}

// CallIDContains applies the Contains predicate on the "call_id" field.
func CallIDContains(v string) predicate.Message {
	return predicate.Message(sql.FieldContains(FieldCallID, v))
}

// CallIDHasPrefix applies the HasPrefix predicate on the "call_id" field.
func CallIDHasPrefix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasPrefix(FieldCallID, v))
}

// CallIDHasSuffix applies the HasSuffix predicate on the "call_id" field.
func CallIDHasSuffix(v string) predicate.Message {
	return predicate.Message(sql.FieldHasSuffix(FieldCallID, v))
}

// CallIDIsNil applies the IsNil predicate on the "call_id" field.
func CallIDIsNil() predicate.Message {
	return predicate.Message(sql.FieldIsNull(FieldCallID))
}

// CallIDNotNil applies the NotNil predicate on the "call_id" field.
func CallIDNotNil() predicate.Message {
	return predicate.Message(sql.FieldNotNull(FieldCallID))
}

// CallIDEqualFold applies the EqualFold predicate on the "call_id" field.
func CallIDEqualFold(v string) predicate.Message {
	return predicate.Message(sql.FieldEqualFold(FieldCallID, v))
}

// CallIDContainsFold applies the ContainsFold predicate on the "call_id" field.
func CallIDContainsFold(v string) predicate.Message {
	return predicate.Message(sql.FieldContainsFold(FieldCallID, v))
}

// HasConversation applies the HasEdge predicate on the "conversation" edge.
func HasConversation() predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ConversationTable, ConversationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConversationWith applies the HasEdge predicate on the "conversation" edge with a given conditions (other predicates).
func HasConversationWith(preds ...predicate.Conversation) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := newConversationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasSender applies the HasEdge predicate on the "sender" edge.
func HasSender() predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SenderTable, SenderColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSenderWith applies the HasEdge predicate on the "sender" edge with a given conditions (other predicates).
func HasSenderWith(preds ...predicate.User) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := newSenderStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCall applies the HasEdge predicate on the "call" edge.
func HasCall() predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CallTable, CallColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCallWith applies the HasEdge predicate on the "call" edge with a given conditions (other predicates).
func HasCallWith(preds ...predicate.Call) predicate.Message {
	return predicate.Message(func(s *sql.Selector) {
		step := newCallStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Message) predicate.Message {
	return predicate.Message(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Message) predicate.Message {
	return predicate.Message(sql.NotPredicates(p))
}
