// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kakashi/chaos/internal/ent/guild"
	"kakashi/chaos/internal/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Guild is the model entity for the Guild schema.
type Guild struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// GuildIcon holds the value of the "guild_icon" field.
	GuildIcon string `json:"guild_icon,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// GuildCover holds the value of the "guild_cover" field.
	GuildCover string `json:"guild_cover,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GuildQuery when eager-loading is set.
	Edges             GuildEdges `json:"edges"`
	user_owned_guilds *string
	selectValues      sql.SelectValues
}

// GuildEdges holds the relations/edges for other nodes in the graph.
type GuildEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User `json:"owner,omitempty"`
	// Invitations holds the value of the invitations edge.
	Invitations []*Invitation `json:"invitations,omitempty"`
	// GuildMembers holds the value of the guild_members edge.
	GuildMembers []*Member `json:"guild_members,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GuildEdges) OwnerOrErr() (*User, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// InvitationsOrErr returns the Invitations value or an error if the edge
// was not loaded in eager-loading.
func (e GuildEdges) InvitationsOrErr() ([]*Invitation, error) {
	if e.loadedTypes[1] {
		return e.Invitations, nil
	}
	return nil, &NotLoadedError{edge: "invitations"}
}

// GuildMembersOrErr returns the GuildMembers value or an error if the edge
// was not loaded in eager-loading.
func (e GuildEdges) GuildMembersOrErr() ([]*Member, error) {
	if e.loadedTypes[2] {
		return e.GuildMembers, nil
	}
	return nil, &NotLoadedError{edge: "guild_members"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Guild) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case guild.FieldID, guild.FieldName, guild.FieldGuildIcon, guild.FieldDescription, guild.FieldGuildCover:
			values[i] = new(sql.NullString)
		case guild.FieldCreatedAt, guild.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case guild.ForeignKeys[0]: // user_owned_guilds
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Guild fields.
func (gu *Guild) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case guild.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				gu.ID = value.String
			}
		case guild.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				gu.CreatedAt = value.Time
			}
		case guild.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				gu.UpdatedAt = value.Time
			}
		case guild.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				gu.Name = value.String
			}
		case guild.FieldGuildIcon:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field guild_icon", values[i])
			} else if value.Valid {
				gu.GuildIcon = value.String
			}
		case guild.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				gu.Description = value.String
			}
		case guild.FieldGuildCover:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field guild_cover", values[i])
			} else if value.Valid {
				gu.GuildCover = value.String
			}
		case guild.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_owned_guilds", values[i])
			} else if value.Valid {
				gu.user_owned_guilds = new(string)
				*gu.user_owned_guilds = value.String
			}
		default:
			gu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Guild.
// This includes values selected through modifiers, order, etc.
func (gu *Guild) Value(name string) (ent.Value, error) {
	return gu.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Guild entity.
func (gu *Guild) QueryOwner() *UserQuery {
	return NewGuildClient(gu.config).QueryOwner(gu)
}

// QueryInvitations queries the "invitations" edge of the Guild entity.
func (gu *Guild) QueryInvitations() *InvitationQuery {
	return NewGuildClient(gu.config).QueryInvitations(gu)
}

// QueryGuildMembers queries the "guild_members" edge of the Guild entity.
func (gu *Guild) QueryGuildMembers() *MemberQuery {
	return NewGuildClient(gu.config).QueryGuildMembers(gu)
}

// Update returns a builder for updating this Guild.
// Note that you need to call Guild.Unwrap() before calling this method if this Guild
// was returned from a transaction, and the transaction was committed or rolled back.
func (gu *Guild) Update() *GuildUpdateOne {
	return NewGuildClient(gu.config).UpdateOne(gu)
}

// Unwrap unwraps the Guild entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gu *Guild) Unwrap() *Guild {
	_tx, ok := gu.config.driver.(*txDriver)
	if !ok {
		panic("ent: Guild is not a transactional entity")
	}
	gu.config.driver = _tx.drv
	return gu
}

// String implements the fmt.Stringer.
func (gu *Guild) String() string {
	var builder strings.Builder
	builder.WriteString("Guild(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gu.ID))
	builder.WriteString("created_at=")
	builder.WriteString(gu.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(gu.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(gu.Name)
	builder.WriteString(", ")
	builder.WriteString("guild_icon=")
	builder.WriteString(gu.GuildIcon)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(gu.Description)
	builder.WriteString(", ")
	builder.WriteString("guild_cover=")
	builder.WriteString(gu.GuildCover)
	builder.WriteByte(')')
	return builder.String()
}

// Guilds is a parsable slice of Guild.
type Guilds []*Guild
