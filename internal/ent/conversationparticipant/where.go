// Code generated by ent, DO NOT EDIT.

package conversationparticipant

import (
	"kakashi/chaos/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldEQ(FieldUpdatedAt, v))
}

// ConversationID applies equality check predicate on the "conversation_id" field. It's identical to ConversationIDEQ.
func ConversationID(v string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldEQ(FieldConversationID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldEQ(FieldUserID, v))
}

// JoinedAt applies equality check predicate on the "joined_at" field. It's identical to JoinedAtEQ.
func JoinedAt(v time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldEQ(FieldJoinedAt, v))
}

// LastReadAt applies equality check predicate on the "last_read_at" field. It's identical to LastReadAtEQ.
func LastReadAt(v time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldEQ(FieldLastReadAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldLTE(FieldUpdatedAt, v))
}

// ConversationIDEQ applies the EQ predicate on the "conversation_id" field.
func ConversationIDEQ(v string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldEQ(FieldConversationID, v))
}

// ConversationIDNEQ applies the NEQ predicate on the "conversation_id" field.
func ConversationIDNEQ(v string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldNEQ(FieldConversationID, v))
}

// ConversationIDIn applies the In predicate on the "conversation_id" field.
func ConversationIDIn(vs ...string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldIn(FieldConversationID, vs...))
}

// ConversationIDNotIn applies the NotIn predicate on the "conversation_id" field.
func ConversationIDNotIn(vs ...string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldNotIn(FieldConversationID, vs...))
}

// ConversationIDGT applies the GT predicate on the "conversation_id" field.
func ConversationIDGT(v string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldGT(FieldConversationID, v))
}

// ConversationIDGTE applies the GTE predicate on the "conversation_id" field.
func ConversationIDGTE(v string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldGTE(FieldConversationID, v))
}

// ConversationIDLT applies the LT predicate on the "conversation_id" field.
func ConversationIDLT(v string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldLT(FieldConversationID, v))
}

// ConversationIDLTE applies the LTE predicate on the "conversation_id" field.
func ConversationIDLTE(v string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldLTE(FieldConversationID, v))
}

// ConversationIDContains applies the Contains predicate on the "conversation_id" field.
func ConversationIDContains(v string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldContains(FieldConversationID, v))
}

// ConversationIDHasPrefix applies the HasPrefix predicate on the "conversation_id" field.
func ConversationIDHasPrefix(v string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldHasPrefix(FieldConversationID, v))
}

// ConversationIDHasSuffix applies the HasSuffix predicate on the "conversation_id" field.
func ConversationIDHasSuffix(v string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldHasSuffix(FieldConversationID, v))
}

// ConversationIDEqualFold applies the EqualFold predicate on the "conversation_id" field.
func ConversationIDEqualFold(v string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldEqualFold(FieldConversationID, v))
}

// ConversationIDContainsFold applies the ContainsFold predicate on the "conversation_id" field.
func ConversationIDContainsFold(v string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldContainsFold(FieldConversationID, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldContainsFold(FieldUserID, v))
}

// JoinedAtEQ applies the EQ predicate on the "joined_at" field.
func JoinedAtEQ(v time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldEQ(FieldJoinedAt, v))
}

// JoinedAtNEQ applies the NEQ predicate on the "joined_at" field.
func JoinedAtNEQ(v time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldNEQ(FieldJoinedAt, v))
}

// JoinedAtIn applies the In predicate on the "joined_at" field.
func JoinedAtIn(vs ...time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldIn(FieldJoinedAt, vs...))
}

// JoinedAtNotIn applies the NotIn predicate on the "joined_at" field.
func JoinedAtNotIn(vs ...time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldNotIn(FieldJoinedAt, vs...))
}

// JoinedAtGT applies the GT predicate on the "joined_at" field.
func JoinedAtGT(v time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldGT(FieldJoinedAt, v))
}

// JoinedAtGTE applies the GTE predicate on the "joined_at" field.
func JoinedAtGTE(v time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldGTE(FieldJoinedAt, v))
}

// JoinedAtLT applies the LT predicate on the "joined_at" field.
func JoinedAtLT(v time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldLT(FieldJoinedAt, v))
}

// JoinedAtLTE applies the LTE predicate on the "joined_at" field.
func JoinedAtLTE(v time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldLTE(FieldJoinedAt, v))
}

// LastReadAtEQ applies the EQ predicate on the "last_read_at" field.
func LastReadAtEQ(v time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldEQ(FieldLastReadAt, v))
}

// LastReadAtNEQ applies the NEQ predicate on the "last_read_at" field.
func LastReadAtNEQ(v time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldNEQ(FieldLastReadAt, v))
}

// LastReadAtIn applies the In predicate on the "last_read_at" field.
func LastReadAtIn(vs ...time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldIn(FieldLastReadAt, vs...))
}

// LastReadAtNotIn applies the NotIn predicate on the "last_read_at" field.
func LastReadAtNotIn(vs ...time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldNotIn(FieldLastReadAt, vs...))
}

// LastReadAtGT applies the GT predicate on the "last_read_at" field.
func LastReadAtGT(v time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldGT(FieldLastReadAt, v))
}

// LastReadAtGTE applies the GTE predicate on the "last_read_at" field.
func LastReadAtGTE(v time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldGTE(FieldLastReadAt, v))
}

// LastReadAtLT applies the LT predicate on the "last_read_at" field.
func LastReadAtLT(v time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldLT(FieldLastReadAt, v))
}

// LastReadAtLTE applies the LTE predicate on the "last_read_at" field.
func LastReadAtLTE(v time.Time) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldLTE(FieldLastReadAt, v))
}

// LastReadAtIsNil applies the IsNil predicate on the "last_read_at" field.
func LastReadAtIsNil() predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldIsNull(FieldLastReadAt))
}

// LastReadAtNotNil applies the NotNil predicate on the "last_read_at" field.
func LastReadAtNotNil() predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.FieldNotNull(FieldLastReadAt))
}

// HasConversation applies the HasEdge predicate on the "conversation" edge.
func HasConversation() predicate.ConversationParticipant {
	return predicate.ConversationParticipant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ConversationTable, ConversationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConversationWith applies the HasEdge predicate on the "conversation" edge with a given conditions (other predicates).
func HasConversationWith(preds ...predicate.Conversation) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(func(s *sql.Selector) {
		step := newConversationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.ConversationParticipant {
	return predicate.ConversationParticipant(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ConversationParticipant) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ConversationParticipant) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ConversationParticipant) predicate.ConversationParticipant {
	return predicate.ConversationParticipant(sql.NotPredicates(p))
}
