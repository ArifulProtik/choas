// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kakashi/chaos/internal/ent/call"
	"kakashi/chaos/internal/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Call is the model entity for the Call schema.
type Call struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CallerID holds the value of the "caller_id" field.
	CallerID string `json:"caller_id,omitempty"`
	// CalleeID holds the value of the "callee_id" field.
	CalleeID string `json:"callee_id,omitempty"`
	// CallType holds the value of the "call_type" field.
	CallType call.CallType `json:"call_type,omitempty"`
	// Status holds the value of the "status" field.
	Status call.Status `json:"status,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt time.Time `json:"started_at,omitempty"`
	// AnsweredAt holds the value of the "answered_at" field.
	AnsweredAt time.Time `json:"answered_at,omitempty"`
	// EndedAt holds the value of the "ended_at" field.
	EndedAt time.Time `json:"ended_at,omitempty"`
	// Duration in seconds
	Duration int `json:"duration,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CallQuery when eager-loading is set.
	Edges        CallEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CallEdges holds the relations/edges for other nodes in the graph.
type CallEdges struct {
	// Caller holds the value of the caller edge.
	Caller *User `json:"caller,omitempty"`
	// Callee holds the value of the callee edge.
	Callee *User `json:"callee,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// CallerOrErr returns the Caller value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CallEdges) CallerOrErr() (*User, error) {
	if e.Caller != nil {
		return e.Caller, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "caller"}
}

// CalleeOrErr returns the Callee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CallEdges) CalleeOrErr() (*User, error) {
	if e.Callee != nil {
		return e.Callee, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "callee"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Call) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case call.FieldDuration:
			values[i] = new(sql.NullInt64)
		case call.FieldID, call.FieldCallerID, call.FieldCalleeID, call.FieldCallType, call.FieldStatus:
			values[i] = new(sql.NullString)
		case call.FieldCreatedAt, call.FieldUpdatedAt, call.FieldStartedAt, call.FieldAnsweredAt, call.FieldEndedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Call fields.
func (c *Call) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case call.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				c.ID = value.String
			}
		case call.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case call.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case call.FieldCallerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field caller_id", values[i])
			} else if value.Valid {
				c.CallerID = value.String
			}
		case call.FieldCalleeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field callee_id", values[i])
			} else if value.Valid {
				c.CalleeID = value.String
			}
		case call.FieldCallType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field call_type", values[i])
			} else if value.Valid {
				c.CallType = call.CallType(value.String)
			}
		case call.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = call.Status(value.String)
			}
		case call.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				c.StartedAt = value.Time
			}
		case call.FieldAnsweredAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field answered_at", values[i])
			} else if value.Valid {
				c.AnsweredAt = value.Time
			}
		case call.FieldEndedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ended_at", values[i])
			} else if value.Valid {
				c.EndedAt = value.Time
			}
		case call.FieldDuration:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration", values[i])
			} else if value.Valid {
				c.Duration = int(value.Int64)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Call.
// This includes values selected through modifiers, order, etc.
func (c *Call) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryCaller queries the "caller" edge of the Call entity.
func (c *Call) QueryCaller() *UserQuery {
	return NewCallClient(c.config).QueryCaller(c)
}

// QueryCallee queries the "callee" edge of the Call entity.
func (c *Call) QueryCallee() *UserQuery {
	return NewCallClient(c.config).QueryCallee(c)
}

// Update returns a builder for updating this Call.
// Note that you need to call Call.Unwrap() before calling this method if this Call
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Call) Update() *CallUpdateOne {
	return NewCallClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Call entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Call) Unwrap() *Call {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Call is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Call) String() string {
	var builder strings.Builder
	builder.WriteString("Call(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("caller_id=")
	builder.WriteString(c.CallerID)
	builder.WriteString(", ")
	builder.WriteString("callee_id=")
	builder.WriteString(c.CalleeID)
	builder.WriteString(", ")
	builder.WriteString("call_type=")
	builder.WriteString(fmt.Sprintf("%v", c.CallType))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", c.Status))
	builder.WriteString(", ")
	builder.WriteString("started_at=")
	builder.WriteString(c.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("answered_at=")
	builder.WriteString(c.AnsweredAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("ended_at=")
	builder.WriteString(c.EndedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("duration=")
	builder.WriteString(fmt.Sprintf("%v", c.Duration))
	builder.WriteByte(')')
	return builder.String()
}

// Calls is a parsable slice of Call.
type Calls []*Call
