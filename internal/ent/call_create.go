// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kakashi/chaos/internal/ent/call"
	"kakashi/chaos/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CallCreate is the builder for creating a Call entity.
type CallCreate struct {
	config
	mutation *CallMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (cc *CallCreate) SetCreatedAt(t time.Time) *CallCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CallCreate) SetNillableCreatedAt(t *time.Time) *CallCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CallCreate) SetUpdatedAt(t time.Time) *CallCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CallCreate) SetNillableUpdatedAt(t *time.Time) *CallCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetCallerID sets the "caller_id" field.
func (cc *CallCreate) SetCallerID(s string) *CallCreate {
	cc.mutation.SetCallerID(s)
	return cc
}

// SetCalleeID sets the "callee_id" field.
func (cc *CallCreate) SetCalleeID(s string) *CallCreate {
	cc.mutation.SetCalleeID(s)
	return cc
}

// SetCallType sets the "call_type" field.
func (cc *CallCreate) SetCallType(ct call.CallType) *CallCreate {
	cc.mutation.SetCallType(ct)
	return cc
}

// SetNillableCallType sets the "call_type" field if the given value is not nil.
func (cc *CallCreate) SetNillableCallType(ct *call.CallType) *CallCreate {
	if ct != nil {
		cc.SetCallType(*ct)
	}
	return cc
}

// SetStatus sets the "status" field.
func (cc *CallCreate) SetStatus(c call.Status) *CallCreate {
	cc.mutation.SetStatus(c)
	return cc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cc *CallCreate) SetNillableStatus(c *call.Status) *CallCreate {
	if c != nil {
		cc.SetStatus(*c)
	}
	return cc
}

// SetStartedAt sets the "started_at" field.
func (cc *CallCreate) SetStartedAt(t time.Time) *CallCreate {
	cc.mutation.SetStartedAt(t)
	return cc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (cc *CallCreate) SetNillableStartedAt(t *time.Time) *CallCreate {
	if t != nil {
		cc.SetStartedAt(*t)
	}
	return cc
}

// SetAnsweredAt sets the "answered_at" field.
func (cc *CallCreate) SetAnsweredAt(t time.Time) *CallCreate {
	cc.mutation.SetAnsweredAt(t)
	return cc
}

// SetNillableAnsweredAt sets the "answered_at" field if the given value is not nil.
func (cc *CallCreate) SetNillableAnsweredAt(t *time.Time) *CallCreate {
	if t != nil {
		cc.SetAnsweredAt(*t)
	}
	return cc
}

// SetEndedAt sets the "ended_at" field.
func (cc *CallCreate) SetEndedAt(t time.Time) *CallCreate {
	cc.mutation.SetEndedAt(t)
	return cc
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (cc *CallCreate) SetNillableEndedAt(t *time.Time) *CallCreate {
	if t != nil {
		cc.SetEndedAt(*t)
	}
	return cc
}

// SetDuration sets the "duration" field.
func (cc *CallCreate) SetDuration(i int) *CallCreate {
	cc.mutation.SetDuration(i)
	return cc
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (cc *CallCreate) SetNillableDuration(i *int) *CallCreate {
	if i != nil {
		cc.SetDuration(*i)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CallCreate) SetID(s string) *CallCreate {
	cc.mutation.SetID(s)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *CallCreate) SetNillableID(s *string) *CallCreate {
	if s != nil {
		cc.SetID(*s)
	}
	return cc
}

// SetCaller sets the "caller" edge to the User entity.
func (cc *CallCreate) SetCaller(u *User) *CallCreate {
	return cc.SetCallerID(u.ID)
}

// SetCallee sets the "callee" edge to the User entity.
func (cc *CallCreate) SetCallee(u *User) *CallCreate {
	return cc.SetCalleeID(u.ID)
}

// Mutation returns the CallMutation object of the builder.
func (cc *CallCreate) Mutation() *CallMutation {
	return cc.mutation
}

// Save creates the Call in the database.
func (cc *CallCreate) Save(ctx context.Context) (*Call, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CallCreate) SaveX(ctx context.Context) *Call {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CallCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CallCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CallCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := call.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := call.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.CallType(); !ok {
		v := call.DefaultCallType
		cc.mutation.SetCallType(v)
	}
	if _, ok := cc.mutation.Status(); !ok {
		v := call.DefaultStatus
		cc.mutation.SetStatus(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		v := call.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CallCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Call.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Call.updated_at"`)}
	}
	if _, ok := cc.mutation.CallerID(); !ok {
		return &ValidationError{Name: "caller_id", err: errors.New(`ent: missing required field "Call.caller_id"`)}
	}
	if v, ok := cc.mutation.CallerID(); ok {
		if err := call.CallerIDValidator(v); err != nil {
			return &ValidationError{Name: "caller_id", err: fmt.Errorf(`ent: validator failed for field "Call.caller_id": %w`, err)}
		}
	}
	if _, ok := cc.mutation.CalleeID(); !ok {
		return &ValidationError{Name: "callee_id", err: errors.New(`ent: missing required field "Call.callee_id"`)}
	}
	if v, ok := cc.mutation.CalleeID(); ok {
		if err := call.CalleeIDValidator(v); err != nil {
			return &ValidationError{Name: "callee_id", err: fmt.Errorf(`ent: validator failed for field "Call.callee_id": %w`, err)}
		}
	}
	if _, ok := cc.mutation.CallType(); !ok {
		return &ValidationError{Name: "call_type", err: errors.New(`ent: missing required field "Call.call_type"`)}
	}
	if v, ok := cc.mutation.CallType(); ok {
		if err := call.CallTypeValidator(v); err != nil {
			return &ValidationError{Name: "call_type", err: fmt.Errorf(`ent: validator failed for field "Call.call_type": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Call.status"`)}
	}
	if v, ok := cc.mutation.Status(); ok {
		if err := call.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Call.status": %w`, err)}
		}
	}
	if len(cc.mutation.CallerIDs()) == 0 {
		return &ValidationError{Name: "caller", err: errors.New(`ent: missing required edge "Call.caller"`)}
	}
	if len(cc.mutation.CalleeIDs()) == 0 {
		return &ValidationError{Name: "callee", err: errors.New(`ent: missing required edge "Call.callee"`)}
	}
	return nil
}

func (cc *CallCreate) sqlSave(ctx context.Context) (*Call, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Call.ID type: %T", _spec.ID.Value)
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CallCreate) createSpec() (*Call, *sqlgraph.CreateSpec) {
	var (
		_node = &Call{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(call.Table, sqlgraph.NewFieldSpec(call.FieldID, field.TypeString))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(call.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(call.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.CallType(); ok {
		_spec.SetField(call.FieldCallType, field.TypeEnum, value)
		_node.CallType = value
	}
	if value, ok := cc.mutation.Status(); ok {
		_spec.SetField(call.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := cc.mutation.StartedAt(); ok {
		_spec.SetField(call.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := cc.mutation.AnsweredAt(); ok {
		_spec.SetField(call.FieldAnsweredAt, field.TypeTime, value)
		_node.AnsweredAt = value
	}
	if value, ok := cc.mutation.EndedAt(); ok {
		_spec.SetField(call.FieldEndedAt, field.TypeTime, value)
		_node.EndedAt = value
	}
	if value, ok := cc.mutation.Duration(); ok {
		_spec.SetField(call.FieldDuration, field.TypeInt, value)
		_node.Duration = value
	}
	if nodes := cc.mutation.CallerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   call.CallerTable,
			Columns: []string{call.CallerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CallerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.CalleeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   call.CalleeTable,
			Columns: []string{call.CalleeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CalleeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CallCreateBulk is the builder for creating many Call entities in bulk.
type CallCreateBulk struct {
	config
	err      error
	builders []*CallCreate
}

// Save creates the Call entities in the database.
func (ccb *CallCreateBulk) Save(ctx context.Context) ([]*Call, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Call, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CallMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CallCreateBulk) SaveX(ctx context.Context) []*Call {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CallCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CallCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
