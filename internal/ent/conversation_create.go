// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kakashi/chaos/internal/ent/conversation"
	"kakashi/chaos/internal/ent/conversationparticipant"
	"kakashi/chaos/internal/ent/message"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConversationCreate is the builder for creating a Conversation entity.
type ConversationCreate struct {
	config
	mutation *ConversationMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (cc *ConversationCreate) SetCreatedAt(t time.Time) *ConversationCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *ConversationCreate) SetNillableCreatedAt(t *time.Time) *ConversationCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *ConversationCreate) SetUpdatedAt(t time.Time) *ConversationCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *ConversationCreate) SetNillableUpdatedAt(t *time.Time) *ConversationCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetType sets the "type" field.
func (cc *ConversationCreate) SetType(c conversation.Type) *ConversationCreate {
	cc.mutation.SetType(c)
	return cc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cc *ConversationCreate) SetNillableType(c *conversation.Type) *ConversationCreate {
	if c != nil {
		cc.SetType(*c)
	}
	return cc
}

// SetName sets the "name" field.
func (cc *ConversationCreate) SetName(s string) *ConversationCreate {
	cc.mutation.SetName(s)
	return cc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cc *ConversationCreate) SetNillableName(s *string) *ConversationCreate {
	if s != nil {
		cc.SetName(*s)
	}
	return cc
}

// SetLastMessageAt sets the "last_message_at" field.
func (cc *ConversationCreate) SetLastMessageAt(t time.Time) *ConversationCreate {
	cc.mutation.SetLastMessageAt(t)
	return cc
}

// SetNillableLastMessageAt sets the "last_message_at" field if the given value is not nil.
func (cc *ConversationCreate) SetNillableLastMessageAt(t *time.Time) *ConversationCreate {
	if t != nil {
		cc.SetLastMessageAt(*t)
	}
	return cc
}

// SetIsArchived sets the "is_archived" field.
func (cc *ConversationCreate) SetIsArchived(b bool) *ConversationCreate {
	cc.mutation.SetIsArchived(b)
	return cc
}

// SetNillableIsArchived sets the "is_archived" field if the given value is not nil.
func (cc *ConversationCreate) SetNillableIsArchived(b *bool) *ConversationCreate {
	if b != nil {
		cc.SetIsArchived(*b)
	}
	return cc
}

// SetIsMuted sets the "is_muted" field.
func (cc *ConversationCreate) SetIsMuted(b bool) *ConversationCreate {
	cc.mutation.SetIsMuted(b)
	return cc
}

// SetNillableIsMuted sets the "is_muted" field if the given value is not nil.
func (cc *ConversationCreate) SetNillableIsMuted(b *bool) *ConversationCreate {
	if b != nil {
		cc.SetIsMuted(*b)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *ConversationCreate) SetID(s string) *ConversationCreate {
	cc.mutation.SetID(s)
	return cc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cc *ConversationCreate) SetNillableID(s *string) *ConversationCreate {
	if s != nil {
		cc.SetID(*s)
	}
	return cc
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (cc *ConversationCreate) AddMessageIDs(ids ...string) *ConversationCreate {
	cc.mutation.AddMessageIDs(ids...)
	return cc
}

// AddMessages adds the "messages" edges to the Message entity.
func (cc *ConversationCreate) AddMessages(m ...*Message) *ConversationCreate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cc.AddMessageIDs(ids...)
}

// AddParticipantIDs adds the "participants" edge to the ConversationParticipant entity by IDs.
func (cc *ConversationCreate) AddParticipantIDs(ids ...string) *ConversationCreate {
	cc.mutation.AddParticipantIDs(ids...)
	return cc
}

// AddParticipants adds the "participants" edges to the ConversationParticipant entity.
func (cc *ConversationCreate) AddParticipants(c ...*ConversationParticipant) *ConversationCreate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cc.AddParticipantIDs(ids...)
}

// Mutation returns the ConversationMutation object of the builder.
func (cc *ConversationCreate) Mutation() *ConversationMutation {
	return cc.mutation
}

// Save creates the Conversation in the database.
func (cc *ConversationCreate) Save(ctx context.Context) (*Conversation, error) {
	cc.defaults()
	return withHooks(ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ConversationCreate) SaveX(ctx context.Context) *Conversation {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ConversationCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ConversationCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ConversationCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := conversation.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := conversation.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.GetType(); !ok {
		v := conversation.DefaultType
		cc.mutation.SetType(v)
	}
	if _, ok := cc.mutation.IsArchived(); !ok {
		v := conversation.DefaultIsArchived
		cc.mutation.SetIsArchived(v)
	}
	if _, ok := cc.mutation.IsMuted(); !ok {
		v := conversation.DefaultIsMuted
		cc.mutation.SetIsMuted(v)
	}
	if _, ok := cc.mutation.ID(); !ok {
		v := conversation.DefaultID()
		cc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ConversationCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Conversation.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Conversation.updated_at"`)}
	}
	if _, ok := cc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Conversation.type"`)}
	}
	if v, ok := cc.mutation.GetType(); ok {
		if err := conversation.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Conversation.type": %w`, err)}
		}
	}
	if v, ok := cc.mutation.Name(); ok {
		if err := conversation.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Conversation.name": %w`, err)}
		}
	}
	if _, ok := cc.mutation.IsArchived(); !ok {
		return &ValidationError{Name: "is_archived", err: errors.New(`ent: missing required field "Conversation.is_archived"`)}
	}
	if _, ok := cc.mutation.IsMuted(); !ok {
		return &ValidationError{Name: "is_muted", err: errors.New(`ent: missing required field "Conversation.is_muted"`)}
	}
	return nil
}

func (cc *ConversationCreate) sqlSave(ctx context.Context) (*Conversation, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Conversation.ID type: %T", _spec.ID.Value)
		}
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ConversationCreate) createSpec() (*Conversation, *sqlgraph.CreateSpec) {
	var (
		_node = &Conversation{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(conversation.Table, sqlgraph.NewFieldSpec(conversation.FieldID, field.TypeString))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(conversation.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(conversation.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.GetType(); ok {
		_spec.SetField(conversation.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := cc.mutation.Name(); ok {
		_spec.SetField(conversation.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cc.mutation.LastMessageAt(); ok {
		_spec.SetField(conversation.FieldLastMessageAt, field.TypeTime, value)
		_node.LastMessageAt = value
	}
	if value, ok := cc.mutation.IsArchived(); ok {
		_spec.SetField(conversation.FieldIsArchived, field.TypeBool, value)
		_node.IsArchived = value
	}
	if value, ok := cc.mutation.IsMuted(); ok {
		_spec.SetField(conversation.FieldIsMuted, field.TypeBool, value)
		_node.IsMuted = value
	}
	if nodes := cc.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.MessagesTable,
			Columns: []string{conversation.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.ParticipantsTable,
			Columns: []string{conversation.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversationparticipant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ConversationCreateBulk is the builder for creating many Conversation entities in bulk.
type ConversationCreateBulk struct {
	config
	err      error
	builders []*ConversationCreate
}

// Save creates the Conversation entities in the database.
func (ccb *ConversationCreateBulk) Save(ctx context.Context) ([]*Conversation, error) {
	if ccb.err != nil {
		return nil, ccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Conversation, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConversationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ConversationCreateBulk) SaveX(ctx context.Context) []*Conversation {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ConversationCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ConversationCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
