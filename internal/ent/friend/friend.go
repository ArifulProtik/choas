// Code generated by ent, DO NOT EDIT.

package friend

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the friend type in the database.
	Label = "friend"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldRequesterID holds the string denoting the requester_id field in the database.
	FieldRequesterID = "requester_id"
	// FieldAddresseeID holds the string denoting the addressee_id field in the database.
	FieldAddresseeID = "addressee_id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// EdgeRequester holds the string denoting the requester edge name in mutations.
	EdgeRequester = "requester"
	// EdgeAddressee holds the string denoting the addressee edge name in mutations.
	EdgeAddressee = "addressee"
	// Table holds the table name of the friend in the database.
	Table = "friends"
	// RequesterTable is the table that holds the requester relation/edge.
	RequesterTable = "friends"
	// RequesterInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	RequesterInverseTable = "users"
	// RequesterColumn is the table column denoting the requester relation/edge.
	RequesterColumn = "requester_id"
	// AddresseeTable is the table that holds the addressee relation/edge.
	AddresseeTable = "friends"
	// AddresseeInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	AddresseeInverseTable = "users"
	// AddresseeColumn is the table column denoting the addressee relation/edge.
	AddresseeColumn = "addressee_id"
)

// Columns holds all SQL columns for friend fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldRequesterID,
	FieldAddresseeID,
	FieldStatus,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// RequesterIDValidator is a validator for the "requester_id" field. It is called by the builders before save.
	RequesterIDValidator func(string) error
	// AddresseeIDValidator is a validator for the "addressee_id" field. It is called by the builders before save.
	AddresseeIDValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// Status defines the type for the "status" enum field.
type Status string

// StatusPending is the default value of the Status enum.
const DefaultStatus = StatusPending

// Status values.
const (
	StatusPending  Status = "pending"
	StatusAccepted Status = "accepted"
	StatusDeclined Status = "declined"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusAccepted, StatusDeclined:
		return nil
	default:
		return fmt.Errorf("friend: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Friend queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByRequesterID orders the results by the requester_id field.
func ByRequesterID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequesterID, opts...).ToFunc()
}

// ByAddresseeID orders the results by the addressee_id field.
func ByAddresseeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddresseeID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByRequesterField orders the results by requester field.
func ByRequesterField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRequesterStep(), sql.OrderByField(field, opts...))
	}
}

// ByAddresseeField orders the results by addressee field.
func ByAddresseeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAddresseeStep(), sql.OrderByField(field, opts...))
	}
}
func newRequesterStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RequesterInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, RequesterTable, RequesterColumn),
	)
}
func newAddresseeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AddresseeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AddresseeTable, AddresseeColumn),
	)
}
