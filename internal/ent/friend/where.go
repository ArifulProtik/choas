// Code generated by ent, DO NOT EDIT.

package friend

import (
	"kakashi/chaos/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Friend {
	return predicate.Friend(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Friend {
	return predicate.Friend(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Friend {
	return predicate.Friend(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Friend {
	return predicate.Friend(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Friend {
	return predicate.Friend(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Friend {
	return predicate.Friend(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Friend {
	return predicate.Friend(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Friend {
	return predicate.Friend(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Friend {
	return predicate.Friend(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Friend {
	return predicate.Friend(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Friend {
	return predicate.Friend(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldEQ(FieldUpdatedAt, v))
}

// RequesterID applies equality check predicate on the "requester_id" field. It's identical to RequesterIDEQ.
func RequesterID(v string) predicate.Friend {
	return predicate.Friend(sql.FieldEQ(FieldRequesterID, v))
}

// AddresseeID applies equality check predicate on the "addressee_id" field. It's identical to AddresseeIDEQ.
func AddresseeID(v string) predicate.Friend {
	return predicate.Friend(sql.FieldEQ(FieldAddresseeID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Friend {
	return predicate.Friend(sql.FieldLTE(FieldUpdatedAt, v))
}

// RequesterIDEQ applies the EQ predicate on the "requester_id" field.
func RequesterIDEQ(v string) predicate.Friend {
	return predicate.Friend(sql.FieldEQ(FieldRequesterID, v))
}

// RequesterIDNEQ applies the NEQ predicate on the "requester_id" field.
func RequesterIDNEQ(v string) predicate.Friend {
	return predicate.Friend(sql.FieldNEQ(FieldRequesterID, v))
}

// RequesterIDIn applies the In predicate on the "requester_id" field.
func RequesterIDIn(vs ...string) predicate.Friend {
	return predicate.Friend(sql.FieldIn(FieldRequesterID, vs...))
}

// RequesterIDNotIn applies the NotIn predicate on the "requester_id" field.
func RequesterIDNotIn(vs ...string) predicate.Friend {
	return predicate.Friend(sql.FieldNotIn(FieldRequesterID, vs...))
}

// RequesterIDGT applies the GT predicate on the "requester_id" field.
func RequesterIDGT(v string) predicate.Friend {
	return predicate.Friend(sql.FieldGT(FieldRequesterID, v))
}

// RequesterIDGTE applies the GTE predicate on the "requester_id" field.
func RequesterIDGTE(v string) predicate.Friend {
	return predicate.Friend(sql.FieldGTE(FieldRequesterID, v))
}

// RequesterIDLT applies the LT predicate on the "requester_id" field.
func RequesterIDLT(v string) predicate.Friend {
	return predicate.Friend(sql.FieldLT(FieldRequesterID, v))
}

// RequesterIDLTE applies the LTE predicate on the "requester_id" field.
func RequesterIDLTE(v string) predicate.Friend {
	return predicate.Friend(sql.FieldLTE(FieldRequesterID, v))
}

// RequesterIDContains applies the Contains predicate on the "requester_id" field.
func RequesterIDContains(v string) predicate.Friend {
	return predicate.Friend(sql.FieldContains(FieldRequesterID, v))
}

// RequesterIDHasPrefix applies the HasPrefix predicate on the "requester_id" field.
func RequesterIDHasPrefix(v string) predicate.Friend {
	return predicate.Friend(sql.FieldHasPrefix(FieldRequesterID, v))
}

// RequesterIDHasSuffix applies the HasSuffix predicate on the "requester_id" field.
func RequesterIDHasSuffix(v string) predicate.Friend {
	return predicate.Friend(sql.FieldHasSuffix(FieldRequesterID, v))
}

// RequesterIDEqualFold applies the EqualFold predicate on the "requester_id" field.
func RequesterIDEqualFold(v string) predicate.Friend {
	return predicate.Friend(sql.FieldEqualFold(FieldRequesterID, v))
}

// RequesterIDContainsFold applies the ContainsFold predicate on the "requester_id" field.
func RequesterIDContainsFold(v string) predicate.Friend {
	return predicate.Friend(sql.FieldContainsFold(FieldRequesterID, v))
}

// AddresseeIDEQ applies the EQ predicate on the "addressee_id" field.
func AddresseeIDEQ(v string) predicate.Friend {
	return predicate.Friend(sql.FieldEQ(FieldAddresseeID, v))
}

// AddresseeIDNEQ applies the NEQ predicate on the "addressee_id" field.
func AddresseeIDNEQ(v string) predicate.Friend {
	return predicate.Friend(sql.FieldNEQ(FieldAddresseeID, v))
}

// AddresseeIDIn applies the In predicate on the "addressee_id" field.
func AddresseeIDIn(vs ...string) predicate.Friend {
	return predicate.Friend(sql.FieldIn(FieldAddresseeID, vs...))
}

// AddresseeIDNotIn applies the NotIn predicate on the "addressee_id" field.
func AddresseeIDNotIn(vs ...string) predicate.Friend {
	return predicate.Friend(sql.FieldNotIn(FieldAddresseeID, vs...))
}

// AddresseeIDGT applies the GT predicate on the "addressee_id" field.
func AddresseeIDGT(v string) predicate.Friend {
	return predicate.Friend(sql.FieldGT(FieldAddresseeID, v))
}

// AddresseeIDGTE applies the GTE predicate on the "addressee_id" field.
func AddresseeIDGTE(v string) predicate.Friend {
	return predicate.Friend(sql.FieldGTE(FieldAddresseeID, v))
}

// AddresseeIDLT applies the LT predicate on the "addressee_id" field.
func AddresseeIDLT(v string) predicate.Friend {
	return predicate.Friend(sql.FieldLT(FieldAddresseeID, v))
}

// AddresseeIDLTE applies the LTE predicate on the "addressee_id" field.
func AddresseeIDLTE(v string) predicate.Friend {
	return predicate.Friend(sql.FieldLTE(FieldAddresseeID, v))
}

// AddresseeIDContains applies the Contains predicate on the "addressee_id" field.
func AddresseeIDContains(v string) predicate.Friend {
	return predicate.Friend(sql.FieldContains(FieldAddresseeID, v))
}

// AddresseeIDHasPrefix applies the HasPrefix predicate on the "addressee_id" field.
func AddresseeIDHasPrefix(v string) predicate.Friend {
	return predicate.Friend(sql.FieldHasPrefix(FieldAddresseeID, v))
}

// AddresseeIDHasSuffix applies the HasSuffix predicate on the "addressee_id" field.
func AddresseeIDHasSuffix(v string) predicate.Friend {
	return predicate.Friend(sql.FieldHasSuffix(FieldAddresseeID, v))
}

// AddresseeIDEqualFold applies the EqualFold predicate on the "addressee_id" field.
func AddresseeIDEqualFold(v string) predicate.Friend {
	return predicate.Friend(sql.FieldEqualFold(FieldAddresseeID, v))
}

// AddresseeIDContainsFold applies the ContainsFold predicate on the "addressee_id" field.
func AddresseeIDContainsFold(v string) predicate.Friend {
	return predicate.Friend(sql.FieldContainsFold(FieldAddresseeID, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Friend {
	return predicate.Friend(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Friend {
	return predicate.Friend(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Friend {
	return predicate.Friend(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Friend {
	return predicate.Friend(sql.FieldNotIn(FieldStatus, vs...))
}

// HasRequester applies the HasEdge predicate on the "requester" edge.
func HasRequester() predicate.Friend {
	return predicate.Friend(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RequesterTable, RequesterColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRequesterWith applies the HasEdge predicate on the "requester" edge with a given conditions (other predicates).
func HasRequesterWith(preds ...predicate.User) predicate.Friend {
	return predicate.Friend(func(s *sql.Selector) {
		step := newRequesterStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAddressee applies the HasEdge predicate on the "addressee" edge.
func HasAddressee() predicate.Friend {
	return predicate.Friend(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AddresseeTable, AddresseeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAddresseeWith applies the HasEdge predicate on the "addressee" edge with a given conditions (other predicates).
func HasAddresseeWith(preds ...predicate.User) predicate.Friend {
	return predicate.Friend(func(s *sql.Selector) {
		step := newAddresseeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Friend) predicate.Friend {
	return predicate.Friend(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Friend) predicate.Friend {
	return predicate.Friend(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Friend) predicate.Friend {
	return predicate.Friend(sql.NotPredicates(p))
}
