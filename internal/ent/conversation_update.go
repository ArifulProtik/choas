// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kakashi/chaos/internal/ent/conversation"
	"kakashi/chaos/internal/ent/conversationparticipant"
	"kakashi/chaos/internal/ent/message"
	"kakashi/chaos/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConversationUpdate is the builder for updating Conversation entities.
type ConversationUpdate struct {
	config
	hooks    []Hook
	mutation *ConversationMutation
}

// Where appends a list predicates to the ConversationUpdate builder.
func (cu *ConversationUpdate) Where(ps ...predicate.Conversation) *ConversationUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *ConversationUpdate) SetCreatedAt(t time.Time) *ConversationUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *ConversationUpdate) SetNillableCreatedAt(t *time.Time) *ConversationUpdate {
	if t != nil {
		cu.SetCreatedAt(*t)
	}
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *ConversationUpdate) SetUpdatedAt(t time.Time) *ConversationUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetType sets the "type" field.
func (cu *ConversationUpdate) SetType(c conversation.Type) *ConversationUpdate {
	cu.mutation.SetType(c)
	return cu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cu *ConversationUpdate) SetNillableType(c *conversation.Type) *ConversationUpdate {
	if c != nil {
		cu.SetType(*c)
	}
	return cu
}

// SetName sets the "name" field.
func (cu *ConversationUpdate) SetName(s string) *ConversationUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cu *ConversationUpdate) SetNillableName(s *string) *ConversationUpdate {
	if s != nil {
		cu.SetName(*s)
	}
	return cu
}

// ClearName clears the value of the "name" field.
func (cu *ConversationUpdate) ClearName() *ConversationUpdate {
	cu.mutation.ClearName()
	return cu
}

// SetLastMessageAt sets the "last_message_at" field.
func (cu *ConversationUpdate) SetLastMessageAt(t time.Time) *ConversationUpdate {
	cu.mutation.SetLastMessageAt(t)
	return cu
}

// SetNillableLastMessageAt sets the "last_message_at" field if the given value is not nil.
func (cu *ConversationUpdate) SetNillableLastMessageAt(t *time.Time) *ConversationUpdate {
	if t != nil {
		cu.SetLastMessageAt(*t)
	}
	return cu
}

// ClearLastMessageAt clears the value of the "last_message_at" field.
func (cu *ConversationUpdate) ClearLastMessageAt() *ConversationUpdate {
	cu.mutation.ClearLastMessageAt()
	return cu
}

// SetIsArchived sets the "is_archived" field.
func (cu *ConversationUpdate) SetIsArchived(b bool) *ConversationUpdate {
	cu.mutation.SetIsArchived(b)
	return cu
}

// SetNillableIsArchived sets the "is_archived" field if the given value is not nil.
func (cu *ConversationUpdate) SetNillableIsArchived(b *bool) *ConversationUpdate {
	if b != nil {
		cu.SetIsArchived(*b)
	}
	return cu
}

// SetIsMuted sets the "is_muted" field.
func (cu *ConversationUpdate) SetIsMuted(b bool) *ConversationUpdate {
	cu.mutation.SetIsMuted(b)
	return cu
}

// SetNillableIsMuted sets the "is_muted" field if the given value is not nil.
func (cu *ConversationUpdate) SetNillableIsMuted(b *bool) *ConversationUpdate {
	if b != nil {
		cu.SetIsMuted(*b)
	}
	return cu
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (cu *ConversationUpdate) AddMessageIDs(ids ...string) *ConversationUpdate {
	cu.mutation.AddMessageIDs(ids...)
	return cu
}

// AddMessages adds the "messages" edges to the Message entity.
func (cu *ConversationUpdate) AddMessages(m ...*Message) *ConversationUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cu.AddMessageIDs(ids...)
}

// AddParticipantIDs adds the "participants" edge to the ConversationParticipant entity by IDs.
func (cu *ConversationUpdate) AddParticipantIDs(ids ...string) *ConversationUpdate {
	cu.mutation.AddParticipantIDs(ids...)
	return cu
}

// AddParticipants adds the "participants" edges to the ConversationParticipant entity.
func (cu *ConversationUpdate) AddParticipants(c ...*ConversationParticipant) *ConversationUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.AddParticipantIDs(ids...)
}

// Mutation returns the ConversationMutation object of the builder.
func (cu *ConversationUpdate) Mutation() *ConversationMutation {
	return cu.mutation
}

// ClearMessages clears all "messages" edges to the Message entity.
func (cu *ConversationUpdate) ClearMessages() *ConversationUpdate {
	cu.mutation.ClearMessages()
	return cu
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (cu *ConversationUpdate) RemoveMessageIDs(ids ...string) *ConversationUpdate {
	cu.mutation.RemoveMessageIDs(ids...)
	return cu
}

// RemoveMessages removes "messages" edges to Message entities.
func (cu *ConversationUpdate) RemoveMessages(m ...*Message) *ConversationUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cu.RemoveMessageIDs(ids...)
}

// ClearParticipants clears all "participants" edges to the ConversationParticipant entity.
func (cu *ConversationUpdate) ClearParticipants() *ConversationUpdate {
	cu.mutation.ClearParticipants()
	return cu
}

// RemoveParticipantIDs removes the "participants" edge to ConversationParticipant entities by IDs.
func (cu *ConversationUpdate) RemoveParticipantIDs(ids ...string) *ConversationUpdate {
	cu.mutation.RemoveParticipantIDs(ids...)
	return cu
}

// RemoveParticipants removes "participants" edges to ConversationParticipant entities.
func (cu *ConversationUpdate) RemoveParticipants(c ...*ConversationParticipant) *ConversationUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cu.RemoveParticipantIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *ConversationUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *ConversationUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *ConversationUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *ConversationUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *ConversationUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := conversation.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *ConversationUpdate) check() error {
	if v, ok := cu.mutation.GetType(); ok {
		if err := conversation.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Conversation.type": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Name(); ok {
		if err := conversation.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Conversation.name": %w`, err)}
		}
	}
	return nil
}

func (cu *ConversationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(conversation.Table, conversation.Columns, sqlgraph.NewFieldSpec(conversation.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(conversation.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(conversation.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.SetField(conversation.FieldType, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.SetField(conversation.FieldName, field.TypeString, value)
	}
	if cu.mutation.NameCleared() {
		_spec.ClearField(conversation.FieldName, field.TypeString)
	}
	if value, ok := cu.mutation.LastMessageAt(); ok {
		_spec.SetField(conversation.FieldLastMessageAt, field.TypeTime, value)
	}
	if cu.mutation.LastMessageAtCleared() {
		_spec.ClearField(conversation.FieldLastMessageAt, field.TypeTime)
	}
	if value, ok := cu.mutation.IsArchived(); ok {
		_spec.SetField(conversation.FieldIsArchived, field.TypeBool, value)
	}
	if value, ok := cu.mutation.IsMuted(); ok {
		_spec.SetField(conversation.FieldIsMuted, field.TypeBool, value)
	}
	if cu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.MessagesTable,
			Columns: []string{conversation.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !cu.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.MessagesTable,
			Columns: []string{conversation.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.MessagesTable,
			Columns: []string{conversation.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.ParticipantsTable,
			Columns: []string{conversation.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversationparticipant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !cu.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.ParticipantsTable,
			Columns: []string{conversation.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversationparticipant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.ParticipantsTable,
			Columns: []string{conversation.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversationparticipant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{conversation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// ConversationUpdateOne is the builder for updating a single Conversation entity.
type ConversationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConversationMutation
}

// SetCreatedAt sets the "created_at" field.
func (cuo *ConversationUpdateOne) SetCreatedAt(t time.Time) *ConversationUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *ConversationUpdateOne) SetNillableCreatedAt(t *time.Time) *ConversationUpdateOne {
	if t != nil {
		cuo.SetCreatedAt(*t)
	}
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *ConversationUpdateOne) SetUpdatedAt(t time.Time) *ConversationUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetType sets the "type" field.
func (cuo *ConversationUpdateOne) SetType(c conversation.Type) *ConversationUpdateOne {
	cuo.mutation.SetType(c)
	return cuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cuo *ConversationUpdateOne) SetNillableType(c *conversation.Type) *ConversationUpdateOne {
	if c != nil {
		cuo.SetType(*c)
	}
	return cuo
}

// SetName sets the "name" field.
func (cuo *ConversationUpdateOne) SetName(s string) *ConversationUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (cuo *ConversationUpdateOne) SetNillableName(s *string) *ConversationUpdateOne {
	if s != nil {
		cuo.SetName(*s)
	}
	return cuo
}

// ClearName clears the value of the "name" field.
func (cuo *ConversationUpdateOne) ClearName() *ConversationUpdateOne {
	cuo.mutation.ClearName()
	return cuo
}

// SetLastMessageAt sets the "last_message_at" field.
func (cuo *ConversationUpdateOne) SetLastMessageAt(t time.Time) *ConversationUpdateOne {
	cuo.mutation.SetLastMessageAt(t)
	return cuo
}

// SetNillableLastMessageAt sets the "last_message_at" field if the given value is not nil.
func (cuo *ConversationUpdateOne) SetNillableLastMessageAt(t *time.Time) *ConversationUpdateOne {
	if t != nil {
		cuo.SetLastMessageAt(*t)
	}
	return cuo
}

// ClearLastMessageAt clears the value of the "last_message_at" field.
func (cuo *ConversationUpdateOne) ClearLastMessageAt() *ConversationUpdateOne {
	cuo.mutation.ClearLastMessageAt()
	return cuo
}

// SetIsArchived sets the "is_archived" field.
func (cuo *ConversationUpdateOne) SetIsArchived(b bool) *ConversationUpdateOne {
	cuo.mutation.SetIsArchived(b)
	return cuo
}

// SetNillableIsArchived sets the "is_archived" field if the given value is not nil.
func (cuo *ConversationUpdateOne) SetNillableIsArchived(b *bool) *ConversationUpdateOne {
	if b != nil {
		cuo.SetIsArchived(*b)
	}
	return cuo
}

// SetIsMuted sets the "is_muted" field.
func (cuo *ConversationUpdateOne) SetIsMuted(b bool) *ConversationUpdateOne {
	cuo.mutation.SetIsMuted(b)
	return cuo
}

// SetNillableIsMuted sets the "is_muted" field if the given value is not nil.
func (cuo *ConversationUpdateOne) SetNillableIsMuted(b *bool) *ConversationUpdateOne {
	if b != nil {
		cuo.SetIsMuted(*b)
	}
	return cuo
}

// AddMessageIDs adds the "messages" edge to the Message entity by IDs.
func (cuo *ConversationUpdateOne) AddMessageIDs(ids ...string) *ConversationUpdateOne {
	cuo.mutation.AddMessageIDs(ids...)
	return cuo
}

// AddMessages adds the "messages" edges to the Message entity.
func (cuo *ConversationUpdateOne) AddMessages(m ...*Message) *ConversationUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cuo.AddMessageIDs(ids...)
}

// AddParticipantIDs adds the "participants" edge to the ConversationParticipant entity by IDs.
func (cuo *ConversationUpdateOne) AddParticipantIDs(ids ...string) *ConversationUpdateOne {
	cuo.mutation.AddParticipantIDs(ids...)
	return cuo
}

// AddParticipants adds the "participants" edges to the ConversationParticipant entity.
func (cuo *ConversationUpdateOne) AddParticipants(c ...*ConversationParticipant) *ConversationUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.AddParticipantIDs(ids...)
}

// Mutation returns the ConversationMutation object of the builder.
func (cuo *ConversationUpdateOne) Mutation() *ConversationMutation {
	return cuo.mutation
}

// ClearMessages clears all "messages" edges to the Message entity.
func (cuo *ConversationUpdateOne) ClearMessages() *ConversationUpdateOne {
	cuo.mutation.ClearMessages()
	return cuo
}

// RemoveMessageIDs removes the "messages" edge to Message entities by IDs.
func (cuo *ConversationUpdateOne) RemoveMessageIDs(ids ...string) *ConversationUpdateOne {
	cuo.mutation.RemoveMessageIDs(ids...)
	return cuo
}

// RemoveMessages removes "messages" edges to Message entities.
func (cuo *ConversationUpdateOne) RemoveMessages(m ...*Message) *ConversationUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return cuo.RemoveMessageIDs(ids...)
}

// ClearParticipants clears all "participants" edges to the ConversationParticipant entity.
func (cuo *ConversationUpdateOne) ClearParticipants() *ConversationUpdateOne {
	cuo.mutation.ClearParticipants()
	return cuo
}

// RemoveParticipantIDs removes the "participants" edge to ConversationParticipant entities by IDs.
func (cuo *ConversationUpdateOne) RemoveParticipantIDs(ids ...string) *ConversationUpdateOne {
	cuo.mutation.RemoveParticipantIDs(ids...)
	return cuo
}

// RemoveParticipants removes "participants" edges to ConversationParticipant entities.
func (cuo *ConversationUpdateOne) RemoveParticipants(c ...*ConversationParticipant) *ConversationUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return cuo.RemoveParticipantIDs(ids...)
}

// Where appends a list predicates to the ConversationUpdate builder.
func (cuo *ConversationUpdateOne) Where(ps ...predicate.Conversation) *ConversationUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *ConversationUpdateOne) Select(field string, fields ...string) *ConversationUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Conversation entity.
func (cuo *ConversationUpdateOne) Save(ctx context.Context) (*Conversation, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *ConversationUpdateOne) SaveX(ctx context.Context) *Conversation {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *ConversationUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *ConversationUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *ConversationUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := conversation.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *ConversationUpdateOne) check() error {
	if v, ok := cuo.mutation.GetType(); ok {
		if err := conversation.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Conversation.type": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Name(); ok {
		if err := conversation.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Conversation.name": %w`, err)}
		}
	}
	return nil
}

func (cuo *ConversationUpdateOne) sqlSave(ctx context.Context) (_node *Conversation, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(conversation.Table, conversation.Columns, sqlgraph.NewFieldSpec(conversation.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Conversation.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, conversation.FieldID)
		for _, f := range fields {
			if !conversation.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != conversation.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(conversation.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(conversation.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.SetField(conversation.FieldType, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.SetField(conversation.FieldName, field.TypeString, value)
	}
	if cuo.mutation.NameCleared() {
		_spec.ClearField(conversation.FieldName, field.TypeString)
	}
	if value, ok := cuo.mutation.LastMessageAt(); ok {
		_spec.SetField(conversation.FieldLastMessageAt, field.TypeTime, value)
	}
	if cuo.mutation.LastMessageAtCleared() {
		_spec.ClearField(conversation.FieldLastMessageAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.IsArchived(); ok {
		_spec.SetField(conversation.FieldIsArchived, field.TypeBool, value)
	}
	if value, ok := cuo.mutation.IsMuted(); ok {
		_spec.SetField(conversation.FieldIsMuted, field.TypeBool, value)
	}
	if cuo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.MessagesTable,
			Columns: []string{conversation.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedMessagesIDs(); len(nodes) > 0 && !cuo.mutation.MessagesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.MessagesTable,
			Columns: []string{conversation.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.MessagesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.MessagesTable,
			Columns: []string{conversation.MessagesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(message.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.ParticipantsTable,
			Columns: []string{conversation.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversationparticipant.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedParticipantsIDs(); len(nodes) > 0 && !cuo.mutation.ParticipantsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.ParticipantsTable,
			Columns: []string{conversation.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversationparticipant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.ParticipantsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   conversation.ParticipantsTable,
			Columns: []string{conversation.ParticipantsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversationparticipant.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Conversation{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{conversation.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
