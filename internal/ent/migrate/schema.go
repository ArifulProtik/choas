// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// BlocksColumns holds the columns for the "blocks" table.
	BlocksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "blocker_id", Type: field.TypeString},
		{Name: "blocked_id", Type: field.TypeString},
	}
	// BlocksTable holds the schema information for the "blocks" table.
	BlocksTable = &schema.Table{
		Name:       "blocks",
		Columns:    BlocksColumns,
		PrimaryKey: []*schema.Column{BlocksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "blocks_users_blocker",
				Columns:    []*schema.Column{BlocksColumns[3]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "blocks_users_blocked",
				Columns:    []*schema.Column{BlocksColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "block_blocker_id_blocked_id",
				Unique:  true,
				Columns: []*schema.Column{BlocksColumns[3], BlocksColumns[4]},
			},
			{
				Name:    "block_blocked_id",
				Unique:  false,
				Columns: []*schema.Column{BlocksColumns[4]},
			},
		},
	}
	// CallsColumns holds the columns for the "calls" table.
	CallsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "call_type", Type: field.TypeEnum, Enums: []string{"voice", "video"}, Default: "voice"},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"pending", "ringing", "accepted", "declined", "ended", "missed", "failed"}, Default: "pending"},
		{Name: "started_at", Type: field.TypeTime, Nullable: true},
		{Name: "answered_at", Type: field.TypeTime, Nullable: true},
		{Name: "ended_at", Type: field.TypeTime, Nullable: true},
		{Name: "duration", Type: field.TypeInt, Nullable: true},
		{Name: "caller_id", Type: field.TypeString},
		{Name: "callee_id", Type: field.TypeString},
	}
	// CallsTable holds the schema information for the "calls" table.
	CallsTable = &schema.Table{
		Name:       "calls",
		Columns:    CallsColumns,
		PrimaryKey: []*schema.Column{CallsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "calls_users_caller",
				Columns:    []*schema.Column{CallsColumns[9]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "calls_users_callee",
				Columns:    []*schema.Column{CallsColumns[10]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "call_caller_id_created_at",
				Unique:  false,
				Columns: []*schema.Column{CallsColumns[9], CallsColumns[1]},
			},
			{
				Name:    "call_callee_id_created_at",
				Unique:  false,
				Columns: []*schema.Column{CallsColumns[10], CallsColumns[1]},
			},
			{
				Name:    "call_status",
				Unique:  false,
				Columns: []*schema.Column{CallsColumns[4]},
			},
			{
				Name:    "call_call_type",
				Unique:  false,
				Columns: []*schema.Column{CallsColumns[3]},
			},
			{
				Name:    "call_created_at",
				Unique:  false,
				Columns: []*schema.Column{CallsColumns[1]},
			},
			{
				Name:    "call_caller_id_status",
				Unique:  false,
				Columns: []*schema.Column{CallsColumns[9], CallsColumns[4]},
			},
			{
				Name:    "call_callee_id_status",
				Unique:  false,
				Columns: []*schema.Column{CallsColumns[10], CallsColumns[4]},
			},
		},
	}
	// ConversationsColumns holds the columns for the "conversations" table.
	ConversationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"direct", "group"}, Default: "direct"},
		{Name: "name", Type: field.TypeString, Nullable: true, Size: 100},
		{Name: "last_message_at", Type: field.TypeTime, Nullable: true},
		{Name: "is_archived", Type: field.TypeBool, Default: false},
		{Name: "is_muted", Type: field.TypeBool, Default: false},
	}
	// ConversationsTable holds the schema information for the "conversations" table.
	ConversationsTable = &schema.Table{
		Name:       "conversations",
		Columns:    ConversationsColumns,
		PrimaryKey: []*schema.Column{ConversationsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "conversation_type",
				Unique:  false,
				Columns: []*schema.Column{ConversationsColumns[3]},
			},
			{
				Name:    "conversation_type_last_message_at",
				Unique:  false,
				Columns: []*schema.Column{ConversationsColumns[3], ConversationsColumns[5]},
			},
			{
				Name:    "conversation_last_message_at",
				Unique:  false,
				Columns: []*schema.Column{ConversationsColumns[5]},
			},
			{
				Name:    "conversation_is_archived",
				Unique:  false,
				Columns: []*schema.Column{ConversationsColumns[6]},
			},
			{
				Name:    "conversation_is_muted",
				Unique:  false,
				Columns: []*schema.Column{ConversationsColumns[7]},
			},
			{
				Name:    "conversation_created_at",
				Unique:  false,
				Columns: []*schema.Column{ConversationsColumns[1]},
			},
		},
	}
	// ConversationParticipantsColumns holds the columns for the "conversation_participants" table.
	ConversationParticipantsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "joined_at", Type: field.TypeTime},
		{Name: "last_read_at", Type: field.TypeTime, Nullable: true},
		{Name: "is_archived", Type: field.TypeBool, Default: false},
		{Name: "is_muted", Type: field.TypeBool, Default: false},
		{Name: "conversation_participants", Type: field.TypeString, Nullable: true},
		{Name: "conversation_id", Type: field.TypeString},
		{Name: "user_id", Type: field.TypeString},
	}
	// ConversationParticipantsTable holds the schema information for the "conversation_participants" table.
	ConversationParticipantsTable = &schema.Table{
		Name:       "conversation_participants",
		Columns:    ConversationParticipantsColumns,
		PrimaryKey: []*schema.Column{ConversationParticipantsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "conversation_participants_conversations_participants",
				Columns:    []*schema.Column{ConversationParticipantsColumns[7]},
				RefColumns: []*schema.Column{ConversationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "conversation_participants_conversations_conversation",
				Columns:    []*schema.Column{ConversationParticipantsColumns[8]},
				RefColumns: []*schema.Column{ConversationsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "conversation_participants_users_user",
				Columns:    []*schema.Column{ConversationParticipantsColumns[9]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "conversationparticipant_conversation_id_user_id",
				Unique:  true,
				Columns: []*schema.Column{ConversationParticipantsColumns[8], ConversationParticipantsColumns[9]},
			},
			{
				Name:    "conversationparticipant_user_id",
				Unique:  false,
				Columns: []*schema.Column{ConversationParticipantsColumns[9]},
			},
			{
				Name:    "conversationparticipant_user_id_is_archived",
				Unique:  false,
				Columns: []*schema.Column{ConversationParticipantsColumns[9], ConversationParticipantsColumns[5]},
			},
			{
				Name:    "conversationparticipant_user_id_is_muted",
				Unique:  false,
				Columns: []*schema.Column{ConversationParticipantsColumns[9], ConversationParticipantsColumns[6]},
			},
			{
				Name:    "conversationparticipant_user_id_is_archived_is_muted",
				Unique:  false,
				Columns: []*schema.Column{ConversationParticipantsColumns[9], ConversationParticipantsColumns[5], ConversationParticipantsColumns[6]},
			},
			{
				Name:    "conversationparticipant_last_read_at",
				Unique:  false,
				Columns: []*schema.Column{ConversationParticipantsColumns[4]},
			},
			{
				Name:    "conversationparticipant_is_archived",
				Unique:  false,
				Columns: []*schema.Column{ConversationParticipantsColumns[5]},
			},
			{
				Name:    "conversationparticipant_is_muted",
				Unique:  false,
				Columns: []*schema.Column{ConversationParticipantsColumns[6]},
			},
			{
				Name:    "conversationparticipant_joined_at",
				Unique:  false,
				Columns: []*schema.Column{ConversationParticipantsColumns[3]},
			},
		},
	}
	// FriendsColumns holds the columns for the "friends" table.
	FriendsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"pending", "accepted", "declined"}, Default: "pending"},
		{Name: "requester_id", Type: field.TypeString},
		{Name: "addressee_id", Type: field.TypeString},
	}
	// FriendsTable holds the schema information for the "friends" table.
	FriendsTable = &schema.Table{
		Name:       "friends",
		Columns:    FriendsColumns,
		PrimaryKey: []*schema.Column{FriendsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "friends_users_requester",
				Columns:    []*schema.Column{FriendsColumns[4]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "friends_users_addressee",
				Columns:    []*schema.Column{FriendsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "friend_requester_id_addressee_id",
				Unique:  true,
				Columns: []*schema.Column{FriendsColumns[4], FriendsColumns[5]},
			},
			{
				Name:    "friend_addressee_id_status",
				Unique:  false,
				Columns: []*schema.Column{FriendsColumns[5], FriendsColumns[3]},
			},
			{
				Name:    "friend_requester_id_status",
				Unique:  false,
				Columns: []*schema.Column{FriendsColumns[4], FriendsColumns[3]},
			},
			{
				Name:    "friend_status",
				Unique:  false,
				Columns: []*schema.Column{FriendsColumns[3]},
			},
			{
				Name:    "friend_created_at",
				Unique:  false,
				Columns: []*schema.Column{FriendsColumns[1]},
			},
			{
				Name:    "friend_addressee_id_status_created_at",
				Unique:  false,
				Columns: []*schema.Column{FriendsColumns[5], FriendsColumns[3], FriendsColumns[1]},
			},
			{
				Name:    "friend_requester_id_status_created_at",
				Unique:  false,
				Columns: []*schema.Column{FriendsColumns[4], FriendsColumns[3], FriendsColumns[1]},
			},
		},
	}
	// GuildsColumns holds the columns for the "guilds" table.
	GuildsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString},
		{Name: "guild_icon", Type: field.TypeString, Nullable: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "guild_cover", Type: field.TypeString, Nullable: true},
		{Name: "user_owned_guilds", Type: field.TypeString},
	}
	// GuildsTable holds the schema information for the "guilds" table.
	GuildsTable = &schema.Table{
		Name:       "guilds",
		Columns:    GuildsColumns,
		PrimaryKey: []*schema.Column{GuildsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "guilds_users_owned_guilds",
				Columns:    []*schema.Column{GuildsColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// InvitationsColumns holds the columns for the "invitations" table.
	InvitationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "code", Type: field.TypeString, Unique: true},
		{Name: "invitation_guild", Type: field.TypeString, Nullable: true},
		{Name: "invitation_invited_by", Type: field.TypeString, Nullable: true},
	}
	// InvitationsTable holds the schema information for the "invitations" table.
	InvitationsTable = &schema.Table{
		Name:       "invitations",
		Columns:    InvitationsColumns,
		PrimaryKey: []*schema.Column{InvitationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "invitations_guilds_guild",
				Columns:    []*schema.Column{InvitationsColumns[4]},
				RefColumns: []*schema.Column{GuildsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "invitations_users_invited_by",
				Columns:    []*schema.Column{InvitationsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// MembersColumns holds the columns for the "members" table.
	MembersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "nickname", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "joined_at", Type: field.TypeTime},
		{Name: "is_muted", Type: field.TypeBool, Default: false},
		{Name: "is_deafened", Type: field.TypeBool, Default: false},
		{Name: "is_bannned", Type: field.TypeBool, Default: false},
		{Name: "guild_guild_members", Type: field.TypeString},
		{Name: "user_member_of", Type: field.TypeString},
	}
	// MembersTable holds the schema information for the "members" table.
	MembersTable = &schema.Table{
		Name:       "members",
		Columns:    MembersColumns,
		PrimaryKey: []*schema.Column{MembersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "members_guilds_guild_members",
				Columns:    []*schema.Column{MembersColumns[8]},
				RefColumns: []*schema.Column{GuildsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "members_users_member_of",
				Columns:    []*schema.Column{MembersColumns[9]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// MessagesColumns holds the columns for the "messages" table.
	MessagesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "content", Type: field.TypeString, Size: 2147483647},
		{Name: "message_type", Type: field.TypeEnum, Enums: []string{"text", "image", "file", "call_start", "call_end"}, Default: "text"},
		{Name: "is_deleted", Type: field.TypeBool, Default: false},
		{Name: "edited_at", Type: field.TypeTime, Nullable: true},
		{Name: "conversation_messages", Type: field.TypeString, Nullable: true},
		{Name: "conversation_id", Type: field.TypeString},
		{Name: "sender_id", Type: field.TypeString},
		{Name: "call_id", Type: field.TypeString, Nullable: true},
	}
	// MessagesTable holds the schema information for the "messages" table.
	MessagesTable = &schema.Table{
		Name:       "messages",
		Columns:    MessagesColumns,
		PrimaryKey: []*schema.Column{MessagesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "messages_conversations_messages",
				Columns:    []*schema.Column{MessagesColumns[7]},
				RefColumns: []*schema.Column{ConversationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "messages_conversations_conversation",
				Columns:    []*schema.Column{MessagesColumns[8]},
				RefColumns: []*schema.Column{ConversationsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "messages_users_sender",
				Columns:    []*schema.Column{MessagesColumns[9]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "messages_calls_call",
				Columns:    []*schema.Column{MessagesColumns[10]},
				RefColumns: []*schema.Column{CallsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "message_conversation_id_created_at",
				Unique:  false,
				Columns: []*schema.Column{MessagesColumns[8], MessagesColumns[1]},
			},
			{
				Name:    "message_conversation_id_is_deleted_created_at",
				Unique:  false,
				Columns: []*schema.Column{MessagesColumns[8], MessagesColumns[5], MessagesColumns[1]},
			},
			{
				Name:    "message_sender_id",
				Unique:  false,
				Columns: []*schema.Column{MessagesColumns[9]},
			},
			{
				Name:    "message_sender_id_created_at",
				Unique:  false,
				Columns: []*schema.Column{MessagesColumns[9], MessagesColumns[1]},
			},
			{
				Name:    "message_is_deleted",
				Unique:  false,
				Columns: []*schema.Column{MessagesColumns[5]},
			},
			{
				Name:    "message_message_type",
				Unique:  false,
				Columns: []*schema.Column{MessagesColumns[4]},
			},
			{
				Name:    "message_created_at",
				Unique:  false,
				Columns: []*schema.Column{MessagesColumns[1]},
			},
			{
				Name:    "message_call_id",
				Unique:  false,
				Columns: []*schema.Column{MessagesColumns[10]},
			},
		},
	}
	// NotificationsColumns holds the columns for the "notifications" table.
	NotificationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"friend_request", "message", "friend_accepted"}},
		{Name: "title", Type: field.TypeString, Size: 100},
		{Name: "content", Type: field.TypeString, Size: 2147483647},
		{Name: "is_read", Type: field.TypeBool, Default: false},
		{Name: "user_id", Type: field.TypeString},
		{Name: "related_user_id", Type: field.TypeString, Nullable: true},
		{Name: "related_conversation_id", Type: field.TypeString, Nullable: true},
	}
	// NotificationsTable holds the schema information for the "notifications" table.
	NotificationsTable = &schema.Table{
		Name:       "notifications",
		Columns:    NotificationsColumns,
		PrimaryKey: []*schema.Column{NotificationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "notifications_users_user",
				Columns:    []*schema.Column{NotificationsColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "notifications_users_related_user",
				Columns:    []*schema.Column{NotificationsColumns[8]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "notifications_conversations_related_conversation",
				Columns:    []*schema.Column{NotificationsColumns[9]},
				RefColumns: []*schema.Column{ConversationsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "notification_user_id_created_at",
				Unique:  false,
				Columns: []*schema.Column{NotificationsColumns[7], NotificationsColumns[1]},
			},
			{
				Name:    "notification_user_id_is_read",
				Unique:  false,
				Columns: []*schema.Column{NotificationsColumns[7], NotificationsColumns[6]},
			},
			{
				Name:    "notification_user_id_is_read_created_at",
				Unique:  false,
				Columns: []*schema.Column{NotificationsColumns[7], NotificationsColumns[6], NotificationsColumns[1]},
			},
			{
				Name:    "notification_type",
				Unique:  false,
				Columns: []*schema.Column{NotificationsColumns[3]},
			},
			{
				Name:    "notification_user_id_type",
				Unique:  false,
				Columns: []*schema.Column{NotificationsColumns[7], NotificationsColumns[3]},
			},
			{
				Name:    "notification_is_read",
				Unique:  false,
				Columns: []*schema.Column{NotificationsColumns[6]},
			},
			{
				Name:    "notification_created_at",
				Unique:  false,
				Columns: []*schema.Column{NotificationsColumns[1]},
			},
			{
				Name:    "notification_related_user_id",
				Unique:  false,
				Columns: []*schema.Column{NotificationsColumns[8]},
			},
			{
				Name:    "notification_related_conversation_id",
				Unique:  false,
				Columns: []*schema.Column{NotificationsColumns[9]},
			},
		},
	}
	// SessionsColumns holds the columns for the "sessions" table.
	SessionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "token", Type: field.TypeString, Unique: true},
		{Name: "ip", Type: field.TypeString},
		{Name: "user_agent", Type: field.TypeString},
		{Name: "user_sessions", Type: field.TypeString},
	}
	// SessionsTable holds the schema information for the "sessions" table.
	SessionsTable = &schema.Table{
		Name:       "sessions",
		Columns:    SessionsColumns,
		PrimaryKey: []*schema.Column{SessionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "sessions_users_sessions",
				Columns:    []*schema.Column{SessionsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "name", Type: field.TypeString, Size: 60},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString, Nullable: true},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "bio", Type: field.TypeString, Nullable: true, Size: 255},
		{Name: "avater_url", Type: field.TypeString, Nullable: true},
		{Name: "cover_url", Type: field.TypeString, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "user_username",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[6]},
			},
			{
				Name:    "user_email",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[4]},
			},
			{
				Name:    "user_name",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[3]},
			},
			{
				Name:    "user_created_at",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[1]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		BlocksTable,
		CallsTable,
		ConversationsTable,
		ConversationParticipantsTable,
		FriendsTable,
		GuildsTable,
		InvitationsTable,
		MembersTable,
		MessagesTable,
		NotificationsTable,
		SessionsTable,
		UsersTable,
	}
)

func init() {
	BlocksTable.ForeignKeys[0].RefTable = UsersTable
	BlocksTable.ForeignKeys[1].RefTable = UsersTable
	CallsTable.ForeignKeys[0].RefTable = UsersTable
	CallsTable.ForeignKeys[1].RefTable = UsersTable
	ConversationParticipantsTable.ForeignKeys[0].RefTable = ConversationsTable
	ConversationParticipantsTable.ForeignKeys[1].RefTable = ConversationsTable
	ConversationParticipantsTable.ForeignKeys[2].RefTable = UsersTable
	FriendsTable.ForeignKeys[0].RefTable = UsersTable
	FriendsTable.ForeignKeys[1].RefTable = UsersTable
	GuildsTable.ForeignKeys[0].RefTable = UsersTable
	InvitationsTable.ForeignKeys[0].RefTable = GuildsTable
	InvitationsTable.ForeignKeys[1].RefTable = UsersTable
	MembersTable.ForeignKeys[0].RefTable = GuildsTable
	MembersTable.ForeignKeys[1].RefTable = UsersTable
	MessagesTable.ForeignKeys[0].RefTable = ConversationsTable
	MessagesTable.ForeignKeys[1].RefTable = ConversationsTable
	MessagesTable.ForeignKeys[2].RefTable = UsersTable
	MessagesTable.ForeignKeys[3].RefTable = CallsTable
	NotificationsTable.ForeignKeys[0].RefTable = UsersTable
	NotificationsTable.ForeignKeys[1].RefTable = UsersTable
	NotificationsTable.ForeignKeys[2].RefTable = ConversationsTable
	SessionsTable.ForeignKeys[0].RefTable = UsersTable
}
