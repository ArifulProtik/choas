// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kakashi/chaos/internal/ent/call"
	"kakashi/chaos/internal/ent/predicate"
	"kakashi/chaos/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CallUpdate is the builder for updating Call entities.
type CallUpdate struct {
	config
	hooks    []Hook
	mutation *CallMutation
}

// Where appends a list predicates to the CallUpdate builder.
func (cu *CallUpdate) Where(ps ...predicate.Call) *CallUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetCreatedAt sets the "created_at" field.
func (cu *CallUpdate) SetCreatedAt(t time.Time) *CallUpdate {
	cu.mutation.SetCreatedAt(t)
	return cu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cu *CallUpdate) SetNillableCreatedAt(t *time.Time) *CallUpdate {
	if t != nil {
		cu.SetCreatedAt(*t)
	}
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CallUpdate) SetUpdatedAt(t time.Time) *CallUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetCallerID sets the "caller_id" field.
func (cu *CallUpdate) SetCallerID(s string) *CallUpdate {
	cu.mutation.SetCallerID(s)
	return cu
}

// SetNillableCallerID sets the "caller_id" field if the given value is not nil.
func (cu *CallUpdate) SetNillableCallerID(s *string) *CallUpdate {
	if s != nil {
		cu.SetCallerID(*s)
	}
	return cu
}

// SetCalleeID sets the "callee_id" field.
func (cu *CallUpdate) SetCalleeID(s string) *CallUpdate {
	cu.mutation.SetCalleeID(s)
	return cu
}

// SetNillableCalleeID sets the "callee_id" field if the given value is not nil.
func (cu *CallUpdate) SetNillableCalleeID(s *string) *CallUpdate {
	if s != nil {
		cu.SetCalleeID(*s)
	}
	return cu
}

// SetCallType sets the "call_type" field.
func (cu *CallUpdate) SetCallType(ct call.CallType) *CallUpdate {
	cu.mutation.SetCallType(ct)
	return cu
}

// SetNillableCallType sets the "call_type" field if the given value is not nil.
func (cu *CallUpdate) SetNillableCallType(ct *call.CallType) *CallUpdate {
	if ct != nil {
		cu.SetCallType(*ct)
	}
	return cu
}

// SetStatus sets the "status" field.
func (cu *CallUpdate) SetStatus(c call.Status) *CallUpdate {
	cu.mutation.SetStatus(c)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *CallUpdate) SetNillableStatus(c *call.Status) *CallUpdate {
	if c != nil {
		cu.SetStatus(*c)
	}
	return cu
}

// SetStartedAt sets the "started_at" field.
func (cu *CallUpdate) SetStartedAt(t time.Time) *CallUpdate {
	cu.mutation.SetStartedAt(t)
	return cu
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (cu *CallUpdate) SetNillableStartedAt(t *time.Time) *CallUpdate {
	if t != nil {
		cu.SetStartedAt(*t)
	}
	return cu
}

// ClearStartedAt clears the value of the "started_at" field.
func (cu *CallUpdate) ClearStartedAt() *CallUpdate {
	cu.mutation.ClearStartedAt()
	return cu
}

// SetAnsweredAt sets the "answered_at" field.
func (cu *CallUpdate) SetAnsweredAt(t time.Time) *CallUpdate {
	cu.mutation.SetAnsweredAt(t)
	return cu
}

// SetNillableAnsweredAt sets the "answered_at" field if the given value is not nil.
func (cu *CallUpdate) SetNillableAnsweredAt(t *time.Time) *CallUpdate {
	if t != nil {
		cu.SetAnsweredAt(*t)
	}
	return cu
}

// ClearAnsweredAt clears the value of the "answered_at" field.
func (cu *CallUpdate) ClearAnsweredAt() *CallUpdate {
	cu.mutation.ClearAnsweredAt()
	return cu
}

// SetEndedAt sets the "ended_at" field.
func (cu *CallUpdate) SetEndedAt(t time.Time) *CallUpdate {
	cu.mutation.SetEndedAt(t)
	return cu
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (cu *CallUpdate) SetNillableEndedAt(t *time.Time) *CallUpdate {
	if t != nil {
		cu.SetEndedAt(*t)
	}
	return cu
}

// ClearEndedAt clears the value of the "ended_at" field.
func (cu *CallUpdate) ClearEndedAt() *CallUpdate {
	cu.mutation.ClearEndedAt()
	return cu
}

// SetDuration sets the "duration" field.
func (cu *CallUpdate) SetDuration(i int) *CallUpdate {
	cu.mutation.ResetDuration()
	cu.mutation.SetDuration(i)
	return cu
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (cu *CallUpdate) SetNillableDuration(i *int) *CallUpdate {
	if i != nil {
		cu.SetDuration(*i)
	}
	return cu
}

// AddDuration adds i to the "duration" field.
func (cu *CallUpdate) AddDuration(i int) *CallUpdate {
	cu.mutation.AddDuration(i)
	return cu
}

// ClearDuration clears the value of the "duration" field.
func (cu *CallUpdate) ClearDuration() *CallUpdate {
	cu.mutation.ClearDuration()
	return cu
}

// SetCaller sets the "caller" edge to the User entity.
func (cu *CallUpdate) SetCaller(u *User) *CallUpdate {
	return cu.SetCallerID(u.ID)
}

// SetCallee sets the "callee" edge to the User entity.
func (cu *CallUpdate) SetCallee(u *User) *CallUpdate {
	return cu.SetCalleeID(u.ID)
}

// Mutation returns the CallMutation object of the builder.
func (cu *CallUpdate) Mutation() *CallMutation {
	return cu.mutation
}

// ClearCaller clears the "caller" edge to the User entity.
func (cu *CallUpdate) ClearCaller() *CallUpdate {
	cu.mutation.ClearCaller()
	return cu
}

// ClearCallee clears the "callee" edge to the User entity.
func (cu *CallUpdate) ClearCallee() *CallUpdate {
	cu.mutation.ClearCallee()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CallUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CallUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CallUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CallUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CallUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := call.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CallUpdate) check() error {
	if v, ok := cu.mutation.CallerID(); ok {
		if err := call.CallerIDValidator(v); err != nil {
			return &ValidationError{Name: "caller_id", err: fmt.Errorf(`ent: validator failed for field "Call.caller_id": %w`, err)}
		}
	}
	if v, ok := cu.mutation.CalleeID(); ok {
		if err := call.CalleeIDValidator(v); err != nil {
			return &ValidationError{Name: "callee_id", err: fmt.Errorf(`ent: validator failed for field "Call.callee_id": %w`, err)}
		}
	}
	if v, ok := cu.mutation.CallType(); ok {
		if err := call.CallTypeValidator(v); err != nil {
			return &ValidationError{Name: "call_type", err: fmt.Errorf(`ent: validator failed for field "Call.call_type": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Status(); ok {
		if err := call.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Call.status": %w`, err)}
		}
	}
	if cu.mutation.CallerCleared() && len(cu.mutation.CallerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Call.caller"`)
	}
	if cu.mutation.CalleeCleared() && len(cu.mutation.CalleeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Call.callee"`)
	}
	return nil
}

func (cu *CallUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(call.Table, call.Columns, sqlgraph.NewFieldSpec(call.FieldID, field.TypeString))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.CreatedAt(); ok {
		_spec.SetField(call.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(call.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.CallType(); ok {
		_spec.SetField(call.FieldCallType, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(call.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := cu.mutation.StartedAt(); ok {
		_spec.SetField(call.FieldStartedAt, field.TypeTime, value)
	}
	if cu.mutation.StartedAtCleared() {
		_spec.ClearField(call.FieldStartedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.AnsweredAt(); ok {
		_spec.SetField(call.FieldAnsweredAt, field.TypeTime, value)
	}
	if cu.mutation.AnsweredAtCleared() {
		_spec.ClearField(call.FieldAnsweredAt, field.TypeTime)
	}
	if value, ok := cu.mutation.EndedAt(); ok {
		_spec.SetField(call.FieldEndedAt, field.TypeTime, value)
	}
	if cu.mutation.EndedAtCleared() {
		_spec.ClearField(call.FieldEndedAt, field.TypeTime)
	}
	if value, ok := cu.mutation.Duration(); ok {
		_spec.SetField(call.FieldDuration, field.TypeInt, value)
	}
	if value, ok := cu.mutation.AddedDuration(); ok {
		_spec.AddField(call.FieldDuration, field.TypeInt, value)
	}
	if cu.mutation.DurationCleared() {
		_spec.ClearField(call.FieldDuration, field.TypeInt)
	}
	if cu.mutation.CallerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   call.CallerTable,
			Columns: []string{call.CallerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CallerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   call.CallerTable,
			Columns: []string{call.CallerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CalleeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   call.CalleeTable,
			Columns: []string{call.CalleeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CalleeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   call.CalleeTable,
			Columns: []string{call.CalleeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{call.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CallUpdateOne is the builder for updating a single Call entity.
type CallUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CallMutation
}

// SetCreatedAt sets the "created_at" field.
func (cuo *CallUpdateOne) SetCreatedAt(t time.Time) *CallUpdateOne {
	cuo.mutation.SetCreatedAt(t)
	return cuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cuo *CallUpdateOne) SetNillableCreatedAt(t *time.Time) *CallUpdateOne {
	if t != nil {
		cuo.SetCreatedAt(*t)
	}
	return cuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CallUpdateOne) SetUpdatedAt(t time.Time) *CallUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetCallerID sets the "caller_id" field.
func (cuo *CallUpdateOne) SetCallerID(s string) *CallUpdateOne {
	cuo.mutation.SetCallerID(s)
	return cuo
}

// SetNillableCallerID sets the "caller_id" field if the given value is not nil.
func (cuo *CallUpdateOne) SetNillableCallerID(s *string) *CallUpdateOne {
	if s != nil {
		cuo.SetCallerID(*s)
	}
	return cuo
}

// SetCalleeID sets the "callee_id" field.
func (cuo *CallUpdateOne) SetCalleeID(s string) *CallUpdateOne {
	cuo.mutation.SetCalleeID(s)
	return cuo
}

// SetNillableCalleeID sets the "callee_id" field if the given value is not nil.
func (cuo *CallUpdateOne) SetNillableCalleeID(s *string) *CallUpdateOne {
	if s != nil {
		cuo.SetCalleeID(*s)
	}
	return cuo
}

// SetCallType sets the "call_type" field.
func (cuo *CallUpdateOne) SetCallType(ct call.CallType) *CallUpdateOne {
	cuo.mutation.SetCallType(ct)
	return cuo
}

// SetNillableCallType sets the "call_type" field if the given value is not nil.
func (cuo *CallUpdateOne) SetNillableCallType(ct *call.CallType) *CallUpdateOne {
	if ct != nil {
		cuo.SetCallType(*ct)
	}
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *CallUpdateOne) SetStatus(c call.Status) *CallUpdateOne {
	cuo.mutation.SetStatus(c)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *CallUpdateOne) SetNillableStatus(c *call.Status) *CallUpdateOne {
	if c != nil {
		cuo.SetStatus(*c)
	}
	return cuo
}

// SetStartedAt sets the "started_at" field.
func (cuo *CallUpdateOne) SetStartedAt(t time.Time) *CallUpdateOne {
	cuo.mutation.SetStartedAt(t)
	return cuo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (cuo *CallUpdateOne) SetNillableStartedAt(t *time.Time) *CallUpdateOne {
	if t != nil {
		cuo.SetStartedAt(*t)
	}
	return cuo
}

// ClearStartedAt clears the value of the "started_at" field.
func (cuo *CallUpdateOne) ClearStartedAt() *CallUpdateOne {
	cuo.mutation.ClearStartedAt()
	return cuo
}

// SetAnsweredAt sets the "answered_at" field.
func (cuo *CallUpdateOne) SetAnsweredAt(t time.Time) *CallUpdateOne {
	cuo.mutation.SetAnsweredAt(t)
	return cuo
}

// SetNillableAnsweredAt sets the "answered_at" field if the given value is not nil.
func (cuo *CallUpdateOne) SetNillableAnsweredAt(t *time.Time) *CallUpdateOne {
	if t != nil {
		cuo.SetAnsweredAt(*t)
	}
	return cuo
}

// ClearAnsweredAt clears the value of the "answered_at" field.
func (cuo *CallUpdateOne) ClearAnsweredAt() *CallUpdateOne {
	cuo.mutation.ClearAnsweredAt()
	return cuo
}

// SetEndedAt sets the "ended_at" field.
func (cuo *CallUpdateOne) SetEndedAt(t time.Time) *CallUpdateOne {
	cuo.mutation.SetEndedAt(t)
	return cuo
}

// SetNillableEndedAt sets the "ended_at" field if the given value is not nil.
func (cuo *CallUpdateOne) SetNillableEndedAt(t *time.Time) *CallUpdateOne {
	if t != nil {
		cuo.SetEndedAt(*t)
	}
	return cuo
}

// ClearEndedAt clears the value of the "ended_at" field.
func (cuo *CallUpdateOne) ClearEndedAt() *CallUpdateOne {
	cuo.mutation.ClearEndedAt()
	return cuo
}

// SetDuration sets the "duration" field.
func (cuo *CallUpdateOne) SetDuration(i int) *CallUpdateOne {
	cuo.mutation.ResetDuration()
	cuo.mutation.SetDuration(i)
	return cuo
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (cuo *CallUpdateOne) SetNillableDuration(i *int) *CallUpdateOne {
	if i != nil {
		cuo.SetDuration(*i)
	}
	return cuo
}

// AddDuration adds i to the "duration" field.
func (cuo *CallUpdateOne) AddDuration(i int) *CallUpdateOne {
	cuo.mutation.AddDuration(i)
	return cuo
}

// ClearDuration clears the value of the "duration" field.
func (cuo *CallUpdateOne) ClearDuration() *CallUpdateOne {
	cuo.mutation.ClearDuration()
	return cuo
}

// SetCaller sets the "caller" edge to the User entity.
func (cuo *CallUpdateOne) SetCaller(u *User) *CallUpdateOne {
	return cuo.SetCallerID(u.ID)
}

// SetCallee sets the "callee" edge to the User entity.
func (cuo *CallUpdateOne) SetCallee(u *User) *CallUpdateOne {
	return cuo.SetCalleeID(u.ID)
}

// Mutation returns the CallMutation object of the builder.
func (cuo *CallUpdateOne) Mutation() *CallMutation {
	return cuo.mutation
}

// ClearCaller clears the "caller" edge to the User entity.
func (cuo *CallUpdateOne) ClearCaller() *CallUpdateOne {
	cuo.mutation.ClearCaller()
	return cuo
}

// ClearCallee clears the "callee" edge to the User entity.
func (cuo *CallUpdateOne) ClearCallee() *CallUpdateOne {
	cuo.mutation.ClearCallee()
	return cuo
}

// Where appends a list predicates to the CallUpdate builder.
func (cuo *CallUpdateOne) Where(ps ...predicate.Call) *CallUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CallUpdateOne) Select(field string, fields ...string) *CallUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Call entity.
func (cuo *CallUpdateOne) Save(ctx context.Context) (*Call, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CallUpdateOne) SaveX(ctx context.Context) *Call {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CallUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CallUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CallUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := call.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CallUpdateOne) check() error {
	if v, ok := cuo.mutation.CallerID(); ok {
		if err := call.CallerIDValidator(v); err != nil {
			return &ValidationError{Name: "caller_id", err: fmt.Errorf(`ent: validator failed for field "Call.caller_id": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.CalleeID(); ok {
		if err := call.CalleeIDValidator(v); err != nil {
			return &ValidationError{Name: "callee_id", err: fmt.Errorf(`ent: validator failed for field "Call.callee_id": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.CallType(); ok {
		if err := call.CallTypeValidator(v); err != nil {
			return &ValidationError{Name: "call_type", err: fmt.Errorf(`ent: validator failed for field "Call.call_type": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Status(); ok {
		if err := call.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Call.status": %w`, err)}
		}
	}
	if cuo.mutation.CallerCleared() && len(cuo.mutation.CallerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Call.caller"`)
	}
	if cuo.mutation.CalleeCleared() && len(cuo.mutation.CalleeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Call.callee"`)
	}
	return nil
}

func (cuo *CallUpdateOne) sqlSave(ctx context.Context) (_node *Call, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(call.Table, call.Columns, sqlgraph.NewFieldSpec(call.FieldID, field.TypeString))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Call.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, call.FieldID)
		for _, f := range fields {
			if !call.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != call.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.CreatedAt(); ok {
		_spec.SetField(call.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(call.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.CallType(); ok {
		_spec.SetField(call.FieldCallType, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(call.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := cuo.mutation.StartedAt(); ok {
		_spec.SetField(call.FieldStartedAt, field.TypeTime, value)
	}
	if cuo.mutation.StartedAtCleared() {
		_spec.ClearField(call.FieldStartedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.AnsweredAt(); ok {
		_spec.SetField(call.FieldAnsweredAt, field.TypeTime, value)
	}
	if cuo.mutation.AnsweredAtCleared() {
		_spec.ClearField(call.FieldAnsweredAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.EndedAt(); ok {
		_spec.SetField(call.FieldEndedAt, field.TypeTime, value)
	}
	if cuo.mutation.EndedAtCleared() {
		_spec.ClearField(call.FieldEndedAt, field.TypeTime)
	}
	if value, ok := cuo.mutation.Duration(); ok {
		_spec.SetField(call.FieldDuration, field.TypeInt, value)
	}
	if value, ok := cuo.mutation.AddedDuration(); ok {
		_spec.AddField(call.FieldDuration, field.TypeInt, value)
	}
	if cuo.mutation.DurationCleared() {
		_spec.ClearField(call.FieldDuration, field.TypeInt)
	}
	if cuo.mutation.CallerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   call.CallerTable,
			Columns: []string{call.CallerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CallerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   call.CallerTable,
			Columns: []string{call.CallerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CalleeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   call.CalleeTable,
			Columns: []string{call.CalleeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CalleeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   call.CalleeTable,
			Columns: []string{call.CalleeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Call{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{call.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
