// Code generated by ent, DO NOT EDIT.

package call

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the call type in the database.
	Label = "call"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCallerID holds the string denoting the caller_id field in the database.
	FieldCallerID = "caller_id"
	// FieldCalleeID holds the string denoting the callee_id field in the database.
	FieldCalleeID = "callee_id"
	// FieldCallType holds the string denoting the call_type field in the database.
	FieldCallType = "call_type"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// FieldAnsweredAt holds the string denoting the answered_at field in the database.
	FieldAnsweredAt = "answered_at"
	// FieldEndedAt holds the string denoting the ended_at field in the database.
	FieldEndedAt = "ended_at"
	// FieldDuration holds the string denoting the duration field in the database.
	FieldDuration = "duration"
	// EdgeCaller holds the string denoting the caller edge name in mutations.
	EdgeCaller = "caller"
	// EdgeCallee holds the string denoting the callee edge name in mutations.
	EdgeCallee = "callee"
	// Table holds the table name of the call in the database.
	Table = "calls"
	// CallerTable is the table that holds the caller relation/edge.
	CallerTable = "calls"
	// CallerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CallerInverseTable = "users"
	// CallerColumn is the table column denoting the caller relation/edge.
	CallerColumn = "caller_id"
	// CalleeTable is the table that holds the callee relation/edge.
	CalleeTable = "calls"
	// CalleeInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	CalleeInverseTable = "users"
	// CalleeColumn is the table column denoting the callee relation/edge.
	CalleeColumn = "callee_id"
)

// Columns holds all SQL columns for call fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCallerID,
	FieldCalleeID,
	FieldCallType,
	FieldStatus,
	FieldStartedAt,
	FieldAnsweredAt,
	FieldEndedAt,
	FieldDuration,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// CallerIDValidator is a validator for the "caller_id" field. It is called by the builders before save.
	CallerIDValidator func(string) error
	// CalleeIDValidator is a validator for the "callee_id" field. It is called by the builders before save.
	CalleeIDValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// CallType defines the type for the "call_type" enum field.
type CallType string

// CallTypeVoice is the default value of the CallType enum.
const DefaultCallType = CallTypeVoice

// CallType values.
const (
	CallTypeVoice CallType = "voice"
	CallTypeVideo CallType = "video"
)

func (ct CallType) String() string {
	return string(ct)
}

// CallTypeValidator is a validator for the "call_type" field enum values. It is called by the builders before save.
func CallTypeValidator(ct CallType) error {
	switch ct {
	case CallTypeVoice, CallTypeVideo:
		return nil
	default:
		return fmt.Errorf("call: invalid enum value for call_type field: %q", ct)
	}
}

// Status defines the type for the "status" enum field.
type Status string

// StatusPending is the default value of the Status enum.
const DefaultStatus = StatusPending

// Status values.
const (
	StatusPending  Status = "pending"
	StatusRinging  Status = "ringing"
	StatusAccepted Status = "accepted"
	StatusDeclined Status = "declined"
	StatusEnded    Status = "ended"
	StatusMissed   Status = "missed"
	StatusFailed   Status = "failed"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusRinging, StatusAccepted, StatusDeclined, StatusEnded, StatusMissed, StatusFailed:
		return nil
	default:
		return fmt.Errorf("call: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Call queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCallerID orders the results by the caller_id field.
func ByCallerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCallerID, opts...).ToFunc()
}

// ByCalleeID orders the results by the callee_id field.
func ByCalleeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCalleeID, opts...).ToFunc()
}

// ByCallType orders the results by the call_type field.
func ByCallType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCallType, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByStartedAt orders the results by the started_at field.
func ByStartedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedAt, opts...).ToFunc()
}

// ByAnsweredAt orders the results by the answered_at field.
func ByAnsweredAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAnsweredAt, opts...).ToFunc()
}

// ByEndedAt orders the results by the ended_at field.
func ByEndedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndedAt, opts...).ToFunc()
}

// ByDuration orders the results by the duration field.
func ByDuration(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDuration, opts...).ToFunc()
}

// ByCallerField orders the results by caller field.
func ByCallerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCallerStep(), sql.OrderByField(field, opts...))
	}
}

// ByCalleeField orders the results by callee field.
func ByCalleeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCalleeStep(), sql.OrderByField(field, opts...))
	}
}
func newCallerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CallerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CallerTable, CallerColumn),
	)
}
func newCalleeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CalleeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, CalleeTable, CalleeColumn),
	)
}
