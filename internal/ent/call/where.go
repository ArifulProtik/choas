// Code generated by ent, DO NOT EDIT.

package call

import (
	"kakashi/chaos/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Call {
	return predicate.Call(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Call {
	return predicate.Call(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Call {
	return predicate.Call(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Call {
	return predicate.Call(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Call {
	return predicate.Call(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Call {
	return predicate.Call(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Call {
	return predicate.Call(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Call {
	return predicate.Call(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Call {
	return predicate.Call(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Call {
	return predicate.Call(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Call {
	return predicate.Call(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Call {
	return predicate.Call(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Call {
	return predicate.Call(sql.FieldEQ(FieldUpdatedAt, v))
}

// CallerID applies equality check predicate on the "caller_id" field. It's identical to CallerIDEQ.
func CallerID(v string) predicate.Call {
	return predicate.Call(sql.FieldEQ(FieldCallerID, v))
}

// CalleeID applies equality check predicate on the "callee_id" field. It's identical to CalleeIDEQ.
func CalleeID(v string) predicate.Call {
	return predicate.Call(sql.FieldEQ(FieldCalleeID, v))
}

// StartedAt applies equality check predicate on the "started_at" field. It's identical to StartedAtEQ.
func StartedAt(v time.Time) predicate.Call {
	return predicate.Call(sql.FieldEQ(FieldStartedAt, v))
}

// AnsweredAt applies equality check predicate on the "answered_at" field. It's identical to AnsweredAtEQ.
func AnsweredAt(v time.Time) predicate.Call {
	return predicate.Call(sql.FieldEQ(FieldAnsweredAt, v))
}

// EndedAt applies equality check predicate on the "ended_at" field. It's identical to EndedAtEQ.
func EndedAt(v time.Time) predicate.Call {
	return predicate.Call(sql.FieldEQ(FieldEndedAt, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v int) predicate.Call {
	return predicate.Call(sql.FieldEQ(FieldDuration, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Call {
	return predicate.Call(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Call {
	return predicate.Call(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Call {
	return predicate.Call(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Call {
	return predicate.Call(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Call {
	return predicate.Call(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Call {
	return predicate.Call(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Call {
	return predicate.Call(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Call {
	return predicate.Call(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Call {
	return predicate.Call(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Call {
	return predicate.Call(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Call {
	return predicate.Call(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Call {
	return predicate.Call(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Call {
	return predicate.Call(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Call {
	return predicate.Call(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Call {
	return predicate.Call(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Call {
	return predicate.Call(sql.FieldLTE(FieldUpdatedAt, v))
}

// CallerIDEQ applies the EQ predicate on the "caller_id" field.
func CallerIDEQ(v string) predicate.Call {
	return predicate.Call(sql.FieldEQ(FieldCallerID, v))
}

// CallerIDNEQ applies the NEQ predicate on the "caller_id" field.
func CallerIDNEQ(v string) predicate.Call {
	return predicate.Call(sql.FieldNEQ(FieldCallerID, v))
}

// CallerIDIn applies the In predicate on the "caller_id" field.
func CallerIDIn(vs ...string) predicate.Call {
	return predicate.Call(sql.FieldIn(FieldCallerID, vs...))
}

// CallerIDNotIn applies the NotIn predicate on the "caller_id" field.
func CallerIDNotIn(vs ...string) predicate.Call {
	return predicate.Call(sql.FieldNotIn(FieldCallerID, vs...))
}

// CallerIDGT applies the GT predicate on the "caller_id" field.
func CallerIDGT(v string) predicate.Call {
	return predicate.Call(sql.FieldGT(FieldCallerID, v))
}

// CallerIDGTE applies the GTE predicate on the "caller_id" field.
func CallerIDGTE(v string) predicate.Call {
	return predicate.Call(sql.FieldGTE(FieldCallerID, v))
}

// CallerIDLT applies the LT predicate on the "caller_id" field.
func CallerIDLT(v string) predicate.Call {
	return predicate.Call(sql.FieldLT(FieldCallerID, v))
}

// CallerIDLTE applies the LTE predicate on the "caller_id" field.
func CallerIDLTE(v string) predicate.Call {
	return predicate.Call(sql.FieldLTE(FieldCallerID, v))
}

// CallerIDContains applies the Contains predicate on the "caller_id" field.
func CallerIDContains(v string) predicate.Call {
	return predicate.Call(sql.FieldContains(FieldCallerID, v))
}

// CallerIDHasPrefix applies the HasPrefix predicate on the "caller_id" field.
func CallerIDHasPrefix(v string) predicate.Call {
	return predicate.Call(sql.FieldHasPrefix(FieldCallerID, v))
}

// CallerIDHasSuffix applies the HasSuffix predicate on the "caller_id" field.
func CallerIDHasSuffix(v string) predicate.Call {
	return predicate.Call(sql.FieldHasSuffix(FieldCallerID, v))
}

// CallerIDEqualFold applies the EqualFold predicate on the "caller_id" field.
func CallerIDEqualFold(v string) predicate.Call {
	return predicate.Call(sql.FieldEqualFold(FieldCallerID, v))
}

// CallerIDContainsFold applies the ContainsFold predicate on the "caller_id" field.
func CallerIDContainsFold(v string) predicate.Call {
	return predicate.Call(sql.FieldContainsFold(FieldCallerID, v))
}

// CalleeIDEQ applies the EQ predicate on the "callee_id" field.
func CalleeIDEQ(v string) predicate.Call {
	return predicate.Call(sql.FieldEQ(FieldCalleeID, v))
}

// CalleeIDNEQ applies the NEQ predicate on the "callee_id" field.
func CalleeIDNEQ(v string) predicate.Call {
	return predicate.Call(sql.FieldNEQ(FieldCalleeID, v))
}

// CalleeIDIn applies the In predicate on the "callee_id" field.
func CalleeIDIn(vs ...string) predicate.Call {
	return predicate.Call(sql.FieldIn(FieldCalleeID, vs...))
}

// CalleeIDNotIn applies the NotIn predicate on the "callee_id" field.
func CalleeIDNotIn(vs ...string) predicate.Call {
	return predicate.Call(sql.FieldNotIn(FieldCalleeID, vs...))
}

// CalleeIDGT applies the GT predicate on the "callee_id" field.
func CalleeIDGT(v string) predicate.Call {
	return predicate.Call(sql.FieldGT(FieldCalleeID, v))
}

// CalleeIDGTE applies the GTE predicate on the "callee_id" field.
func CalleeIDGTE(v string) predicate.Call {
	return predicate.Call(sql.FieldGTE(FieldCalleeID, v))
}

// CalleeIDLT applies the LT predicate on the "callee_id" field.
func CalleeIDLT(v string) predicate.Call {
	return predicate.Call(sql.FieldLT(FieldCalleeID, v))
}

// CalleeIDLTE applies the LTE predicate on the "callee_id" field.
func CalleeIDLTE(v string) predicate.Call {
	return predicate.Call(sql.FieldLTE(FieldCalleeID, v))
}

// CalleeIDContains applies the Contains predicate on the "callee_id" field.
func CalleeIDContains(v string) predicate.Call {
	return predicate.Call(sql.FieldContains(FieldCalleeID, v))
}

// CalleeIDHasPrefix applies the HasPrefix predicate on the "callee_id" field.
func CalleeIDHasPrefix(v string) predicate.Call {
	return predicate.Call(sql.FieldHasPrefix(FieldCalleeID, v))
}

// CalleeIDHasSuffix applies the HasSuffix predicate on the "callee_id" field.
func CalleeIDHasSuffix(v string) predicate.Call {
	return predicate.Call(sql.FieldHasSuffix(FieldCalleeID, v))
}

// CalleeIDEqualFold applies the EqualFold predicate on the "callee_id" field.
func CalleeIDEqualFold(v string) predicate.Call {
	return predicate.Call(sql.FieldEqualFold(FieldCalleeID, v))
}

// CalleeIDContainsFold applies the ContainsFold predicate on the "callee_id" field.
func CalleeIDContainsFold(v string) predicate.Call {
	return predicate.Call(sql.FieldContainsFold(FieldCalleeID, v))
}

// CallTypeEQ applies the EQ predicate on the "call_type" field.
func CallTypeEQ(v CallType) predicate.Call {
	return predicate.Call(sql.FieldEQ(FieldCallType, v))
}

// CallTypeNEQ applies the NEQ predicate on the "call_type" field.
func CallTypeNEQ(v CallType) predicate.Call {
	return predicate.Call(sql.FieldNEQ(FieldCallType, v))
}

// CallTypeIn applies the In predicate on the "call_type" field.
func CallTypeIn(vs ...CallType) predicate.Call {
	return predicate.Call(sql.FieldIn(FieldCallType, vs...))
}

// CallTypeNotIn applies the NotIn predicate on the "call_type" field.
func CallTypeNotIn(vs ...CallType) predicate.Call {
	return predicate.Call(sql.FieldNotIn(FieldCallType, vs...))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Call {
	return predicate.Call(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Call {
	return predicate.Call(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Call {
	return predicate.Call(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Call {
	return predicate.Call(sql.FieldNotIn(FieldStatus, vs...))
}

// StartedAtEQ applies the EQ predicate on the "started_at" field.
func StartedAtEQ(v time.Time) predicate.Call {
	return predicate.Call(sql.FieldEQ(FieldStartedAt, v))
}

// StartedAtNEQ applies the NEQ predicate on the "started_at" field.
func StartedAtNEQ(v time.Time) predicate.Call {
	return predicate.Call(sql.FieldNEQ(FieldStartedAt, v))
}

// StartedAtIn applies the In predicate on the "started_at" field.
func StartedAtIn(vs ...time.Time) predicate.Call {
	return predicate.Call(sql.FieldIn(FieldStartedAt, vs...))
}

// StartedAtNotIn applies the NotIn predicate on the "started_at" field.
func StartedAtNotIn(vs ...time.Time) predicate.Call {
	return predicate.Call(sql.FieldNotIn(FieldStartedAt, vs...))
}

// StartedAtGT applies the GT predicate on the "started_at" field.
func StartedAtGT(v time.Time) predicate.Call {
	return predicate.Call(sql.FieldGT(FieldStartedAt, v))
}

// StartedAtGTE applies the GTE predicate on the "started_at" field.
func StartedAtGTE(v time.Time) predicate.Call {
	return predicate.Call(sql.FieldGTE(FieldStartedAt, v))
}

// StartedAtLT applies the LT predicate on the "started_at" field.
func StartedAtLT(v time.Time) predicate.Call {
	return predicate.Call(sql.FieldLT(FieldStartedAt, v))
}

// StartedAtLTE applies the LTE predicate on the "started_at" field.
func StartedAtLTE(v time.Time) predicate.Call {
	return predicate.Call(sql.FieldLTE(FieldStartedAt, v))
}

// StartedAtIsNil applies the IsNil predicate on the "started_at" field.
func StartedAtIsNil() predicate.Call {
	return predicate.Call(sql.FieldIsNull(FieldStartedAt))
}

// StartedAtNotNil applies the NotNil predicate on the "started_at" field.
func StartedAtNotNil() predicate.Call {
	return predicate.Call(sql.FieldNotNull(FieldStartedAt))
}

// AnsweredAtEQ applies the EQ predicate on the "answered_at" field.
func AnsweredAtEQ(v time.Time) predicate.Call {
	return predicate.Call(sql.FieldEQ(FieldAnsweredAt, v))
}

// AnsweredAtNEQ applies the NEQ predicate on the "answered_at" field.
func AnsweredAtNEQ(v time.Time) predicate.Call {
	return predicate.Call(sql.FieldNEQ(FieldAnsweredAt, v))
}

// AnsweredAtIn applies the In predicate on the "answered_at" field.
func AnsweredAtIn(vs ...time.Time) predicate.Call {
	return predicate.Call(sql.FieldIn(FieldAnsweredAt, vs...))
}

// AnsweredAtNotIn applies the NotIn predicate on the "answered_at" field.
func AnsweredAtNotIn(vs ...time.Time) predicate.Call {
	return predicate.Call(sql.FieldNotIn(FieldAnsweredAt, vs...))
}

// AnsweredAtGT applies the GT predicate on the "answered_at" field.
func AnsweredAtGT(v time.Time) predicate.Call {
	return predicate.Call(sql.FieldGT(FieldAnsweredAt, v))
}

// AnsweredAtGTE applies the GTE predicate on the "answered_at" field.
func AnsweredAtGTE(v time.Time) predicate.Call {
	return predicate.Call(sql.FieldGTE(FieldAnsweredAt, v))
}

// AnsweredAtLT applies the LT predicate on the "answered_at" field.
func AnsweredAtLT(v time.Time) predicate.Call {
	return predicate.Call(sql.FieldLT(FieldAnsweredAt, v))
}

// AnsweredAtLTE applies the LTE predicate on the "answered_at" field.
func AnsweredAtLTE(v time.Time) predicate.Call {
	return predicate.Call(sql.FieldLTE(FieldAnsweredAt, v))
}

// AnsweredAtIsNil applies the IsNil predicate on the "answered_at" field.
func AnsweredAtIsNil() predicate.Call {
	return predicate.Call(sql.FieldIsNull(FieldAnsweredAt))
}

// AnsweredAtNotNil applies the NotNil predicate on the "answered_at" field.
func AnsweredAtNotNil() predicate.Call {
	return predicate.Call(sql.FieldNotNull(FieldAnsweredAt))
}

// EndedAtEQ applies the EQ predicate on the "ended_at" field.
func EndedAtEQ(v time.Time) predicate.Call {
	return predicate.Call(sql.FieldEQ(FieldEndedAt, v))
}

// EndedAtNEQ applies the NEQ predicate on the "ended_at" field.
func EndedAtNEQ(v time.Time) predicate.Call {
	return predicate.Call(sql.FieldNEQ(FieldEndedAt, v))
}

// EndedAtIn applies the In predicate on the "ended_at" field.
func EndedAtIn(vs ...time.Time) predicate.Call {
	return predicate.Call(sql.FieldIn(FieldEndedAt, vs...))
}

// EndedAtNotIn applies the NotIn predicate on the "ended_at" field.
func EndedAtNotIn(vs ...time.Time) predicate.Call {
	return predicate.Call(sql.FieldNotIn(FieldEndedAt, vs...))
}

// EndedAtGT applies the GT predicate on the "ended_at" field.
func EndedAtGT(v time.Time) predicate.Call {
	return predicate.Call(sql.FieldGT(FieldEndedAt, v))
}

// EndedAtGTE applies the GTE predicate on the "ended_at" field.
func EndedAtGTE(v time.Time) predicate.Call {
	return predicate.Call(sql.FieldGTE(FieldEndedAt, v))
}

// EndedAtLT applies the LT predicate on the "ended_at" field.
func EndedAtLT(v time.Time) predicate.Call {
	return predicate.Call(sql.FieldLT(FieldEndedAt, v))
}

// EndedAtLTE applies the LTE predicate on the "ended_at" field.
func EndedAtLTE(v time.Time) predicate.Call {
	return predicate.Call(sql.FieldLTE(FieldEndedAt, v))
}

// EndedAtIsNil applies the IsNil predicate on the "ended_at" field.
func EndedAtIsNil() predicate.Call {
	return predicate.Call(sql.FieldIsNull(FieldEndedAt))
}

// EndedAtNotNil applies the NotNil predicate on the "ended_at" field.
func EndedAtNotNil() predicate.Call {
	return predicate.Call(sql.FieldNotNull(FieldEndedAt))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v int) predicate.Call {
	return predicate.Call(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v int) predicate.Call {
	return predicate.Call(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...int) predicate.Call {
	return predicate.Call(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...int) predicate.Call {
	return predicate.Call(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v int) predicate.Call {
	return predicate.Call(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v int) predicate.Call {
	return predicate.Call(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v int) predicate.Call {
	return predicate.Call(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v int) predicate.Call {
	return predicate.Call(sql.FieldLTE(FieldDuration, v))
}

// DurationIsNil applies the IsNil predicate on the "duration" field.
func DurationIsNil() predicate.Call {
	return predicate.Call(sql.FieldIsNull(FieldDuration))
}

// DurationNotNil applies the NotNil predicate on the "duration" field.
func DurationNotNil() predicate.Call {
	return predicate.Call(sql.FieldNotNull(FieldDuration))
}

// HasCaller applies the HasEdge predicate on the "caller" edge.
func HasCaller() predicate.Call {
	return predicate.Call(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CallerTable, CallerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCallerWith applies the HasEdge predicate on the "caller" edge with a given conditions (other predicates).
func HasCallerWith(preds ...predicate.User) predicate.Call {
	return predicate.Call(func(s *sql.Selector) {
		step := newCallerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCallee applies the HasEdge predicate on the "callee" edge.
func HasCallee() predicate.Call {
	return predicate.Call(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CalleeTable, CalleeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCalleeWith applies the HasEdge predicate on the "callee" edge with a given conditions (other predicates).
func HasCalleeWith(preds ...predicate.User) predicate.Call {
	return predicate.Call(func(s *sql.Selector) {
		step := newCalleeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Call) predicate.Call {
	return predicate.Call(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Call) predicate.Call {
	return predicate.Call(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Call) predicate.Call {
	return predicate.Call(sql.NotPredicates(p))
}
