// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kakashi/chaos/internal/ent/guild"
	"kakashi/chaos/internal/ent/invitation"
	"kakashi/chaos/internal/ent/member"
	"kakashi/chaos/internal/ent/predicate"
	"kakashi/chaos/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GuildUpdate is the builder for updating Guild entities.
type GuildUpdate struct {
	config
	hooks    []Hook
	mutation *GuildMutation
}

// Where appends a list predicates to the GuildUpdate builder.
func (gu *GuildUpdate) Where(ps ...predicate.Guild) *GuildUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetCreatedAt sets the "created_at" field.
func (gu *GuildUpdate) SetCreatedAt(t time.Time) *GuildUpdate {
	gu.mutation.SetCreatedAt(t)
	return gu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gu *GuildUpdate) SetNillableCreatedAt(t *time.Time) *GuildUpdate {
	if t != nil {
		gu.SetCreatedAt(*t)
	}
	return gu
}

// SetUpdatedAt sets the "updated_at" field.
func (gu *GuildUpdate) SetUpdatedAt(t time.Time) *GuildUpdate {
	gu.mutation.SetUpdatedAt(t)
	return gu
}

// SetName sets the "name" field.
func (gu *GuildUpdate) SetName(s string) *GuildUpdate {
	gu.mutation.SetName(s)
	return gu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (gu *GuildUpdate) SetNillableName(s *string) *GuildUpdate {
	if s != nil {
		gu.SetName(*s)
	}
	return gu
}

// SetGuildIcon sets the "guild_icon" field.
func (gu *GuildUpdate) SetGuildIcon(s string) *GuildUpdate {
	gu.mutation.SetGuildIcon(s)
	return gu
}

// SetNillableGuildIcon sets the "guild_icon" field if the given value is not nil.
func (gu *GuildUpdate) SetNillableGuildIcon(s *string) *GuildUpdate {
	if s != nil {
		gu.SetGuildIcon(*s)
	}
	return gu
}

// ClearGuildIcon clears the value of the "guild_icon" field.
func (gu *GuildUpdate) ClearGuildIcon() *GuildUpdate {
	gu.mutation.ClearGuildIcon()
	return gu
}

// SetDescription sets the "description" field.
func (gu *GuildUpdate) SetDescription(s string) *GuildUpdate {
	gu.mutation.SetDescription(s)
	return gu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (gu *GuildUpdate) SetNillableDescription(s *string) *GuildUpdate {
	if s != nil {
		gu.SetDescription(*s)
	}
	return gu
}

// ClearDescription clears the value of the "description" field.
func (gu *GuildUpdate) ClearDescription() *GuildUpdate {
	gu.mutation.ClearDescription()
	return gu
}

// SetGuildCover sets the "guild_cover" field.
func (gu *GuildUpdate) SetGuildCover(s string) *GuildUpdate {
	gu.mutation.SetGuildCover(s)
	return gu
}

// SetNillableGuildCover sets the "guild_cover" field if the given value is not nil.
func (gu *GuildUpdate) SetNillableGuildCover(s *string) *GuildUpdate {
	if s != nil {
		gu.SetGuildCover(*s)
	}
	return gu
}

// ClearGuildCover clears the value of the "guild_cover" field.
func (gu *GuildUpdate) ClearGuildCover() *GuildUpdate {
	gu.mutation.ClearGuildCover()
	return gu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (gu *GuildUpdate) SetOwnerID(id string) *GuildUpdate {
	gu.mutation.SetOwnerID(id)
	return gu
}

// SetOwner sets the "owner" edge to the User entity.
func (gu *GuildUpdate) SetOwner(u *User) *GuildUpdate {
	return gu.SetOwnerID(u.ID)
}

// AddInvitationIDs adds the "invitations" edge to the Invitation entity by IDs.
func (gu *GuildUpdate) AddInvitationIDs(ids ...string) *GuildUpdate {
	gu.mutation.AddInvitationIDs(ids...)
	return gu
}

// AddInvitations adds the "invitations" edges to the Invitation entity.
func (gu *GuildUpdate) AddInvitations(i ...*Invitation) *GuildUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return gu.AddInvitationIDs(ids...)
}

// AddGuildMemberIDs adds the "guild_members" edge to the Member entity by IDs.
func (gu *GuildUpdate) AddGuildMemberIDs(ids ...string) *GuildUpdate {
	gu.mutation.AddGuildMemberIDs(ids...)
	return gu
}

// AddGuildMembers adds the "guild_members" edges to the Member entity.
func (gu *GuildUpdate) AddGuildMembers(m ...*Member) *GuildUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return gu.AddGuildMemberIDs(ids...)
}

// Mutation returns the GuildMutation object of the builder.
func (gu *GuildUpdate) Mutation() *GuildMutation {
	return gu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (gu *GuildUpdate) ClearOwner() *GuildUpdate {
	gu.mutation.ClearOwner()
	return gu
}

// ClearInvitations clears all "invitations" edges to the Invitation entity.
func (gu *GuildUpdate) ClearInvitations() *GuildUpdate {
	gu.mutation.ClearInvitations()
	return gu
}

// RemoveInvitationIDs removes the "invitations" edge to Invitation entities by IDs.
func (gu *GuildUpdate) RemoveInvitationIDs(ids ...string) *GuildUpdate {
	gu.mutation.RemoveInvitationIDs(ids...)
	return gu
}

// RemoveInvitations removes "invitations" edges to Invitation entities.
func (gu *GuildUpdate) RemoveInvitations(i ...*Invitation) *GuildUpdate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return gu.RemoveInvitationIDs(ids...)
}

// ClearGuildMembers clears all "guild_members" edges to the Member entity.
func (gu *GuildUpdate) ClearGuildMembers() *GuildUpdate {
	gu.mutation.ClearGuildMembers()
	return gu
}

// RemoveGuildMemberIDs removes the "guild_members" edge to Member entities by IDs.
func (gu *GuildUpdate) RemoveGuildMemberIDs(ids ...string) *GuildUpdate {
	gu.mutation.RemoveGuildMemberIDs(ids...)
	return gu
}

// RemoveGuildMembers removes "guild_members" edges to Member entities.
func (gu *GuildUpdate) RemoveGuildMembers(m ...*Member) *GuildUpdate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return gu.RemoveGuildMemberIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GuildUpdate) Save(ctx context.Context) (int, error) {
	gu.defaults()
	return withHooks(ctx, gu.sqlSave, gu.mutation, gu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GuildUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GuildUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GuildUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gu *GuildUpdate) defaults() {
	if _, ok := gu.mutation.UpdatedAt(); !ok {
		v := guild.UpdateDefaultUpdatedAt()
		gu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gu *GuildUpdate) check() error {
	if v, ok := gu.mutation.Name(); ok {
		if err := guild.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Guild.name": %w`, err)}
		}
	}
	if gu.mutation.OwnerCleared() && len(gu.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Guild.owner"`)
	}
	return nil
}

func (gu *GuildUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(guild.Table, guild.Columns, sqlgraph.NewFieldSpec(guild.FieldID, field.TypeString))
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.CreatedAt(); ok {
		_spec.SetField(guild.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := gu.mutation.UpdatedAt(); ok {
		_spec.SetField(guild.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := gu.mutation.Name(); ok {
		_spec.SetField(guild.FieldName, field.TypeString, value)
	}
	if value, ok := gu.mutation.GuildIcon(); ok {
		_spec.SetField(guild.FieldGuildIcon, field.TypeString, value)
	}
	if gu.mutation.GuildIconCleared() {
		_spec.ClearField(guild.FieldGuildIcon, field.TypeString)
	}
	if value, ok := gu.mutation.Description(); ok {
		_spec.SetField(guild.FieldDescription, field.TypeString, value)
	}
	if gu.mutation.DescriptionCleared() {
		_spec.ClearField(guild.FieldDescription, field.TypeString)
	}
	if value, ok := gu.mutation.GuildCover(); ok {
		_spec.SetField(guild.FieldGuildCover, field.TypeString, value)
	}
	if gu.mutation.GuildCoverCleared() {
		_spec.ClearField(guild.FieldGuildCover, field.TypeString)
	}
	if gu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guild.OwnerTable,
			Columns: []string{guild.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guild.OwnerTable,
			Columns: []string{guild.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.InvitationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   guild.InvitationsTable,
			Columns: []string{guild.InvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedInvitationsIDs(); len(nodes) > 0 && !gu.mutation.InvitationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   guild.InvitationsTable,
			Columns: []string{guild.InvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.InvitationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   guild.InvitationsTable,
			Columns: []string{guild.InvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.GuildMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guild.GuildMembersTable,
			Columns: []string{guild.GuildMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedGuildMembersIDs(); len(nodes) > 0 && !gu.mutation.GuildMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guild.GuildMembersTable,
			Columns: []string{guild.GuildMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.GuildMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guild.GuildMembersTable,
			Columns: []string{guild.GuildMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{guild.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gu.mutation.done = true
	return n, nil
}

// GuildUpdateOne is the builder for updating a single Guild entity.
type GuildUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GuildMutation
}

// SetCreatedAt sets the "created_at" field.
func (guo *GuildUpdateOne) SetCreatedAt(t time.Time) *GuildUpdateOne {
	guo.mutation.SetCreatedAt(t)
	return guo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (guo *GuildUpdateOne) SetNillableCreatedAt(t *time.Time) *GuildUpdateOne {
	if t != nil {
		guo.SetCreatedAt(*t)
	}
	return guo
}

// SetUpdatedAt sets the "updated_at" field.
func (guo *GuildUpdateOne) SetUpdatedAt(t time.Time) *GuildUpdateOne {
	guo.mutation.SetUpdatedAt(t)
	return guo
}

// SetName sets the "name" field.
func (guo *GuildUpdateOne) SetName(s string) *GuildUpdateOne {
	guo.mutation.SetName(s)
	return guo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (guo *GuildUpdateOne) SetNillableName(s *string) *GuildUpdateOne {
	if s != nil {
		guo.SetName(*s)
	}
	return guo
}

// SetGuildIcon sets the "guild_icon" field.
func (guo *GuildUpdateOne) SetGuildIcon(s string) *GuildUpdateOne {
	guo.mutation.SetGuildIcon(s)
	return guo
}

// SetNillableGuildIcon sets the "guild_icon" field if the given value is not nil.
func (guo *GuildUpdateOne) SetNillableGuildIcon(s *string) *GuildUpdateOne {
	if s != nil {
		guo.SetGuildIcon(*s)
	}
	return guo
}

// ClearGuildIcon clears the value of the "guild_icon" field.
func (guo *GuildUpdateOne) ClearGuildIcon() *GuildUpdateOne {
	guo.mutation.ClearGuildIcon()
	return guo
}

// SetDescription sets the "description" field.
func (guo *GuildUpdateOne) SetDescription(s string) *GuildUpdateOne {
	guo.mutation.SetDescription(s)
	return guo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (guo *GuildUpdateOne) SetNillableDescription(s *string) *GuildUpdateOne {
	if s != nil {
		guo.SetDescription(*s)
	}
	return guo
}

// ClearDescription clears the value of the "description" field.
func (guo *GuildUpdateOne) ClearDescription() *GuildUpdateOne {
	guo.mutation.ClearDescription()
	return guo
}

// SetGuildCover sets the "guild_cover" field.
func (guo *GuildUpdateOne) SetGuildCover(s string) *GuildUpdateOne {
	guo.mutation.SetGuildCover(s)
	return guo
}

// SetNillableGuildCover sets the "guild_cover" field if the given value is not nil.
func (guo *GuildUpdateOne) SetNillableGuildCover(s *string) *GuildUpdateOne {
	if s != nil {
		guo.SetGuildCover(*s)
	}
	return guo
}

// ClearGuildCover clears the value of the "guild_cover" field.
func (guo *GuildUpdateOne) ClearGuildCover() *GuildUpdateOne {
	guo.mutation.ClearGuildCover()
	return guo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (guo *GuildUpdateOne) SetOwnerID(id string) *GuildUpdateOne {
	guo.mutation.SetOwnerID(id)
	return guo
}

// SetOwner sets the "owner" edge to the User entity.
func (guo *GuildUpdateOne) SetOwner(u *User) *GuildUpdateOne {
	return guo.SetOwnerID(u.ID)
}

// AddInvitationIDs adds the "invitations" edge to the Invitation entity by IDs.
func (guo *GuildUpdateOne) AddInvitationIDs(ids ...string) *GuildUpdateOne {
	guo.mutation.AddInvitationIDs(ids...)
	return guo
}

// AddInvitations adds the "invitations" edges to the Invitation entity.
func (guo *GuildUpdateOne) AddInvitations(i ...*Invitation) *GuildUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return guo.AddInvitationIDs(ids...)
}

// AddGuildMemberIDs adds the "guild_members" edge to the Member entity by IDs.
func (guo *GuildUpdateOne) AddGuildMemberIDs(ids ...string) *GuildUpdateOne {
	guo.mutation.AddGuildMemberIDs(ids...)
	return guo
}

// AddGuildMembers adds the "guild_members" edges to the Member entity.
func (guo *GuildUpdateOne) AddGuildMembers(m ...*Member) *GuildUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return guo.AddGuildMemberIDs(ids...)
}

// Mutation returns the GuildMutation object of the builder.
func (guo *GuildUpdateOne) Mutation() *GuildMutation {
	return guo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (guo *GuildUpdateOne) ClearOwner() *GuildUpdateOne {
	guo.mutation.ClearOwner()
	return guo
}

// ClearInvitations clears all "invitations" edges to the Invitation entity.
func (guo *GuildUpdateOne) ClearInvitations() *GuildUpdateOne {
	guo.mutation.ClearInvitations()
	return guo
}

// RemoveInvitationIDs removes the "invitations" edge to Invitation entities by IDs.
func (guo *GuildUpdateOne) RemoveInvitationIDs(ids ...string) *GuildUpdateOne {
	guo.mutation.RemoveInvitationIDs(ids...)
	return guo
}

// RemoveInvitations removes "invitations" edges to Invitation entities.
func (guo *GuildUpdateOne) RemoveInvitations(i ...*Invitation) *GuildUpdateOne {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return guo.RemoveInvitationIDs(ids...)
}

// ClearGuildMembers clears all "guild_members" edges to the Member entity.
func (guo *GuildUpdateOne) ClearGuildMembers() *GuildUpdateOne {
	guo.mutation.ClearGuildMembers()
	return guo
}

// RemoveGuildMemberIDs removes the "guild_members" edge to Member entities by IDs.
func (guo *GuildUpdateOne) RemoveGuildMemberIDs(ids ...string) *GuildUpdateOne {
	guo.mutation.RemoveGuildMemberIDs(ids...)
	return guo
}

// RemoveGuildMembers removes "guild_members" edges to Member entities.
func (guo *GuildUpdateOne) RemoveGuildMembers(m ...*Member) *GuildUpdateOne {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return guo.RemoveGuildMemberIDs(ids...)
}

// Where appends a list predicates to the GuildUpdate builder.
func (guo *GuildUpdateOne) Where(ps ...predicate.Guild) *GuildUpdateOne {
	guo.mutation.Where(ps...)
	return guo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GuildUpdateOne) Select(field string, fields ...string) *GuildUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Guild entity.
func (guo *GuildUpdateOne) Save(ctx context.Context) (*Guild, error) {
	guo.defaults()
	return withHooks(ctx, guo.sqlSave, guo.mutation, guo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GuildUpdateOne) SaveX(ctx context.Context) *Guild {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GuildUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GuildUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (guo *GuildUpdateOne) defaults() {
	if _, ok := guo.mutation.UpdatedAt(); !ok {
		v := guild.UpdateDefaultUpdatedAt()
		guo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guo *GuildUpdateOne) check() error {
	if v, ok := guo.mutation.Name(); ok {
		if err := guild.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Guild.name": %w`, err)}
		}
	}
	if guo.mutation.OwnerCleared() && len(guo.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Guild.owner"`)
	}
	return nil
}

func (guo *GuildUpdateOne) sqlSave(ctx context.Context) (_node *Guild, err error) {
	if err := guo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(guild.Table, guild.Columns, sqlgraph.NewFieldSpec(guild.FieldID, field.TypeString))
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Guild.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, guild.FieldID)
		for _, f := range fields {
			if !guild.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != guild.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.CreatedAt(); ok {
		_spec.SetField(guild.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := guo.mutation.UpdatedAt(); ok {
		_spec.SetField(guild.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := guo.mutation.Name(); ok {
		_spec.SetField(guild.FieldName, field.TypeString, value)
	}
	if value, ok := guo.mutation.GuildIcon(); ok {
		_spec.SetField(guild.FieldGuildIcon, field.TypeString, value)
	}
	if guo.mutation.GuildIconCleared() {
		_spec.ClearField(guild.FieldGuildIcon, field.TypeString)
	}
	if value, ok := guo.mutation.Description(); ok {
		_spec.SetField(guild.FieldDescription, field.TypeString, value)
	}
	if guo.mutation.DescriptionCleared() {
		_spec.ClearField(guild.FieldDescription, field.TypeString)
	}
	if value, ok := guo.mutation.GuildCover(); ok {
		_spec.SetField(guild.FieldGuildCover, field.TypeString, value)
	}
	if guo.mutation.GuildCoverCleared() {
		_spec.ClearField(guild.FieldGuildCover, field.TypeString)
	}
	if guo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guild.OwnerTable,
			Columns: []string{guild.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guild.OwnerTable,
			Columns: []string{guild.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.InvitationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   guild.InvitationsTable,
			Columns: []string{guild.InvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedInvitationsIDs(); len(nodes) > 0 && !guo.mutation.InvitationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   guild.InvitationsTable,
			Columns: []string{guild.InvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.InvitationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   guild.InvitationsTable,
			Columns: []string{guild.InvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.GuildMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guild.GuildMembersTable,
			Columns: []string{guild.GuildMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedGuildMembersIDs(); len(nodes) > 0 && !guo.mutation.GuildMembersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guild.GuildMembersTable,
			Columns: []string{guild.GuildMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.GuildMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guild.GuildMembersTable,
			Columns: []string{guild.GuildMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Guild{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{guild.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guo.mutation.done = true
	return _node, nil
}
