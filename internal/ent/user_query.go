// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"kakashi/chaos/internal/ent/block"
	"kakashi/chaos/internal/ent/conversationparticipant"
	"kakashi/chaos/internal/ent/friend"
	"kakashi/chaos/internal/ent/guild"
	"kakashi/chaos/internal/ent/invitation"
	"kakashi/chaos/internal/ent/member"
	"kakashi/chaos/internal/ent/message"
	"kakashi/chaos/internal/ent/notification"
	"kakashi/chaos/internal/ent/predicate"
	"kakashi/chaos/internal/ent/session"
	"kakashi/chaos/internal/ent/user"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserQuery is the builder for querying User entities.
type UserQuery struct {
	config
	ctx                            *QueryContext
	order                          []user.OrderOption
	inters                         []Interceptor
	predicates                     []predicate.User
	withSessions                   *SessionQuery
	withOwnedGuilds                *GuildQuery
	withInvitations                *InvitationQuery
	withMemberOf                   *MemberQuery
	withFriendRequestsSent         *FriendQuery
	withFriendRequestsReceived     *FriendQuery
	withSentMessages               *MessageQuery
	withNotifications              *NotificationQuery
	withRelatedNotifications       *NotificationQuery
	withConversationParticipations *ConversationParticipantQuery
	withBlockedUsers               *BlockQuery
	withBlockedByUsers             *BlockQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the UserQuery builder.
func (uq *UserQuery) Where(ps ...predicate.User) *UserQuery {
	uq.predicates = append(uq.predicates, ps...)
	return uq
}

// Limit the number of records to be returned by this query.
func (uq *UserQuery) Limit(limit int) *UserQuery {
	uq.ctx.Limit = &limit
	return uq
}

// Offset to start from.
func (uq *UserQuery) Offset(offset int) *UserQuery {
	uq.ctx.Offset = &offset
	return uq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (uq *UserQuery) Unique(unique bool) *UserQuery {
	uq.ctx.Unique = &unique
	return uq
}

// Order specifies how the records should be ordered.
func (uq *UserQuery) Order(o ...user.OrderOption) *UserQuery {
	uq.order = append(uq.order, o...)
	return uq
}

// QuerySessions chains the current query on the "sessions" edge.
func (uq *UserQuery) QuerySessions() *SessionQuery {
	query := (&SessionClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(session.Table, session.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SessionsTable, user.SessionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOwnedGuilds chains the current query on the "owned_guilds" edge.
func (uq *UserQuery) QueryOwnedGuilds() *GuildQuery {
	query := (&GuildClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(guild.Table, guild.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.OwnedGuildsTable, user.OwnedGuildsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInvitations chains the current query on the "invitations" edge.
func (uq *UserQuery) QueryInvitations() *InvitationQuery {
	query := (&InvitationClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(invitation.Table, invitation.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.InvitationsTable, user.InvitationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMemberOf chains the current query on the "member_of" edge.
func (uq *UserQuery) QueryMemberOf() *MemberQuery {
	query := (&MemberClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(member.Table, member.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.MemberOfTable, user.MemberOfColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFriendRequestsSent chains the current query on the "friend_requests_sent" edge.
func (uq *UserQuery) QueryFriendRequestsSent() *FriendQuery {
	query := (&FriendClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(friend.Table, friend.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.FriendRequestsSentTable, user.FriendRequestsSentColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFriendRequestsReceived chains the current query on the "friend_requests_received" edge.
func (uq *UserQuery) QueryFriendRequestsReceived() *FriendQuery {
	query := (&FriendClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(friend.Table, friend.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.FriendRequestsReceivedTable, user.FriendRequestsReceivedColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySentMessages chains the current query on the "sent_messages" edge.
func (uq *UserQuery) QuerySentMessages() *MessageQuery {
	query := (&MessageClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(message.Table, message.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.SentMessagesTable, user.SentMessagesColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNotifications chains the current query on the "notifications" edge.
func (uq *UserQuery) QueryNotifications() *NotificationQuery {
	query := (&NotificationClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.NotificationsTable, user.NotificationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryRelatedNotifications chains the current query on the "related_notifications" edge.
func (uq *UserQuery) QueryRelatedNotifications() *NotificationQuery {
	query := (&NotificationClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(notification.Table, notification.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.RelatedNotificationsTable, user.RelatedNotificationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryConversationParticipations chains the current query on the "conversation_participations" edge.
func (uq *UserQuery) QueryConversationParticipations() *ConversationParticipantQuery {
	query := (&ConversationParticipantClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(conversationparticipant.Table, conversationparticipant.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.ConversationParticipationsTable, user.ConversationParticipationsColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBlockedUsers chains the current query on the "blocked_users" edge.
func (uq *UserQuery) QueryBlockedUsers() *BlockQuery {
	query := (&BlockClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(block.Table, block.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.BlockedUsersTable, user.BlockedUsersColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryBlockedByUsers chains the current query on the "blocked_by_users" edge.
func (uq *UserQuery) QueryBlockedByUsers() *BlockQuery {
	query := (&BlockClient{config: uq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := uq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := uq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, selector),
			sqlgraph.To(block.Table, block.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, user.BlockedByUsersTable, user.BlockedByUsersColumn),
		)
		fromU = sqlgraph.SetNeighbors(uq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first User entity from the query.
// Returns a *NotFoundError when no User was found.
func (uq *UserQuery) First(ctx context.Context) (*User, error) {
	nodes, err := uq.Limit(1).All(setContextOp(ctx, uq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{user.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (uq *UserQuery) FirstX(ctx context.Context) *User {
	node, err := uq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first User ID from the query.
// Returns a *NotFoundError when no User ID was found.
func (uq *UserQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = uq.Limit(1).IDs(setContextOp(ctx, uq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{user.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (uq *UserQuery) FirstIDX(ctx context.Context) string {
	id, err := uq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single User entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one User entity is found.
// Returns a *NotFoundError when no User entities are found.
func (uq *UserQuery) Only(ctx context.Context) (*User, error) {
	nodes, err := uq.Limit(2).All(setContextOp(ctx, uq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{user.Label}
	default:
		return nil, &NotSingularError{user.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (uq *UserQuery) OnlyX(ctx context.Context) *User {
	node, err := uq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only User ID in the query.
// Returns a *NotSingularError when more than one User ID is found.
// Returns a *NotFoundError when no entities are found.
func (uq *UserQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = uq.Limit(2).IDs(setContextOp(ctx, uq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{user.Label}
	default:
		err = &NotSingularError{user.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (uq *UserQuery) OnlyIDX(ctx context.Context) string {
	id, err := uq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Users.
func (uq *UserQuery) All(ctx context.Context) ([]*User, error) {
	ctx = setContextOp(ctx, uq.ctx, ent.OpQueryAll)
	if err := uq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*User, *UserQuery]()
	return withInterceptors[[]*User](ctx, uq, qr, uq.inters)
}

// AllX is like All, but panics if an error occurs.
func (uq *UserQuery) AllX(ctx context.Context) []*User {
	nodes, err := uq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of User IDs.
func (uq *UserQuery) IDs(ctx context.Context) (ids []string, err error) {
	if uq.ctx.Unique == nil && uq.path != nil {
		uq.Unique(true)
	}
	ctx = setContextOp(ctx, uq.ctx, ent.OpQueryIDs)
	if err = uq.Select(user.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (uq *UserQuery) IDsX(ctx context.Context) []string {
	ids, err := uq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (uq *UserQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, uq.ctx, ent.OpQueryCount)
	if err := uq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, uq, querierCount[*UserQuery](), uq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (uq *UserQuery) CountX(ctx context.Context) int {
	count, err := uq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (uq *UserQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, uq.ctx, ent.OpQueryExist)
	switch _, err := uq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (uq *UserQuery) ExistX(ctx context.Context) bool {
	exist, err := uq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the UserQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (uq *UserQuery) Clone() *UserQuery {
	if uq == nil {
		return nil
	}
	return &UserQuery{
		config:                         uq.config,
		ctx:                            uq.ctx.Clone(),
		order:                          append([]user.OrderOption{}, uq.order...),
		inters:                         append([]Interceptor{}, uq.inters...),
		predicates:                     append([]predicate.User{}, uq.predicates...),
		withSessions:                   uq.withSessions.Clone(),
		withOwnedGuilds:                uq.withOwnedGuilds.Clone(),
		withInvitations:                uq.withInvitations.Clone(),
		withMemberOf:                   uq.withMemberOf.Clone(),
		withFriendRequestsSent:         uq.withFriendRequestsSent.Clone(),
		withFriendRequestsReceived:     uq.withFriendRequestsReceived.Clone(),
		withSentMessages:               uq.withSentMessages.Clone(),
		withNotifications:              uq.withNotifications.Clone(),
		withRelatedNotifications:       uq.withRelatedNotifications.Clone(),
		withConversationParticipations: uq.withConversationParticipations.Clone(),
		withBlockedUsers:               uq.withBlockedUsers.Clone(),
		withBlockedByUsers:             uq.withBlockedByUsers.Clone(),
		// clone intermediate query.
		sql:  uq.sql.Clone(),
		path: uq.path,
	}
}

// WithSessions tells the query-builder to eager-load the nodes that are connected to
// the "sessions" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithSessions(opts ...func(*SessionQuery)) *UserQuery {
	query := (&SessionClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withSessions = query
	return uq
}

// WithOwnedGuilds tells the query-builder to eager-load the nodes that are connected to
// the "owned_guilds" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithOwnedGuilds(opts ...func(*GuildQuery)) *UserQuery {
	query := (&GuildClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withOwnedGuilds = query
	return uq
}

// WithInvitations tells the query-builder to eager-load the nodes that are connected to
// the "invitations" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithInvitations(opts ...func(*InvitationQuery)) *UserQuery {
	query := (&InvitationClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withInvitations = query
	return uq
}

// WithMemberOf tells the query-builder to eager-load the nodes that are connected to
// the "member_of" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithMemberOf(opts ...func(*MemberQuery)) *UserQuery {
	query := (&MemberClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withMemberOf = query
	return uq
}

// WithFriendRequestsSent tells the query-builder to eager-load the nodes that are connected to
// the "friend_requests_sent" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithFriendRequestsSent(opts ...func(*FriendQuery)) *UserQuery {
	query := (&FriendClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withFriendRequestsSent = query
	return uq
}

// WithFriendRequestsReceived tells the query-builder to eager-load the nodes that are connected to
// the "friend_requests_received" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithFriendRequestsReceived(opts ...func(*FriendQuery)) *UserQuery {
	query := (&FriendClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withFriendRequestsReceived = query
	return uq
}

// WithSentMessages tells the query-builder to eager-load the nodes that are connected to
// the "sent_messages" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithSentMessages(opts ...func(*MessageQuery)) *UserQuery {
	query := (&MessageClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withSentMessages = query
	return uq
}

// WithNotifications tells the query-builder to eager-load the nodes that are connected to
// the "notifications" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithNotifications(opts ...func(*NotificationQuery)) *UserQuery {
	query := (&NotificationClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withNotifications = query
	return uq
}

// WithRelatedNotifications tells the query-builder to eager-load the nodes that are connected to
// the "related_notifications" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithRelatedNotifications(opts ...func(*NotificationQuery)) *UserQuery {
	query := (&NotificationClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withRelatedNotifications = query
	return uq
}

// WithConversationParticipations tells the query-builder to eager-load the nodes that are connected to
// the "conversation_participations" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithConversationParticipations(opts ...func(*ConversationParticipantQuery)) *UserQuery {
	query := (&ConversationParticipantClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withConversationParticipations = query
	return uq
}

// WithBlockedUsers tells the query-builder to eager-load the nodes that are connected to
// the "blocked_users" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithBlockedUsers(opts ...func(*BlockQuery)) *UserQuery {
	query := (&BlockClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withBlockedUsers = query
	return uq
}

// WithBlockedByUsers tells the query-builder to eager-load the nodes that are connected to
// the "blocked_by_users" edge. The optional arguments are used to configure the query builder of the edge.
func (uq *UserQuery) WithBlockedByUsers(opts ...func(*BlockQuery)) *UserQuery {
	query := (&BlockClient{config: uq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	uq.withBlockedByUsers = query
	return uq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.User.Query().
//		GroupBy(user.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (uq *UserQuery) GroupBy(field string, fields ...string) *UserGroupBy {
	uq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &UserGroupBy{build: uq}
	grbuild.flds = &uq.ctx.Fields
	grbuild.label = user.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.User.Query().
//		Select(user.FieldCreatedAt).
//		Scan(ctx, &v)
func (uq *UserQuery) Select(fields ...string) *UserSelect {
	uq.ctx.Fields = append(uq.ctx.Fields, fields...)
	sbuild := &UserSelect{UserQuery: uq}
	sbuild.label = user.Label
	sbuild.flds, sbuild.scan = &uq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a UserSelect configured with the given aggregations.
func (uq *UserQuery) Aggregate(fns ...AggregateFunc) *UserSelect {
	return uq.Select().Aggregate(fns...)
}

func (uq *UserQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range uq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, uq); err != nil {
				return err
			}
		}
	}
	for _, f := range uq.ctx.Fields {
		if !user.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if uq.path != nil {
		prev, err := uq.path(ctx)
		if err != nil {
			return err
		}
		uq.sql = prev
	}
	return nil
}

func (uq *UserQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*User, error) {
	var (
		nodes       = []*User{}
		_spec       = uq.querySpec()
		loadedTypes = [12]bool{
			uq.withSessions != nil,
			uq.withOwnedGuilds != nil,
			uq.withInvitations != nil,
			uq.withMemberOf != nil,
			uq.withFriendRequestsSent != nil,
			uq.withFriendRequestsReceived != nil,
			uq.withSentMessages != nil,
			uq.withNotifications != nil,
			uq.withRelatedNotifications != nil,
			uq.withConversationParticipations != nil,
			uq.withBlockedUsers != nil,
			uq.withBlockedByUsers != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*User).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &User{config: uq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, uq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := uq.withSessions; query != nil {
		if err := uq.loadSessions(ctx, query, nodes,
			func(n *User) { n.Edges.Sessions = []*Session{} },
			func(n *User, e *Session) { n.Edges.Sessions = append(n.Edges.Sessions, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withOwnedGuilds; query != nil {
		if err := uq.loadOwnedGuilds(ctx, query, nodes,
			func(n *User) { n.Edges.OwnedGuilds = []*Guild{} },
			func(n *User, e *Guild) { n.Edges.OwnedGuilds = append(n.Edges.OwnedGuilds, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withInvitations; query != nil {
		if err := uq.loadInvitations(ctx, query, nodes,
			func(n *User) { n.Edges.Invitations = []*Invitation{} },
			func(n *User, e *Invitation) { n.Edges.Invitations = append(n.Edges.Invitations, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withMemberOf; query != nil {
		if err := uq.loadMemberOf(ctx, query, nodes,
			func(n *User) { n.Edges.MemberOf = []*Member{} },
			func(n *User, e *Member) { n.Edges.MemberOf = append(n.Edges.MemberOf, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withFriendRequestsSent; query != nil {
		if err := uq.loadFriendRequestsSent(ctx, query, nodes,
			func(n *User) { n.Edges.FriendRequestsSent = []*Friend{} },
			func(n *User, e *Friend) { n.Edges.FriendRequestsSent = append(n.Edges.FriendRequestsSent, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withFriendRequestsReceived; query != nil {
		if err := uq.loadFriendRequestsReceived(ctx, query, nodes,
			func(n *User) { n.Edges.FriendRequestsReceived = []*Friend{} },
			func(n *User, e *Friend) { n.Edges.FriendRequestsReceived = append(n.Edges.FriendRequestsReceived, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withSentMessages; query != nil {
		if err := uq.loadSentMessages(ctx, query, nodes,
			func(n *User) { n.Edges.SentMessages = []*Message{} },
			func(n *User, e *Message) { n.Edges.SentMessages = append(n.Edges.SentMessages, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withNotifications; query != nil {
		if err := uq.loadNotifications(ctx, query, nodes,
			func(n *User) { n.Edges.Notifications = []*Notification{} },
			func(n *User, e *Notification) { n.Edges.Notifications = append(n.Edges.Notifications, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withRelatedNotifications; query != nil {
		if err := uq.loadRelatedNotifications(ctx, query, nodes,
			func(n *User) { n.Edges.RelatedNotifications = []*Notification{} },
			func(n *User, e *Notification) { n.Edges.RelatedNotifications = append(n.Edges.RelatedNotifications, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withConversationParticipations; query != nil {
		if err := uq.loadConversationParticipations(ctx, query, nodes,
			func(n *User) { n.Edges.ConversationParticipations = []*ConversationParticipant{} },
			func(n *User, e *ConversationParticipant) {
				n.Edges.ConversationParticipations = append(n.Edges.ConversationParticipations, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := uq.withBlockedUsers; query != nil {
		if err := uq.loadBlockedUsers(ctx, query, nodes,
			func(n *User) { n.Edges.BlockedUsers = []*Block{} },
			func(n *User, e *Block) { n.Edges.BlockedUsers = append(n.Edges.BlockedUsers, e) }); err != nil {
			return nil, err
		}
	}
	if query := uq.withBlockedByUsers; query != nil {
		if err := uq.loadBlockedByUsers(ctx, query, nodes,
			func(n *User) { n.Edges.BlockedByUsers = []*Block{} },
			func(n *User, e *Block) { n.Edges.BlockedByUsers = append(n.Edges.BlockedByUsers, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (uq *UserQuery) loadSessions(ctx context.Context, query *SessionQuery, nodes []*User, init func(*User), assign func(*User, *Session)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Session(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.SessionsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_sessions
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_sessions" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_sessions" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadOwnedGuilds(ctx context.Context, query *GuildQuery, nodes []*User, init func(*User), assign func(*User, *Guild)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Guild(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.OwnedGuildsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_owned_guilds
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_owned_guilds" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_owned_guilds" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadInvitations(ctx context.Context, query *InvitationQuery, nodes []*User, init func(*User), assign func(*User, *Invitation)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Invitation(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.InvitationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.invitation_invited_by
		if fk == nil {
			return fmt.Errorf(`foreign-key "invitation_invited_by" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "invitation_invited_by" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadMemberOf(ctx context.Context, query *MemberQuery, nodes []*User, init func(*User), assign func(*User, *Member)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.Member(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.MemberOfColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.user_member_of
		if fk == nil {
			return fmt.Errorf(`foreign-key "user_member_of" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_member_of" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadFriendRequestsSent(ctx context.Context, query *FriendQuery, nodes []*User, init func(*User), assign func(*User, *Friend)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(friend.FieldRequesterID)
	}
	query.Where(predicate.Friend(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.FriendRequestsSentColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RequesterID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "requester_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadFriendRequestsReceived(ctx context.Context, query *FriendQuery, nodes []*User, init func(*User), assign func(*User, *Friend)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(friend.FieldAddresseeID)
	}
	query.Where(predicate.Friend(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.FriendRequestsReceivedColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.AddresseeID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "addressee_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadSentMessages(ctx context.Context, query *MessageQuery, nodes []*User, init func(*User), assign func(*User, *Message)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(message.FieldSenderID)
	}
	query.Where(predicate.Message(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.SentMessagesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.SenderID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "sender_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadNotifications(ctx context.Context, query *NotificationQuery, nodes []*User, init func(*User), assign func(*User, *Notification)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(notification.FieldUserID)
	}
	query.Where(predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.NotificationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadRelatedNotifications(ctx context.Context, query *NotificationQuery, nodes []*User, init func(*User), assign func(*User, *Notification)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(notification.FieldRelatedUserID)
	}
	query.Where(predicate.Notification(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.RelatedNotificationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.RelatedUserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "related_user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadConversationParticipations(ctx context.Context, query *ConversationParticipantQuery, nodes []*User, init func(*User), assign func(*User, *ConversationParticipant)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(conversationparticipant.FieldUserID)
	}
	query.Where(predicate.ConversationParticipant(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.ConversationParticipationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.UserID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "user_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadBlockedUsers(ctx context.Context, query *BlockQuery, nodes []*User, init func(*User), assign func(*User, *Block)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(block.FieldBlockerID)
	}
	query.Where(predicate.Block(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.BlockedUsersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.BlockerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "blocker_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (uq *UserQuery) loadBlockedByUsers(ctx context.Context, query *BlockQuery, nodes []*User, init func(*User), assign func(*User, *Block)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*User)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(block.FieldBlockedID)
	}
	query.Where(predicate.Block(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(user.BlockedByUsersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.BlockedID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "blocked_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (uq *UserQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := uq.querySpec()
	_spec.Node.Columns = uq.ctx.Fields
	if len(uq.ctx.Fields) > 0 {
		_spec.Unique = uq.ctx.Unique != nil && *uq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, uq.driver, _spec)
}

func (uq *UserQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	_spec.From = uq.sql
	if unique := uq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if uq.path != nil {
		_spec.Unique = true
	}
	if fields := uq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for i := range fields {
			if fields[i] != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := uq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := uq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := uq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := uq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (uq *UserQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(uq.driver.Dialect())
	t1 := builder.Table(user.Table)
	columns := uq.ctx.Fields
	if len(columns) == 0 {
		columns = user.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if uq.sql != nil {
		selector = uq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if uq.ctx.Unique != nil && *uq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range uq.predicates {
		p(selector)
	}
	for _, p := range uq.order {
		p(selector)
	}
	if offset := uq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := uq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// UserGroupBy is the group-by builder for User entities.
type UserGroupBy struct {
	selector
	build *UserQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ugb *UserGroupBy) Aggregate(fns ...AggregateFunc) *UserGroupBy {
	ugb.fns = append(ugb.fns, fns...)
	return ugb
}

// Scan applies the selector query and scans the result into the given value.
func (ugb *UserGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ugb.build.ctx, ent.OpQueryGroupBy)
	if err := ugb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserQuery, *UserGroupBy](ctx, ugb.build, ugb, ugb.build.inters, v)
}

func (ugb *UserGroupBy) sqlScan(ctx context.Context, root *UserQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ugb.fns))
	for _, fn := range ugb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ugb.flds)+len(ugb.fns))
		for _, f := range *ugb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ugb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ugb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// UserSelect is the builder for selecting fields of User entities.
type UserSelect struct {
	*UserQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (us *UserSelect) Aggregate(fns ...AggregateFunc) *UserSelect {
	us.fns = append(us.fns, fns...)
	return us
}

// Scan applies the selector query and scans the result into the given value.
func (us *UserSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, us.ctx, ent.OpQuerySelect)
	if err := us.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*UserQuery, *UserSelect](ctx, us.UserQuery, us, us.inters, v)
}

func (us *UserSelect) sqlScan(ctx context.Context, root *UserQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(us.fns))
	for _, fn := range us.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*us.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := us.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
