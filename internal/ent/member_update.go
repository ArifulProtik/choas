// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kakashi/chaos/internal/ent/guild"
	"kakashi/chaos/internal/ent/member"
	"kakashi/chaos/internal/ent/predicate"
	"kakashi/chaos/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MemberUpdate is the builder for updating Member entities.
type MemberUpdate struct {
	config
	hooks    []Hook
	mutation *MemberMutation
}

// Where appends a list predicates to the MemberUpdate builder.
func (mu *MemberUpdate) Where(ps ...predicate.Member) *MemberUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetCreatedAt sets the "created_at" field.
func (mu *MemberUpdate) SetCreatedAt(t time.Time) *MemberUpdate {
	mu.mutation.SetCreatedAt(t)
	return mu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableCreatedAt(t *time.Time) *MemberUpdate {
	if t != nil {
		mu.SetCreatedAt(*t)
	}
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MemberUpdate) SetUpdatedAt(t time.Time) *MemberUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// SetNickname sets the "nickname" field.
func (mu *MemberUpdate) SetNickname(s string) *MemberUpdate {
	mu.mutation.SetNickname(s)
	return mu
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableNickname(s *string) *MemberUpdate {
	if s != nil {
		mu.SetNickname(*s)
	}
	return mu
}

// ClearNickname clears the value of the "nickname" field.
func (mu *MemberUpdate) ClearNickname() *MemberUpdate {
	mu.mutation.ClearNickname()
	return mu
}

// SetJoinedAt sets the "joined_at" field.
func (mu *MemberUpdate) SetJoinedAt(t time.Time) *MemberUpdate {
	mu.mutation.SetJoinedAt(t)
	return mu
}

// SetNillableJoinedAt sets the "joined_at" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableJoinedAt(t *time.Time) *MemberUpdate {
	if t != nil {
		mu.SetJoinedAt(*t)
	}
	return mu
}

// SetIsMuted sets the "is_muted" field.
func (mu *MemberUpdate) SetIsMuted(b bool) *MemberUpdate {
	mu.mutation.SetIsMuted(b)
	return mu
}

// SetNillableIsMuted sets the "is_muted" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableIsMuted(b *bool) *MemberUpdate {
	if b != nil {
		mu.SetIsMuted(*b)
	}
	return mu
}

// SetIsDeafened sets the "is_deafened" field.
func (mu *MemberUpdate) SetIsDeafened(b bool) *MemberUpdate {
	mu.mutation.SetIsDeafened(b)
	return mu
}

// SetNillableIsDeafened sets the "is_deafened" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableIsDeafened(b *bool) *MemberUpdate {
	if b != nil {
		mu.SetIsDeafened(*b)
	}
	return mu
}

// SetIsBannned sets the "is_bannned" field.
func (mu *MemberUpdate) SetIsBannned(b bool) *MemberUpdate {
	mu.mutation.SetIsBannned(b)
	return mu
}

// SetNillableIsBannned sets the "is_bannned" field if the given value is not nil.
func (mu *MemberUpdate) SetNillableIsBannned(b *bool) *MemberUpdate {
	if b != nil {
		mu.SetIsBannned(*b)
	}
	return mu
}

// SetGuildID sets the "guild" edge to the Guild entity by ID.
func (mu *MemberUpdate) SetGuildID(id string) *MemberUpdate {
	mu.mutation.SetGuildID(id)
	return mu
}

// SetGuild sets the "guild" edge to the Guild entity.
func (mu *MemberUpdate) SetGuild(g *Guild) *MemberUpdate {
	return mu.SetGuildID(g.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (mu *MemberUpdate) SetUserID(id string) *MemberUpdate {
	mu.mutation.SetUserID(id)
	return mu
}

// SetUser sets the "user" edge to the User entity.
func (mu *MemberUpdate) SetUser(u *User) *MemberUpdate {
	return mu.SetUserID(u.ID)
}

// Mutation returns the MemberMutation object of the builder.
func (mu *MemberUpdate) Mutation() *MemberMutation {
	return mu.mutation
}

// ClearGuild clears the "guild" edge to the Guild entity.
func (mu *MemberUpdate) ClearGuild() *MemberUpdate {
	mu.mutation.ClearGuild()
	return mu
}

// ClearUser clears the "user" edge to the User entity.
func (mu *MemberUpdate) ClearUser() *MemberUpdate {
	mu.mutation.ClearUser()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MemberUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MemberUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MemberUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MemberUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MemberUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok {
		v := member.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MemberUpdate) check() error {
	if v, ok := mu.mutation.Nickname(); ok {
		if err := member.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`ent: validator failed for field "Member.nickname": %w`, err)}
		}
	}
	if mu.mutation.GuildCleared() && len(mu.mutation.GuildIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Member.guild"`)
	}
	if mu.mutation.UserCleared() && len(mu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Member.user"`)
	}
	return nil
}

func (mu *MemberUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(member.Table, member.Columns, sqlgraph.NewFieldSpec(member.FieldID, field.TypeString))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.CreatedAt(); ok {
		_spec.SetField(member.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(member.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.Nickname(); ok {
		_spec.SetField(member.FieldNickname, field.TypeString, value)
	}
	if mu.mutation.NicknameCleared() {
		_spec.ClearField(member.FieldNickname, field.TypeString)
	}
	if value, ok := mu.mutation.JoinedAt(); ok {
		_spec.SetField(member.FieldJoinedAt, field.TypeTime, value)
	}
	if value, ok := mu.mutation.IsMuted(); ok {
		_spec.SetField(member.FieldIsMuted, field.TypeBool, value)
	}
	if value, ok := mu.mutation.IsDeafened(); ok {
		_spec.SetField(member.FieldIsDeafened, field.TypeBool, value)
	}
	if value, ok := mu.mutation.IsBannned(); ok {
		_spec.SetField(member.FieldIsBannned, field.TypeBool, value)
	}
	if mu.mutation.GuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   member.GuildTable,
			Columns: []string{member.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.GuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   member.GuildTable,
			Columns: []string{member.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if mu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   member.UserTable,
			Columns: []string{member.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   member.UserTable,
			Columns: []string{member.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{member.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MemberUpdateOne is the builder for updating a single Member entity.
type MemberUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MemberMutation
}

// SetCreatedAt sets the "created_at" field.
func (muo *MemberUpdateOne) SetCreatedAt(t time.Time) *MemberUpdateOne {
	muo.mutation.SetCreatedAt(t)
	return muo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableCreatedAt(t *time.Time) *MemberUpdateOne {
	if t != nil {
		muo.SetCreatedAt(*t)
	}
	return muo
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MemberUpdateOne) SetUpdatedAt(t time.Time) *MemberUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// SetNickname sets the "nickname" field.
func (muo *MemberUpdateOne) SetNickname(s string) *MemberUpdateOne {
	muo.mutation.SetNickname(s)
	return muo
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableNickname(s *string) *MemberUpdateOne {
	if s != nil {
		muo.SetNickname(*s)
	}
	return muo
}

// ClearNickname clears the value of the "nickname" field.
func (muo *MemberUpdateOne) ClearNickname() *MemberUpdateOne {
	muo.mutation.ClearNickname()
	return muo
}

// SetJoinedAt sets the "joined_at" field.
func (muo *MemberUpdateOne) SetJoinedAt(t time.Time) *MemberUpdateOne {
	muo.mutation.SetJoinedAt(t)
	return muo
}

// SetNillableJoinedAt sets the "joined_at" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableJoinedAt(t *time.Time) *MemberUpdateOne {
	if t != nil {
		muo.SetJoinedAt(*t)
	}
	return muo
}

// SetIsMuted sets the "is_muted" field.
func (muo *MemberUpdateOne) SetIsMuted(b bool) *MemberUpdateOne {
	muo.mutation.SetIsMuted(b)
	return muo
}

// SetNillableIsMuted sets the "is_muted" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableIsMuted(b *bool) *MemberUpdateOne {
	if b != nil {
		muo.SetIsMuted(*b)
	}
	return muo
}

// SetIsDeafened sets the "is_deafened" field.
func (muo *MemberUpdateOne) SetIsDeafened(b bool) *MemberUpdateOne {
	muo.mutation.SetIsDeafened(b)
	return muo
}

// SetNillableIsDeafened sets the "is_deafened" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableIsDeafened(b *bool) *MemberUpdateOne {
	if b != nil {
		muo.SetIsDeafened(*b)
	}
	return muo
}

// SetIsBannned sets the "is_bannned" field.
func (muo *MemberUpdateOne) SetIsBannned(b bool) *MemberUpdateOne {
	muo.mutation.SetIsBannned(b)
	return muo
}

// SetNillableIsBannned sets the "is_bannned" field if the given value is not nil.
func (muo *MemberUpdateOne) SetNillableIsBannned(b *bool) *MemberUpdateOne {
	if b != nil {
		muo.SetIsBannned(*b)
	}
	return muo
}

// SetGuildID sets the "guild" edge to the Guild entity by ID.
func (muo *MemberUpdateOne) SetGuildID(id string) *MemberUpdateOne {
	muo.mutation.SetGuildID(id)
	return muo
}

// SetGuild sets the "guild" edge to the Guild entity.
func (muo *MemberUpdateOne) SetGuild(g *Guild) *MemberUpdateOne {
	return muo.SetGuildID(g.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (muo *MemberUpdateOne) SetUserID(id string) *MemberUpdateOne {
	muo.mutation.SetUserID(id)
	return muo
}

// SetUser sets the "user" edge to the User entity.
func (muo *MemberUpdateOne) SetUser(u *User) *MemberUpdateOne {
	return muo.SetUserID(u.ID)
}

// Mutation returns the MemberMutation object of the builder.
func (muo *MemberUpdateOne) Mutation() *MemberMutation {
	return muo.mutation
}

// ClearGuild clears the "guild" edge to the Guild entity.
func (muo *MemberUpdateOne) ClearGuild() *MemberUpdateOne {
	muo.mutation.ClearGuild()
	return muo
}

// ClearUser clears the "user" edge to the User entity.
func (muo *MemberUpdateOne) ClearUser() *MemberUpdateOne {
	muo.mutation.ClearUser()
	return muo
}

// Where appends a list predicates to the MemberUpdate builder.
func (muo *MemberUpdateOne) Where(ps ...predicate.Member) *MemberUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MemberUpdateOne) Select(field string, fields ...string) *MemberUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Member entity.
func (muo *MemberUpdateOne) Save(ctx context.Context) (*Member, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MemberUpdateOne) SaveX(ctx context.Context) *Member {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MemberUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MemberUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MemberUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok {
		v := member.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MemberUpdateOne) check() error {
	if v, ok := muo.mutation.Nickname(); ok {
		if err := member.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`ent: validator failed for field "Member.nickname": %w`, err)}
		}
	}
	if muo.mutation.GuildCleared() && len(muo.mutation.GuildIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Member.guild"`)
	}
	if muo.mutation.UserCleared() && len(muo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Member.user"`)
	}
	return nil
}

func (muo *MemberUpdateOne) sqlSave(ctx context.Context) (_node *Member, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(member.Table, member.Columns, sqlgraph.NewFieldSpec(member.FieldID, field.TypeString))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Member.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, member.FieldID)
		for _, f := range fields {
			if !member.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != member.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.CreatedAt(); ok {
		_spec.SetField(member.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(member.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.Nickname(); ok {
		_spec.SetField(member.FieldNickname, field.TypeString, value)
	}
	if muo.mutation.NicknameCleared() {
		_spec.ClearField(member.FieldNickname, field.TypeString)
	}
	if value, ok := muo.mutation.JoinedAt(); ok {
		_spec.SetField(member.FieldJoinedAt, field.TypeTime, value)
	}
	if value, ok := muo.mutation.IsMuted(); ok {
		_spec.SetField(member.FieldIsMuted, field.TypeBool, value)
	}
	if value, ok := muo.mutation.IsDeafened(); ok {
		_spec.SetField(member.FieldIsDeafened, field.TypeBool, value)
	}
	if value, ok := muo.mutation.IsBannned(); ok {
		_spec.SetField(member.FieldIsBannned, field.TypeBool, value)
	}
	if muo.mutation.GuildCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   member.GuildTable,
			Columns: []string{member.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.GuildIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   member.GuildTable,
			Columns: []string{member.GuildColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guild.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if muo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   member.UserTable,
			Columns: []string{member.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   member.UserTable,
			Columns: []string{member.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Member{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{member.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
