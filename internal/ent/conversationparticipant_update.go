// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kakashi/chaos/internal/ent/conversation"
	"kakashi/chaos/internal/ent/conversationparticipant"
	"kakashi/chaos/internal/ent/predicate"
	"kakashi/chaos/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConversationParticipantUpdate is the builder for updating ConversationParticipant entities.
type ConversationParticipantUpdate struct {
	config
	hooks    []Hook
	mutation *ConversationParticipantMutation
}

// Where appends a list predicates to the ConversationParticipantUpdate builder.
func (cpu *ConversationParticipantUpdate) Where(ps ...predicate.ConversationParticipant) *ConversationParticipantUpdate {
	cpu.mutation.Where(ps...)
	return cpu
}

// SetCreatedAt sets the "created_at" field.
func (cpu *ConversationParticipantUpdate) SetCreatedAt(t time.Time) *ConversationParticipantUpdate {
	cpu.mutation.SetCreatedAt(t)
	return cpu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cpu *ConversationParticipantUpdate) SetNillableCreatedAt(t *time.Time) *ConversationParticipantUpdate {
	if t != nil {
		cpu.SetCreatedAt(*t)
	}
	return cpu
}

// SetUpdatedAt sets the "updated_at" field.
func (cpu *ConversationParticipantUpdate) SetUpdatedAt(t time.Time) *ConversationParticipantUpdate {
	cpu.mutation.SetUpdatedAt(t)
	return cpu
}

// SetConversationID sets the "conversation_id" field.
func (cpu *ConversationParticipantUpdate) SetConversationID(s string) *ConversationParticipantUpdate {
	cpu.mutation.SetConversationID(s)
	return cpu
}

// SetNillableConversationID sets the "conversation_id" field if the given value is not nil.
func (cpu *ConversationParticipantUpdate) SetNillableConversationID(s *string) *ConversationParticipantUpdate {
	if s != nil {
		cpu.SetConversationID(*s)
	}
	return cpu
}

// SetUserID sets the "user_id" field.
func (cpu *ConversationParticipantUpdate) SetUserID(s string) *ConversationParticipantUpdate {
	cpu.mutation.SetUserID(s)
	return cpu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cpu *ConversationParticipantUpdate) SetNillableUserID(s *string) *ConversationParticipantUpdate {
	if s != nil {
		cpu.SetUserID(*s)
	}
	return cpu
}

// SetJoinedAt sets the "joined_at" field.
func (cpu *ConversationParticipantUpdate) SetJoinedAt(t time.Time) *ConversationParticipantUpdate {
	cpu.mutation.SetJoinedAt(t)
	return cpu
}

// SetNillableJoinedAt sets the "joined_at" field if the given value is not nil.
func (cpu *ConversationParticipantUpdate) SetNillableJoinedAt(t *time.Time) *ConversationParticipantUpdate {
	if t != nil {
		cpu.SetJoinedAt(*t)
	}
	return cpu
}

// SetLastReadAt sets the "last_read_at" field.
func (cpu *ConversationParticipantUpdate) SetLastReadAt(t time.Time) *ConversationParticipantUpdate {
	cpu.mutation.SetLastReadAt(t)
	return cpu
}

// SetNillableLastReadAt sets the "last_read_at" field if the given value is not nil.
func (cpu *ConversationParticipantUpdate) SetNillableLastReadAt(t *time.Time) *ConversationParticipantUpdate {
	if t != nil {
		cpu.SetLastReadAt(*t)
	}
	return cpu
}

// ClearLastReadAt clears the value of the "last_read_at" field.
func (cpu *ConversationParticipantUpdate) ClearLastReadAt() *ConversationParticipantUpdate {
	cpu.mutation.ClearLastReadAt()
	return cpu
}

// SetIsArchived sets the "is_archived" field.
func (cpu *ConversationParticipantUpdate) SetIsArchived(b bool) *ConversationParticipantUpdate {
	cpu.mutation.SetIsArchived(b)
	return cpu
}

// SetNillableIsArchived sets the "is_archived" field if the given value is not nil.
func (cpu *ConversationParticipantUpdate) SetNillableIsArchived(b *bool) *ConversationParticipantUpdate {
	if b != nil {
		cpu.SetIsArchived(*b)
	}
	return cpu
}

// SetIsMuted sets the "is_muted" field.
func (cpu *ConversationParticipantUpdate) SetIsMuted(b bool) *ConversationParticipantUpdate {
	cpu.mutation.SetIsMuted(b)
	return cpu
}

// SetNillableIsMuted sets the "is_muted" field if the given value is not nil.
func (cpu *ConversationParticipantUpdate) SetNillableIsMuted(b *bool) *ConversationParticipantUpdate {
	if b != nil {
		cpu.SetIsMuted(*b)
	}
	return cpu
}

// SetConversation sets the "conversation" edge to the Conversation entity.
func (cpu *ConversationParticipantUpdate) SetConversation(c *Conversation) *ConversationParticipantUpdate {
	return cpu.SetConversationID(c.ID)
}

// SetUser sets the "user" edge to the User entity.
func (cpu *ConversationParticipantUpdate) SetUser(u *User) *ConversationParticipantUpdate {
	return cpu.SetUserID(u.ID)
}

// Mutation returns the ConversationParticipantMutation object of the builder.
func (cpu *ConversationParticipantUpdate) Mutation() *ConversationParticipantMutation {
	return cpu.mutation
}

// ClearConversation clears the "conversation" edge to the Conversation entity.
func (cpu *ConversationParticipantUpdate) ClearConversation() *ConversationParticipantUpdate {
	cpu.mutation.ClearConversation()
	return cpu
}

// ClearUser clears the "user" edge to the User entity.
func (cpu *ConversationParticipantUpdate) ClearUser() *ConversationParticipantUpdate {
	cpu.mutation.ClearUser()
	return cpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cpu *ConversationParticipantUpdate) Save(ctx context.Context) (int, error) {
	cpu.defaults()
	return withHooks(ctx, cpu.sqlSave, cpu.mutation, cpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cpu *ConversationParticipantUpdate) SaveX(ctx context.Context) int {
	affected, err := cpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cpu *ConversationParticipantUpdate) Exec(ctx context.Context) error {
	_, err := cpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpu *ConversationParticipantUpdate) ExecX(ctx context.Context) {
	if err := cpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cpu *ConversationParticipantUpdate) defaults() {
	if _, ok := cpu.mutation.UpdatedAt(); !ok {
		v := conversationparticipant.UpdateDefaultUpdatedAt()
		cpu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpu *ConversationParticipantUpdate) check() error {
	if v, ok := cpu.mutation.ConversationID(); ok {
		if err := conversationparticipant.ConversationIDValidator(v); err != nil {
			return &ValidationError{Name: "conversation_id", err: fmt.Errorf(`ent: validator failed for field "ConversationParticipant.conversation_id": %w`, err)}
		}
	}
	if v, ok := cpu.mutation.UserID(); ok {
		if err := conversationparticipant.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "ConversationParticipant.user_id": %w`, err)}
		}
	}
	if cpu.mutation.ConversationCleared() && len(cpu.mutation.ConversationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ConversationParticipant.conversation"`)
	}
	if cpu.mutation.UserCleared() && len(cpu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ConversationParticipant.user"`)
	}
	return nil
}

func (cpu *ConversationParticipantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(conversationparticipant.Table, conversationparticipant.Columns, sqlgraph.NewFieldSpec(conversationparticipant.FieldID, field.TypeString))
	if ps := cpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpu.mutation.CreatedAt(); ok {
		_spec.SetField(conversationparticipant.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cpu.mutation.UpdatedAt(); ok {
		_spec.SetField(conversationparticipant.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cpu.mutation.JoinedAt(); ok {
		_spec.SetField(conversationparticipant.FieldJoinedAt, field.TypeTime, value)
	}
	if value, ok := cpu.mutation.LastReadAt(); ok {
		_spec.SetField(conversationparticipant.FieldLastReadAt, field.TypeTime, value)
	}
	if cpu.mutation.LastReadAtCleared() {
		_spec.ClearField(conversationparticipant.FieldLastReadAt, field.TypeTime)
	}
	if value, ok := cpu.mutation.IsArchived(); ok {
		_spec.SetField(conversationparticipant.FieldIsArchived, field.TypeBool, value)
	}
	if value, ok := cpu.mutation.IsMuted(); ok {
		_spec.SetField(conversationparticipant.FieldIsMuted, field.TypeBool, value)
	}
	if cpu.mutation.ConversationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   conversationparticipant.ConversationTable,
			Columns: []string{conversationparticipant.ConversationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.ConversationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   conversationparticipant.ConversationTable,
			Columns: []string{conversationparticipant.ConversationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cpu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   conversationparticipant.UserTable,
			Columns: []string{conversationparticipant.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   conversationparticipant.UserTable,
			Columns: []string{conversationparticipant.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{conversationparticipant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cpu.mutation.done = true
	return n, nil
}

// ConversationParticipantUpdateOne is the builder for updating a single ConversationParticipant entity.
type ConversationParticipantUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConversationParticipantMutation
}

// SetCreatedAt sets the "created_at" field.
func (cpuo *ConversationParticipantUpdateOne) SetCreatedAt(t time.Time) *ConversationParticipantUpdateOne {
	cpuo.mutation.SetCreatedAt(t)
	return cpuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cpuo *ConversationParticipantUpdateOne) SetNillableCreatedAt(t *time.Time) *ConversationParticipantUpdateOne {
	if t != nil {
		cpuo.SetCreatedAt(*t)
	}
	return cpuo
}

// SetUpdatedAt sets the "updated_at" field.
func (cpuo *ConversationParticipantUpdateOne) SetUpdatedAt(t time.Time) *ConversationParticipantUpdateOne {
	cpuo.mutation.SetUpdatedAt(t)
	return cpuo
}

// SetConversationID sets the "conversation_id" field.
func (cpuo *ConversationParticipantUpdateOne) SetConversationID(s string) *ConversationParticipantUpdateOne {
	cpuo.mutation.SetConversationID(s)
	return cpuo
}

// SetNillableConversationID sets the "conversation_id" field if the given value is not nil.
func (cpuo *ConversationParticipantUpdateOne) SetNillableConversationID(s *string) *ConversationParticipantUpdateOne {
	if s != nil {
		cpuo.SetConversationID(*s)
	}
	return cpuo
}

// SetUserID sets the "user_id" field.
func (cpuo *ConversationParticipantUpdateOne) SetUserID(s string) *ConversationParticipantUpdateOne {
	cpuo.mutation.SetUserID(s)
	return cpuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (cpuo *ConversationParticipantUpdateOne) SetNillableUserID(s *string) *ConversationParticipantUpdateOne {
	if s != nil {
		cpuo.SetUserID(*s)
	}
	return cpuo
}

// SetJoinedAt sets the "joined_at" field.
func (cpuo *ConversationParticipantUpdateOne) SetJoinedAt(t time.Time) *ConversationParticipantUpdateOne {
	cpuo.mutation.SetJoinedAt(t)
	return cpuo
}

// SetNillableJoinedAt sets the "joined_at" field if the given value is not nil.
func (cpuo *ConversationParticipantUpdateOne) SetNillableJoinedAt(t *time.Time) *ConversationParticipantUpdateOne {
	if t != nil {
		cpuo.SetJoinedAt(*t)
	}
	return cpuo
}

// SetLastReadAt sets the "last_read_at" field.
func (cpuo *ConversationParticipantUpdateOne) SetLastReadAt(t time.Time) *ConversationParticipantUpdateOne {
	cpuo.mutation.SetLastReadAt(t)
	return cpuo
}

// SetNillableLastReadAt sets the "last_read_at" field if the given value is not nil.
func (cpuo *ConversationParticipantUpdateOne) SetNillableLastReadAt(t *time.Time) *ConversationParticipantUpdateOne {
	if t != nil {
		cpuo.SetLastReadAt(*t)
	}
	return cpuo
}

// ClearLastReadAt clears the value of the "last_read_at" field.
func (cpuo *ConversationParticipantUpdateOne) ClearLastReadAt() *ConversationParticipantUpdateOne {
	cpuo.mutation.ClearLastReadAt()
	return cpuo
}

// SetIsArchived sets the "is_archived" field.
func (cpuo *ConversationParticipantUpdateOne) SetIsArchived(b bool) *ConversationParticipantUpdateOne {
	cpuo.mutation.SetIsArchived(b)
	return cpuo
}

// SetNillableIsArchived sets the "is_archived" field if the given value is not nil.
func (cpuo *ConversationParticipantUpdateOne) SetNillableIsArchived(b *bool) *ConversationParticipantUpdateOne {
	if b != nil {
		cpuo.SetIsArchived(*b)
	}
	return cpuo
}

// SetIsMuted sets the "is_muted" field.
func (cpuo *ConversationParticipantUpdateOne) SetIsMuted(b bool) *ConversationParticipantUpdateOne {
	cpuo.mutation.SetIsMuted(b)
	return cpuo
}

// SetNillableIsMuted sets the "is_muted" field if the given value is not nil.
func (cpuo *ConversationParticipantUpdateOne) SetNillableIsMuted(b *bool) *ConversationParticipantUpdateOne {
	if b != nil {
		cpuo.SetIsMuted(*b)
	}
	return cpuo
}

// SetConversation sets the "conversation" edge to the Conversation entity.
func (cpuo *ConversationParticipantUpdateOne) SetConversation(c *Conversation) *ConversationParticipantUpdateOne {
	return cpuo.SetConversationID(c.ID)
}

// SetUser sets the "user" edge to the User entity.
func (cpuo *ConversationParticipantUpdateOne) SetUser(u *User) *ConversationParticipantUpdateOne {
	return cpuo.SetUserID(u.ID)
}

// Mutation returns the ConversationParticipantMutation object of the builder.
func (cpuo *ConversationParticipantUpdateOne) Mutation() *ConversationParticipantMutation {
	return cpuo.mutation
}

// ClearConversation clears the "conversation" edge to the Conversation entity.
func (cpuo *ConversationParticipantUpdateOne) ClearConversation() *ConversationParticipantUpdateOne {
	cpuo.mutation.ClearConversation()
	return cpuo
}

// ClearUser clears the "user" edge to the User entity.
func (cpuo *ConversationParticipantUpdateOne) ClearUser() *ConversationParticipantUpdateOne {
	cpuo.mutation.ClearUser()
	return cpuo
}

// Where appends a list predicates to the ConversationParticipantUpdate builder.
func (cpuo *ConversationParticipantUpdateOne) Where(ps ...predicate.ConversationParticipant) *ConversationParticipantUpdateOne {
	cpuo.mutation.Where(ps...)
	return cpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cpuo *ConversationParticipantUpdateOne) Select(field string, fields ...string) *ConversationParticipantUpdateOne {
	cpuo.fields = append([]string{field}, fields...)
	return cpuo
}

// Save executes the query and returns the updated ConversationParticipant entity.
func (cpuo *ConversationParticipantUpdateOne) Save(ctx context.Context) (*ConversationParticipant, error) {
	cpuo.defaults()
	return withHooks(ctx, cpuo.sqlSave, cpuo.mutation, cpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cpuo *ConversationParticipantUpdateOne) SaveX(ctx context.Context) *ConversationParticipant {
	node, err := cpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cpuo *ConversationParticipantUpdateOne) Exec(ctx context.Context) error {
	_, err := cpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpuo *ConversationParticipantUpdateOne) ExecX(ctx context.Context) {
	if err := cpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cpuo *ConversationParticipantUpdateOne) defaults() {
	if _, ok := cpuo.mutation.UpdatedAt(); !ok {
		v := conversationparticipant.UpdateDefaultUpdatedAt()
		cpuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpuo *ConversationParticipantUpdateOne) check() error {
	if v, ok := cpuo.mutation.ConversationID(); ok {
		if err := conversationparticipant.ConversationIDValidator(v); err != nil {
			return &ValidationError{Name: "conversation_id", err: fmt.Errorf(`ent: validator failed for field "ConversationParticipant.conversation_id": %w`, err)}
		}
	}
	if v, ok := cpuo.mutation.UserID(); ok {
		if err := conversationparticipant.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "ConversationParticipant.user_id": %w`, err)}
		}
	}
	if cpuo.mutation.ConversationCleared() && len(cpuo.mutation.ConversationIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ConversationParticipant.conversation"`)
	}
	if cpuo.mutation.UserCleared() && len(cpuo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ConversationParticipant.user"`)
	}
	return nil
}

func (cpuo *ConversationParticipantUpdateOne) sqlSave(ctx context.Context) (_node *ConversationParticipant, err error) {
	if err := cpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(conversationparticipant.Table, conversationparticipant.Columns, sqlgraph.NewFieldSpec(conversationparticipant.FieldID, field.TypeString))
	id, ok := cpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ConversationParticipant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, conversationparticipant.FieldID)
		for _, f := range fields {
			if !conversationparticipant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != conversationparticipant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cpuo.mutation.CreatedAt(); ok {
		_spec.SetField(conversationparticipant.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := cpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(conversationparticipant.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cpuo.mutation.JoinedAt(); ok {
		_spec.SetField(conversationparticipant.FieldJoinedAt, field.TypeTime, value)
	}
	if value, ok := cpuo.mutation.LastReadAt(); ok {
		_spec.SetField(conversationparticipant.FieldLastReadAt, field.TypeTime, value)
	}
	if cpuo.mutation.LastReadAtCleared() {
		_spec.ClearField(conversationparticipant.FieldLastReadAt, field.TypeTime)
	}
	if value, ok := cpuo.mutation.IsArchived(); ok {
		_spec.SetField(conversationparticipant.FieldIsArchived, field.TypeBool, value)
	}
	if value, ok := cpuo.mutation.IsMuted(); ok {
		_spec.SetField(conversationparticipant.FieldIsMuted, field.TypeBool, value)
	}
	if cpuo.mutation.ConversationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   conversationparticipant.ConversationTable,
			Columns: []string{conversationparticipant.ConversationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversation.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.ConversationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   conversationparticipant.ConversationTable,
			Columns: []string{conversationparticipant.ConversationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cpuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   conversationparticipant.UserTable,
			Columns: []string{conversationparticipant.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cpuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   conversationparticipant.UserTable,
			Columns: []string{conversationparticipant.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ConversationParticipant{config: cpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{conversationparticipant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cpuo.mutation.done = true
	return _node, nil
}
