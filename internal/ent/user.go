// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kakashi/chaos/internal/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"-"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Bio holds the value of the "bio" field.
	Bio string `json:"bio,omitempty"`
	// AvaterURL holds the value of the "avater_url" field.
	AvaterURL string `json:"avater_url,omitempty"`
	// CoverURL holds the value of the "cover_url" field.
	CoverURL string `json:"cover_url,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Sessions holds the value of the sessions edge.
	Sessions []*Session `json:"sessions,omitempty"`
	// OwnedGuilds holds the value of the owned_guilds edge.
	OwnedGuilds []*Guild `json:"owned_guilds,omitempty"`
	// Invitations holds the value of the invitations edge.
	Invitations []*Invitation `json:"invitations,omitempty"`
	// MemberOf holds the value of the member_of edge.
	MemberOf []*Member `json:"member_of,omitempty"`
	// FriendRequestsSent holds the value of the friend_requests_sent edge.
	FriendRequestsSent []*Friend `json:"friend_requests_sent,omitempty"`
	// FriendRequestsReceived holds the value of the friend_requests_received edge.
	FriendRequestsReceived []*Friend `json:"friend_requests_received,omitempty"`
	// SentMessages holds the value of the sent_messages edge.
	SentMessages []*Message `json:"sent_messages,omitempty"`
	// Notifications holds the value of the notifications edge.
	Notifications []*Notification `json:"notifications,omitempty"`
	// RelatedNotifications holds the value of the related_notifications edge.
	RelatedNotifications []*Notification `json:"related_notifications,omitempty"`
	// ConversationParticipations holds the value of the conversation_participations edge.
	ConversationParticipations []*ConversationParticipant `json:"conversation_participations,omitempty"`
	// BlockedUsers holds the value of the blocked_users edge.
	BlockedUsers []*Block `json:"blocked_users,omitempty"`
	// BlockedByUsers holds the value of the blocked_by_users edge.
	BlockedByUsers []*Block `json:"blocked_by_users,omitempty"`
	// CallsMade holds the value of the calls_made edge.
	CallsMade []*Call `json:"calls_made,omitempty"`
	// CallsReceived holds the value of the calls_received edge.
	CallsReceived []*Call `json:"calls_received,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [14]bool
}

// SessionsOrErr returns the Sessions value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SessionsOrErr() ([]*Session, error) {
	if e.loadedTypes[0] {
		return e.Sessions, nil
	}
	return nil, &NotLoadedError{edge: "sessions"}
}

// OwnedGuildsOrErr returns the OwnedGuilds value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) OwnedGuildsOrErr() ([]*Guild, error) {
	if e.loadedTypes[1] {
		return e.OwnedGuilds, nil
	}
	return nil, &NotLoadedError{edge: "owned_guilds"}
}

// InvitationsOrErr returns the Invitations value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) InvitationsOrErr() ([]*Invitation, error) {
	if e.loadedTypes[2] {
		return e.Invitations, nil
	}
	return nil, &NotLoadedError{edge: "invitations"}
}

// MemberOfOrErr returns the MemberOf value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) MemberOfOrErr() ([]*Member, error) {
	if e.loadedTypes[3] {
		return e.MemberOf, nil
	}
	return nil, &NotLoadedError{edge: "member_of"}
}

// FriendRequestsSentOrErr returns the FriendRequestsSent value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FriendRequestsSentOrErr() ([]*Friend, error) {
	if e.loadedTypes[4] {
		return e.FriendRequestsSent, nil
	}
	return nil, &NotLoadedError{edge: "friend_requests_sent"}
}

// FriendRequestsReceivedOrErr returns the FriendRequestsReceived value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) FriendRequestsReceivedOrErr() ([]*Friend, error) {
	if e.loadedTypes[5] {
		return e.FriendRequestsReceived, nil
	}
	return nil, &NotLoadedError{edge: "friend_requests_received"}
}

// SentMessagesOrErr returns the SentMessages value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SentMessagesOrErr() ([]*Message, error) {
	if e.loadedTypes[6] {
		return e.SentMessages, nil
	}
	return nil, &NotLoadedError{edge: "sent_messages"}
}

// NotificationsOrErr returns the Notifications value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) NotificationsOrErr() ([]*Notification, error) {
	if e.loadedTypes[7] {
		return e.Notifications, nil
	}
	return nil, &NotLoadedError{edge: "notifications"}
}

// RelatedNotificationsOrErr returns the RelatedNotifications value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) RelatedNotificationsOrErr() ([]*Notification, error) {
	if e.loadedTypes[8] {
		return e.RelatedNotifications, nil
	}
	return nil, &NotLoadedError{edge: "related_notifications"}
}

// ConversationParticipationsOrErr returns the ConversationParticipations value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) ConversationParticipationsOrErr() ([]*ConversationParticipant, error) {
	if e.loadedTypes[9] {
		return e.ConversationParticipations, nil
	}
	return nil, &NotLoadedError{edge: "conversation_participations"}
}

// BlockedUsersOrErr returns the BlockedUsers value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) BlockedUsersOrErr() ([]*Block, error) {
	if e.loadedTypes[10] {
		return e.BlockedUsers, nil
	}
	return nil, &NotLoadedError{edge: "blocked_users"}
}

// BlockedByUsersOrErr returns the BlockedByUsers value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) BlockedByUsersOrErr() ([]*Block, error) {
	if e.loadedTypes[11] {
		return e.BlockedByUsers, nil
	}
	return nil, &NotLoadedError{edge: "blocked_by_users"}
}

// CallsMadeOrErr returns the CallsMade value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CallsMadeOrErr() ([]*Call, error) {
	if e.loadedTypes[12] {
		return e.CallsMade, nil
	}
	return nil, &NotLoadedError{edge: "calls_made"}
}

// CallsReceivedOrErr returns the CallsReceived value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) CallsReceivedOrErr() ([]*Call, error) {
	if e.loadedTypes[13] {
		return e.CallsReceived, nil
	}
	return nil, &NotLoadedError{edge: "calls_received"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldID, user.FieldName, user.FieldEmail, user.FieldPassword, user.FieldUsername, user.FieldBio, user.FieldAvaterURL, user.FieldCoverURL:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				u.ID = value.String
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		case user.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				u.Name = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = value.String
			}
		case user.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				u.Username = value.String
			}
		case user.FieldBio:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bio", values[i])
			} else if value.Valid {
				u.Bio = value.String
			}
		case user.FieldAvaterURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avater_url", values[i])
			} else if value.Valid {
				u.AvaterURL = value.String
			}
		case user.FieldCoverURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cover_url", values[i])
			} else if value.Valid {
				u.CoverURL = value.String
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QuerySessions queries the "sessions" edge of the User entity.
func (u *User) QuerySessions() *SessionQuery {
	return NewUserClient(u.config).QuerySessions(u)
}

// QueryOwnedGuilds queries the "owned_guilds" edge of the User entity.
func (u *User) QueryOwnedGuilds() *GuildQuery {
	return NewUserClient(u.config).QueryOwnedGuilds(u)
}

// QueryInvitations queries the "invitations" edge of the User entity.
func (u *User) QueryInvitations() *InvitationQuery {
	return NewUserClient(u.config).QueryInvitations(u)
}

// QueryMemberOf queries the "member_of" edge of the User entity.
func (u *User) QueryMemberOf() *MemberQuery {
	return NewUserClient(u.config).QueryMemberOf(u)
}

// QueryFriendRequestsSent queries the "friend_requests_sent" edge of the User entity.
func (u *User) QueryFriendRequestsSent() *FriendQuery {
	return NewUserClient(u.config).QueryFriendRequestsSent(u)
}

// QueryFriendRequestsReceived queries the "friend_requests_received" edge of the User entity.
func (u *User) QueryFriendRequestsReceived() *FriendQuery {
	return NewUserClient(u.config).QueryFriendRequestsReceived(u)
}

// QuerySentMessages queries the "sent_messages" edge of the User entity.
func (u *User) QuerySentMessages() *MessageQuery {
	return NewUserClient(u.config).QuerySentMessages(u)
}

// QueryNotifications queries the "notifications" edge of the User entity.
func (u *User) QueryNotifications() *NotificationQuery {
	return NewUserClient(u.config).QueryNotifications(u)
}

// QueryRelatedNotifications queries the "related_notifications" edge of the User entity.
func (u *User) QueryRelatedNotifications() *NotificationQuery {
	return NewUserClient(u.config).QueryRelatedNotifications(u)
}

// QueryConversationParticipations queries the "conversation_participations" edge of the User entity.
func (u *User) QueryConversationParticipations() *ConversationParticipantQuery {
	return NewUserClient(u.config).QueryConversationParticipations(u)
}

// QueryBlockedUsers queries the "blocked_users" edge of the User entity.
func (u *User) QueryBlockedUsers() *BlockQuery {
	return NewUserClient(u.config).QueryBlockedUsers(u)
}

// QueryBlockedByUsers queries the "blocked_by_users" edge of the User entity.
func (u *User) QueryBlockedByUsers() *BlockQuery {
	return NewUserClient(u.config).QueryBlockedByUsers(u)
}

// QueryCallsMade queries the "calls_made" edge of the User entity.
func (u *User) QueryCallsMade() *CallQuery {
	return NewUserClient(u.config).QueryCallsMade(u)
}

// QueryCallsReceived queries the "calls_received" edge of the User entity.
func (u *User) QueryCallsReceived() *CallQuery {
	return NewUserClient(u.config).QueryCallsReceived(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("ent: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(u.Name)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("password=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(u.Username)
	builder.WriteString(", ")
	builder.WriteString("bio=")
	builder.WriteString(u.Bio)
	builder.WriteString(", ")
	builder.WriteString("avater_url=")
	builder.WriteString(u.AvaterURL)
	builder.WriteString(", ")
	builder.WriteString("cover_url=")
	builder.WriteString(u.CoverURL)
	builder.WriteByte(')')
	return builder.String()
}

// Users is a parsable slice of User.
type Users []*User
