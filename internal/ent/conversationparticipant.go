// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kakashi/chaos/internal/ent/conversation"
	"kakashi/chaos/internal/ent/conversationparticipant"
	"kakashi/chaos/internal/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ConversationParticipant is the model entity for the ConversationParticipant schema.
type ConversationParticipant struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ConversationID holds the value of the "conversation_id" field.
	ConversationID string `json:"conversation_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// JoinedAt holds the value of the "joined_at" field.
	JoinedAt time.Time `json:"joined_at,omitempty"`
	// LastReadAt holds the value of the "last_read_at" field.
	LastReadAt time.Time `json:"last_read_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ConversationParticipantQuery when eager-loading is set.
	Edges                     ConversationParticipantEdges `json:"edges"`
	conversation_participants *string
	selectValues              sql.SelectValues
}

// ConversationParticipantEdges holds the relations/edges for other nodes in the graph.
type ConversationParticipantEdges struct {
	// Conversation holds the value of the conversation edge.
	Conversation *Conversation `json:"conversation,omitempty"`
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ConversationOrErr returns the Conversation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ConversationParticipantEdges) ConversationOrErr() (*Conversation, error) {
	if e.Conversation != nil {
		return e.Conversation, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: conversation.Label}
	}
	return nil, &NotLoadedError{edge: "conversation"}
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ConversationParticipantEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ConversationParticipant) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case conversationparticipant.FieldID, conversationparticipant.FieldConversationID, conversationparticipant.FieldUserID:
			values[i] = new(sql.NullString)
		case conversationparticipant.FieldCreatedAt, conversationparticipant.FieldUpdatedAt, conversationparticipant.FieldJoinedAt, conversationparticipant.FieldLastReadAt:
			values[i] = new(sql.NullTime)
		case conversationparticipant.ForeignKeys[0]: // conversation_participants
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ConversationParticipant fields.
func (cp *ConversationParticipant) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case conversationparticipant.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				cp.ID = value.String
			}
		case conversationparticipant.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cp.CreatedAt = value.Time
			}
		case conversationparticipant.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cp.UpdatedAt = value.Time
			}
		case conversationparticipant.FieldConversationID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field conversation_id", values[i])
			} else if value.Valid {
				cp.ConversationID = value.String
			}
		case conversationparticipant.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				cp.UserID = value.String
			}
		case conversationparticipant.FieldJoinedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field joined_at", values[i])
			} else if value.Valid {
				cp.JoinedAt = value.Time
			}
		case conversationparticipant.FieldLastReadAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_read_at", values[i])
			} else if value.Valid {
				cp.LastReadAt = value.Time
			}
		case conversationparticipant.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field conversation_participants", values[i])
			} else if value.Valid {
				cp.conversation_participants = new(string)
				*cp.conversation_participants = value.String
			}
		default:
			cp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ConversationParticipant.
// This includes values selected through modifiers, order, etc.
func (cp *ConversationParticipant) Value(name string) (ent.Value, error) {
	return cp.selectValues.Get(name)
}

// QueryConversation queries the "conversation" edge of the ConversationParticipant entity.
func (cp *ConversationParticipant) QueryConversation() *ConversationQuery {
	return NewConversationParticipantClient(cp.config).QueryConversation(cp)
}

// QueryUser queries the "user" edge of the ConversationParticipant entity.
func (cp *ConversationParticipant) QueryUser() *UserQuery {
	return NewConversationParticipantClient(cp.config).QueryUser(cp)
}

// Update returns a builder for updating this ConversationParticipant.
// Note that you need to call ConversationParticipant.Unwrap() before calling this method if this ConversationParticipant
// was returned from a transaction, and the transaction was committed or rolled back.
func (cp *ConversationParticipant) Update() *ConversationParticipantUpdateOne {
	return NewConversationParticipantClient(cp.config).UpdateOne(cp)
}

// Unwrap unwraps the ConversationParticipant entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cp *ConversationParticipant) Unwrap() *ConversationParticipant {
	_tx, ok := cp.config.driver.(*txDriver)
	if !ok {
		panic("ent: ConversationParticipant is not a transactional entity")
	}
	cp.config.driver = _tx.drv
	return cp
}

// String implements the fmt.Stringer.
func (cp *ConversationParticipant) String() string {
	var builder strings.Builder
	builder.WriteString("ConversationParticipant(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(cp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("conversation_id=")
	builder.WriteString(cp.ConversationID)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(cp.UserID)
	builder.WriteString(", ")
	builder.WriteString("joined_at=")
	builder.WriteString(cp.JoinedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_read_at=")
	builder.WriteString(cp.LastReadAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ConversationParticipants is a parsable slice of ConversationParticipant.
type ConversationParticipants []*ConversationParticipant
