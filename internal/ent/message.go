// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kakashi/chaos/internal/ent/call"
	"kakashi/chaos/internal/ent/conversation"
	"kakashi/chaos/internal/ent/message"
	"kakashi/chaos/internal/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Message is the model entity for the Message schema.
type Message struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// ConversationID holds the value of the "conversation_id" field.
	ConversationID string `json:"conversation_id,omitempty"`
	// SenderID holds the value of the "sender_id" field.
	SenderID string `json:"sender_id,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// MessageType holds the value of the "message_type" field.
	MessageType message.MessageType `json:"message_type,omitempty"`
	// IsDeleted holds the value of the "is_deleted" field.
	IsDeleted bool `json:"is_deleted,omitempty"`
	// EditedAt holds the value of the "edited_at" field.
	EditedAt time.Time `json:"edited_at,omitempty"`
	// Reference to call for call_start and call_end messages
	CallID string `json:"call_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MessageQuery when eager-loading is set.
	Edges                 MessageEdges `json:"edges"`
	conversation_messages *string
	selectValues          sql.SelectValues
}

// MessageEdges holds the relations/edges for other nodes in the graph.
type MessageEdges struct {
	// Conversation holds the value of the conversation edge.
	Conversation *Conversation `json:"conversation,omitempty"`
	// Sender holds the value of the sender edge.
	Sender *User `json:"sender,omitempty"`
	// Call holds the value of the call edge.
	Call *Call `json:"call,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ConversationOrErr returns the Conversation value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) ConversationOrErr() (*Conversation, error) {
	if e.Conversation != nil {
		return e.Conversation, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: conversation.Label}
	}
	return nil, &NotLoadedError{edge: "conversation"}
}

// SenderOrErr returns the Sender value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) SenderOrErr() (*User, error) {
	if e.Sender != nil {
		return e.Sender, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "sender"}
}

// CallOrErr returns the Call value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MessageEdges) CallOrErr() (*Call, error) {
	if e.Call != nil {
		return e.Call, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: call.Label}
	}
	return nil, &NotLoadedError{edge: "call"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Message) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case message.FieldIsDeleted:
			values[i] = new(sql.NullBool)
		case message.FieldID, message.FieldConversationID, message.FieldSenderID, message.FieldContent, message.FieldMessageType, message.FieldCallID:
			values[i] = new(sql.NullString)
		case message.FieldCreatedAt, message.FieldUpdatedAt, message.FieldEditedAt:
			values[i] = new(sql.NullTime)
		case message.ForeignKeys[0]: // conversation_messages
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Message fields.
func (m *Message) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case message.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				m.ID = value.String
			}
		case message.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				m.CreatedAt = value.Time
			}
		case message.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				m.UpdatedAt = value.Time
			}
		case message.FieldConversationID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field conversation_id", values[i])
			} else if value.Valid {
				m.ConversationID = value.String
			}
		case message.FieldSenderID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sender_id", values[i])
			} else if value.Valid {
				m.SenderID = value.String
			}
		case message.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				m.Content = value.String
			}
		case message.FieldMessageType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message_type", values[i])
			} else if value.Valid {
				m.MessageType = message.MessageType(value.String)
			}
		case message.FieldIsDeleted:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_deleted", values[i])
			} else if value.Valid {
				m.IsDeleted = value.Bool
			}
		case message.FieldEditedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field edited_at", values[i])
			} else if value.Valid {
				m.EditedAt = value.Time
			}
		case message.FieldCallID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field call_id", values[i])
			} else if value.Valid {
				m.CallID = value.String
			}
		case message.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field conversation_messages", values[i])
			} else if value.Valid {
				m.conversation_messages = new(string)
				*m.conversation_messages = value.String
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Message.
// This includes values selected through modifiers, order, etc.
func (m *Message) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryConversation queries the "conversation" edge of the Message entity.
func (m *Message) QueryConversation() *ConversationQuery {
	return NewMessageClient(m.config).QueryConversation(m)
}

// QuerySender queries the "sender" edge of the Message entity.
func (m *Message) QuerySender() *UserQuery {
	return NewMessageClient(m.config).QuerySender(m)
}

// QueryCall queries the "call" edge of the Message entity.
func (m *Message) QueryCall() *CallQuery {
	return NewMessageClient(m.config).QueryCall(m)
}

// Update returns a builder for updating this Message.
// Note that you need to call Message.Unwrap() before calling this method if this Message
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Message) Update() *MessageUpdateOne {
	return NewMessageClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Message entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Message) Unwrap() *Message {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Message is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Message) String() string {
	var builder strings.Builder
	builder.WriteString("Message(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("conversation_id=")
	builder.WriteString(m.ConversationID)
	builder.WriteString(", ")
	builder.WriteString("sender_id=")
	builder.WriteString(m.SenderID)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(m.Content)
	builder.WriteString(", ")
	builder.WriteString("message_type=")
	builder.WriteString(fmt.Sprintf("%v", m.MessageType))
	builder.WriteString(", ")
	builder.WriteString("is_deleted=")
	builder.WriteString(fmt.Sprintf("%v", m.IsDeleted))
	builder.WriteString(", ")
	builder.WriteString("edited_at=")
	builder.WriteString(m.EditedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("call_id=")
	builder.WriteString(m.CallID)
	builder.WriteByte(')')
	return builder.String()
}

// Messages is a parsable slice of Message.
type Messages []*Message
