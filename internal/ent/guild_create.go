// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kakashi/chaos/internal/ent/guild"
	"kakashi/chaos/internal/ent/invitation"
	"kakashi/chaos/internal/ent/member"
	"kakashi/chaos/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GuildCreate is the builder for creating a Guild entity.
type GuildCreate struct {
	config
	mutation *GuildMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (gc *GuildCreate) SetCreatedAt(t time.Time) *GuildCreate {
	gc.mutation.SetCreatedAt(t)
	return gc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gc *GuildCreate) SetNillableCreatedAt(t *time.Time) *GuildCreate {
	if t != nil {
		gc.SetCreatedAt(*t)
	}
	return gc
}

// SetUpdatedAt sets the "updated_at" field.
func (gc *GuildCreate) SetUpdatedAt(t time.Time) *GuildCreate {
	gc.mutation.SetUpdatedAt(t)
	return gc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gc *GuildCreate) SetNillableUpdatedAt(t *time.Time) *GuildCreate {
	if t != nil {
		gc.SetUpdatedAt(*t)
	}
	return gc
}

// SetName sets the "name" field.
func (gc *GuildCreate) SetName(s string) *GuildCreate {
	gc.mutation.SetName(s)
	return gc
}

// SetGuildIcon sets the "guild_icon" field.
func (gc *GuildCreate) SetGuildIcon(s string) *GuildCreate {
	gc.mutation.SetGuildIcon(s)
	return gc
}

// SetNillableGuildIcon sets the "guild_icon" field if the given value is not nil.
func (gc *GuildCreate) SetNillableGuildIcon(s *string) *GuildCreate {
	if s != nil {
		gc.SetGuildIcon(*s)
	}
	return gc
}

// SetDescription sets the "description" field.
func (gc *GuildCreate) SetDescription(s string) *GuildCreate {
	gc.mutation.SetDescription(s)
	return gc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (gc *GuildCreate) SetNillableDescription(s *string) *GuildCreate {
	if s != nil {
		gc.SetDescription(*s)
	}
	return gc
}

// SetGuildCover sets the "guild_cover" field.
func (gc *GuildCreate) SetGuildCover(s string) *GuildCreate {
	gc.mutation.SetGuildCover(s)
	return gc
}

// SetNillableGuildCover sets the "guild_cover" field if the given value is not nil.
func (gc *GuildCreate) SetNillableGuildCover(s *string) *GuildCreate {
	if s != nil {
		gc.SetGuildCover(*s)
	}
	return gc
}

// SetID sets the "id" field.
func (gc *GuildCreate) SetID(s string) *GuildCreate {
	gc.mutation.SetID(s)
	return gc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (gc *GuildCreate) SetNillableID(s *string) *GuildCreate {
	if s != nil {
		gc.SetID(*s)
	}
	return gc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (gc *GuildCreate) SetOwnerID(id string) *GuildCreate {
	gc.mutation.SetOwnerID(id)
	return gc
}

// SetOwner sets the "owner" edge to the User entity.
func (gc *GuildCreate) SetOwner(u *User) *GuildCreate {
	return gc.SetOwnerID(u.ID)
}

// AddInvitationIDs adds the "invitations" edge to the Invitation entity by IDs.
func (gc *GuildCreate) AddInvitationIDs(ids ...string) *GuildCreate {
	gc.mutation.AddInvitationIDs(ids...)
	return gc
}

// AddInvitations adds the "invitations" edges to the Invitation entity.
func (gc *GuildCreate) AddInvitations(i ...*Invitation) *GuildCreate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return gc.AddInvitationIDs(ids...)
}

// AddGuildMemberIDs adds the "guild_members" edge to the Member entity by IDs.
func (gc *GuildCreate) AddGuildMemberIDs(ids ...string) *GuildCreate {
	gc.mutation.AddGuildMemberIDs(ids...)
	return gc
}

// AddGuildMembers adds the "guild_members" edges to the Member entity.
func (gc *GuildCreate) AddGuildMembers(m ...*Member) *GuildCreate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return gc.AddGuildMemberIDs(ids...)
}

// Mutation returns the GuildMutation object of the builder.
func (gc *GuildCreate) Mutation() *GuildMutation {
	return gc.mutation
}

// Save creates the Guild in the database.
func (gc *GuildCreate) Save(ctx context.Context) (*Guild, error) {
	gc.defaults()
	return withHooks(ctx, gc.sqlSave, gc.mutation, gc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GuildCreate) SaveX(ctx context.Context) *Guild {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GuildCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GuildCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gc *GuildCreate) defaults() {
	if _, ok := gc.mutation.CreatedAt(); !ok {
		v := guild.DefaultCreatedAt()
		gc.mutation.SetCreatedAt(v)
	}
	if _, ok := gc.mutation.UpdatedAt(); !ok {
		v := guild.DefaultUpdatedAt()
		gc.mutation.SetUpdatedAt(v)
	}
	if _, ok := gc.mutation.ID(); !ok {
		v := guild.DefaultID()
		gc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gc *GuildCreate) check() error {
	if _, ok := gc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Guild.created_at"`)}
	}
	if _, ok := gc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Guild.updated_at"`)}
	}
	if _, ok := gc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Guild.name"`)}
	}
	if v, ok := gc.mutation.Name(); ok {
		if err := guild.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Guild.name": %w`, err)}
		}
	}
	if len(gc.mutation.OwnerIDs()) == 0 {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "Guild.owner"`)}
	}
	return nil
}

func (gc *GuildCreate) sqlSave(ctx context.Context) (*Guild, error) {
	if err := gc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Guild.ID type: %T", _spec.ID.Value)
		}
	}
	gc.mutation.id = &_node.ID
	gc.mutation.done = true
	return _node, nil
}

func (gc *GuildCreate) createSpec() (*Guild, *sqlgraph.CreateSpec) {
	var (
		_node = &Guild{config: gc.config}
		_spec = sqlgraph.NewCreateSpec(guild.Table, sqlgraph.NewFieldSpec(guild.FieldID, field.TypeString))
	)
	if id, ok := gc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gc.mutation.CreatedAt(); ok {
		_spec.SetField(guild.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := gc.mutation.UpdatedAt(); ok {
		_spec.SetField(guild.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := gc.mutation.Name(); ok {
		_spec.SetField(guild.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := gc.mutation.GuildIcon(); ok {
		_spec.SetField(guild.FieldGuildIcon, field.TypeString, value)
		_node.GuildIcon = value
	}
	if value, ok := gc.mutation.Description(); ok {
		_spec.SetField(guild.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := gc.mutation.GuildCover(); ok {
		_spec.SetField(guild.FieldGuildCover, field.TypeString, value)
		_node.GuildCover = value
	}
	if nodes := gc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   guild.OwnerTable,
			Columns: []string{guild.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_owned_guilds = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.InvitationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   guild.InvitationsTable,
			Columns: []string{guild.InvitationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(invitation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.GuildMembersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   guild.GuildMembersTable,
			Columns: []string{guild.GuildMembersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(member.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GuildCreateBulk is the builder for creating many Guild entities in bulk.
type GuildCreateBulk struct {
	config
	err      error
	builders []*GuildCreate
}

// Save creates the Guild entities in the database.
func (gcb *GuildCreateBulk) Save(ctx context.Context) ([]*Guild, error) {
	if gcb.err != nil {
		return nil, gcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Guild, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GuildMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GuildCreateBulk) SaveX(ctx context.Context) []*Guild {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GuildCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GuildCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}
