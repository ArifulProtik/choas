// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kakashi/chaos/internal/ent/conversation"
	"kakashi/chaos/internal/ent/conversationparticipant"
	"kakashi/chaos/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConversationParticipantCreate is the builder for creating a ConversationParticipant entity.
type ConversationParticipantCreate struct {
	config
	mutation *ConversationParticipantMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (cpc *ConversationParticipantCreate) SetCreatedAt(t time.Time) *ConversationParticipantCreate {
	cpc.mutation.SetCreatedAt(t)
	return cpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cpc *ConversationParticipantCreate) SetNillableCreatedAt(t *time.Time) *ConversationParticipantCreate {
	if t != nil {
		cpc.SetCreatedAt(*t)
	}
	return cpc
}

// SetUpdatedAt sets the "updated_at" field.
func (cpc *ConversationParticipantCreate) SetUpdatedAt(t time.Time) *ConversationParticipantCreate {
	cpc.mutation.SetUpdatedAt(t)
	return cpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cpc *ConversationParticipantCreate) SetNillableUpdatedAt(t *time.Time) *ConversationParticipantCreate {
	if t != nil {
		cpc.SetUpdatedAt(*t)
	}
	return cpc
}

// SetConversationID sets the "conversation_id" field.
func (cpc *ConversationParticipantCreate) SetConversationID(s string) *ConversationParticipantCreate {
	cpc.mutation.SetConversationID(s)
	return cpc
}

// SetUserID sets the "user_id" field.
func (cpc *ConversationParticipantCreate) SetUserID(s string) *ConversationParticipantCreate {
	cpc.mutation.SetUserID(s)
	return cpc
}

// SetJoinedAt sets the "joined_at" field.
func (cpc *ConversationParticipantCreate) SetJoinedAt(t time.Time) *ConversationParticipantCreate {
	cpc.mutation.SetJoinedAt(t)
	return cpc
}

// SetNillableJoinedAt sets the "joined_at" field if the given value is not nil.
func (cpc *ConversationParticipantCreate) SetNillableJoinedAt(t *time.Time) *ConversationParticipantCreate {
	if t != nil {
		cpc.SetJoinedAt(*t)
	}
	return cpc
}

// SetLastReadAt sets the "last_read_at" field.
func (cpc *ConversationParticipantCreate) SetLastReadAt(t time.Time) *ConversationParticipantCreate {
	cpc.mutation.SetLastReadAt(t)
	return cpc
}

// SetNillableLastReadAt sets the "last_read_at" field if the given value is not nil.
func (cpc *ConversationParticipantCreate) SetNillableLastReadAt(t *time.Time) *ConversationParticipantCreate {
	if t != nil {
		cpc.SetLastReadAt(*t)
	}
	return cpc
}

// SetIsArchived sets the "is_archived" field.
func (cpc *ConversationParticipantCreate) SetIsArchived(b bool) *ConversationParticipantCreate {
	cpc.mutation.SetIsArchived(b)
	return cpc
}

// SetNillableIsArchived sets the "is_archived" field if the given value is not nil.
func (cpc *ConversationParticipantCreate) SetNillableIsArchived(b *bool) *ConversationParticipantCreate {
	if b != nil {
		cpc.SetIsArchived(*b)
	}
	return cpc
}

// SetIsMuted sets the "is_muted" field.
func (cpc *ConversationParticipantCreate) SetIsMuted(b bool) *ConversationParticipantCreate {
	cpc.mutation.SetIsMuted(b)
	return cpc
}

// SetNillableIsMuted sets the "is_muted" field if the given value is not nil.
func (cpc *ConversationParticipantCreate) SetNillableIsMuted(b *bool) *ConversationParticipantCreate {
	if b != nil {
		cpc.SetIsMuted(*b)
	}
	return cpc
}

// SetID sets the "id" field.
func (cpc *ConversationParticipantCreate) SetID(s string) *ConversationParticipantCreate {
	cpc.mutation.SetID(s)
	return cpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (cpc *ConversationParticipantCreate) SetNillableID(s *string) *ConversationParticipantCreate {
	if s != nil {
		cpc.SetID(*s)
	}
	return cpc
}

// SetConversation sets the "conversation" edge to the Conversation entity.
func (cpc *ConversationParticipantCreate) SetConversation(c *Conversation) *ConversationParticipantCreate {
	return cpc.SetConversationID(c.ID)
}

// SetUser sets the "user" edge to the User entity.
func (cpc *ConversationParticipantCreate) SetUser(u *User) *ConversationParticipantCreate {
	return cpc.SetUserID(u.ID)
}

// Mutation returns the ConversationParticipantMutation object of the builder.
func (cpc *ConversationParticipantCreate) Mutation() *ConversationParticipantMutation {
	return cpc.mutation
}

// Save creates the ConversationParticipant in the database.
func (cpc *ConversationParticipantCreate) Save(ctx context.Context) (*ConversationParticipant, error) {
	cpc.defaults()
	return withHooks(ctx, cpc.sqlSave, cpc.mutation, cpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cpc *ConversationParticipantCreate) SaveX(ctx context.Context) *ConversationParticipant {
	v, err := cpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpc *ConversationParticipantCreate) Exec(ctx context.Context) error {
	_, err := cpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpc *ConversationParticipantCreate) ExecX(ctx context.Context) {
	if err := cpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cpc *ConversationParticipantCreate) defaults() {
	if _, ok := cpc.mutation.CreatedAt(); !ok {
		v := conversationparticipant.DefaultCreatedAt()
		cpc.mutation.SetCreatedAt(v)
	}
	if _, ok := cpc.mutation.UpdatedAt(); !ok {
		v := conversationparticipant.DefaultUpdatedAt()
		cpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cpc.mutation.JoinedAt(); !ok {
		v := conversationparticipant.DefaultJoinedAt()
		cpc.mutation.SetJoinedAt(v)
	}
	if _, ok := cpc.mutation.IsArchived(); !ok {
		v := conversationparticipant.DefaultIsArchived
		cpc.mutation.SetIsArchived(v)
	}
	if _, ok := cpc.mutation.IsMuted(); !ok {
		v := conversationparticipant.DefaultIsMuted
		cpc.mutation.SetIsMuted(v)
	}
	if _, ok := cpc.mutation.ID(); !ok {
		v := conversationparticipant.DefaultID()
		cpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cpc *ConversationParticipantCreate) check() error {
	if _, ok := cpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "ConversationParticipant.created_at"`)}
	}
	if _, ok := cpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ConversationParticipant.updated_at"`)}
	}
	if _, ok := cpc.mutation.ConversationID(); !ok {
		return &ValidationError{Name: "conversation_id", err: errors.New(`ent: missing required field "ConversationParticipant.conversation_id"`)}
	}
	if v, ok := cpc.mutation.ConversationID(); ok {
		if err := conversationparticipant.ConversationIDValidator(v); err != nil {
			return &ValidationError{Name: "conversation_id", err: fmt.Errorf(`ent: validator failed for field "ConversationParticipant.conversation_id": %w`, err)}
		}
	}
	if _, ok := cpc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "ConversationParticipant.user_id"`)}
	}
	if v, ok := cpc.mutation.UserID(); ok {
		if err := conversationparticipant.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`ent: validator failed for field "ConversationParticipant.user_id": %w`, err)}
		}
	}
	if _, ok := cpc.mutation.JoinedAt(); !ok {
		return &ValidationError{Name: "joined_at", err: errors.New(`ent: missing required field "ConversationParticipant.joined_at"`)}
	}
	if _, ok := cpc.mutation.IsArchived(); !ok {
		return &ValidationError{Name: "is_archived", err: errors.New(`ent: missing required field "ConversationParticipant.is_archived"`)}
	}
	if _, ok := cpc.mutation.IsMuted(); !ok {
		return &ValidationError{Name: "is_muted", err: errors.New(`ent: missing required field "ConversationParticipant.is_muted"`)}
	}
	if len(cpc.mutation.ConversationIDs()) == 0 {
		return &ValidationError{Name: "conversation", err: errors.New(`ent: missing required edge "ConversationParticipant.conversation"`)}
	}
	if len(cpc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "ConversationParticipant.user"`)}
	}
	return nil
}

func (cpc *ConversationParticipantCreate) sqlSave(ctx context.Context) (*ConversationParticipant, error) {
	if err := cpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected ConversationParticipant.ID type: %T", _spec.ID.Value)
		}
	}
	cpc.mutation.id = &_node.ID
	cpc.mutation.done = true
	return _node, nil
}

func (cpc *ConversationParticipantCreate) createSpec() (*ConversationParticipant, *sqlgraph.CreateSpec) {
	var (
		_node = &ConversationParticipant{config: cpc.config}
		_spec = sqlgraph.NewCreateSpec(conversationparticipant.Table, sqlgraph.NewFieldSpec(conversationparticipant.FieldID, field.TypeString))
	)
	if id, ok := cpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cpc.mutation.CreatedAt(); ok {
		_spec.SetField(conversationparticipant.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cpc.mutation.UpdatedAt(); ok {
		_spec.SetField(conversationparticipant.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cpc.mutation.JoinedAt(); ok {
		_spec.SetField(conversationparticipant.FieldJoinedAt, field.TypeTime, value)
		_node.JoinedAt = value
	}
	if value, ok := cpc.mutation.LastReadAt(); ok {
		_spec.SetField(conversationparticipant.FieldLastReadAt, field.TypeTime, value)
		_node.LastReadAt = value
	}
	if value, ok := cpc.mutation.IsArchived(); ok {
		_spec.SetField(conversationparticipant.FieldIsArchived, field.TypeBool, value)
		_node.IsArchived = value
	}
	if value, ok := cpc.mutation.IsMuted(); ok {
		_spec.SetField(conversationparticipant.FieldIsMuted, field.TypeBool, value)
		_node.IsMuted = value
	}
	if nodes := cpc.mutation.ConversationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   conversationparticipant.ConversationTable,
			Columns: []string{conversationparticipant.ConversationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(conversation.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ConversationID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cpc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   conversationparticipant.UserTable,
			Columns: []string{conversationparticipant.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ConversationParticipantCreateBulk is the builder for creating many ConversationParticipant entities in bulk.
type ConversationParticipantCreateBulk struct {
	config
	err      error
	builders []*ConversationParticipantCreate
}

// Save creates the ConversationParticipant entities in the database.
func (cpcb *ConversationParticipantCreateBulk) Save(ctx context.Context) ([]*ConversationParticipant, error) {
	if cpcb.err != nil {
		return nil, cpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cpcb.builders))
	nodes := make([]*ConversationParticipant, len(cpcb.builders))
	mutators := make([]Mutator, len(cpcb.builders))
	for i := range cpcb.builders {
		func(i int, root context.Context) {
			builder := cpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConversationParticipantMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cpcb *ConversationParticipantCreateBulk) SaveX(ctx context.Context) []*ConversationParticipant {
	v, err := cpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cpcb *ConversationParticipantCreateBulk) Exec(ctx context.Context) error {
	_, err := cpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cpcb *ConversationParticipantCreateBulk) ExecX(ctx context.Context) {
	if err := cpcb.Exec(ctx); err != nil {
		panic(err)
	}
}
