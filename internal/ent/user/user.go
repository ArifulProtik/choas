// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldBio holds the string denoting the bio field in the database.
	FieldBio = "bio"
	// FieldAvaterURL holds the string denoting the avater_url field in the database.
	FieldAvaterURL = "avater_url"
	// FieldCoverURL holds the string denoting the cover_url field in the database.
	FieldCoverURL = "cover_url"
	// EdgeSessions holds the string denoting the sessions edge name in mutations.
	EdgeSessions = "sessions"
	// EdgeOwnedGuilds holds the string denoting the owned_guilds edge name in mutations.
	EdgeOwnedGuilds = "owned_guilds"
	// EdgeInvitations holds the string denoting the invitations edge name in mutations.
	EdgeInvitations = "invitations"
	// EdgeMemberOf holds the string denoting the member_of edge name in mutations.
	EdgeMemberOf = "member_of"
	// EdgeFriendRequestsSent holds the string denoting the friend_requests_sent edge name in mutations.
	EdgeFriendRequestsSent = "friend_requests_sent"
	// EdgeFriendRequestsReceived holds the string denoting the friend_requests_received edge name in mutations.
	EdgeFriendRequestsReceived = "friend_requests_received"
	// EdgeSentMessages holds the string denoting the sent_messages edge name in mutations.
	EdgeSentMessages = "sent_messages"
	// EdgeNotifications holds the string denoting the notifications edge name in mutations.
	EdgeNotifications = "notifications"
	// EdgeRelatedNotifications holds the string denoting the related_notifications edge name in mutations.
	EdgeRelatedNotifications = "related_notifications"
	// EdgeConversationParticipations holds the string denoting the conversation_participations edge name in mutations.
	EdgeConversationParticipations = "conversation_participations"
	// EdgeBlockedUsers holds the string denoting the blocked_users edge name in mutations.
	EdgeBlockedUsers = "blocked_users"
	// EdgeBlockedByUsers holds the string denoting the blocked_by_users edge name in mutations.
	EdgeBlockedByUsers = "blocked_by_users"
	// EdgeCallsMade holds the string denoting the calls_made edge name in mutations.
	EdgeCallsMade = "calls_made"
	// EdgeCallsReceived holds the string denoting the calls_received edge name in mutations.
	EdgeCallsReceived = "calls_received"
	// Table holds the table name of the user in the database.
	Table = "users"
	// SessionsTable is the table that holds the sessions relation/edge.
	SessionsTable = "sessions"
	// SessionsInverseTable is the table name for the Session entity.
	// It exists in this package in order to avoid circular dependency with the "session" package.
	SessionsInverseTable = "sessions"
	// SessionsColumn is the table column denoting the sessions relation/edge.
	SessionsColumn = "user_sessions"
	// OwnedGuildsTable is the table that holds the owned_guilds relation/edge.
	OwnedGuildsTable = "guilds"
	// OwnedGuildsInverseTable is the table name for the Guild entity.
	// It exists in this package in order to avoid circular dependency with the "guild" package.
	OwnedGuildsInverseTable = "guilds"
	// OwnedGuildsColumn is the table column denoting the owned_guilds relation/edge.
	OwnedGuildsColumn = "user_owned_guilds"
	// InvitationsTable is the table that holds the invitations relation/edge.
	InvitationsTable = "invitations"
	// InvitationsInverseTable is the table name for the Invitation entity.
	// It exists in this package in order to avoid circular dependency with the "invitation" package.
	InvitationsInverseTable = "invitations"
	// InvitationsColumn is the table column denoting the invitations relation/edge.
	InvitationsColumn = "invitation_invited_by"
	// MemberOfTable is the table that holds the member_of relation/edge.
	MemberOfTable = "members"
	// MemberOfInverseTable is the table name for the Member entity.
	// It exists in this package in order to avoid circular dependency with the "member" package.
	MemberOfInverseTable = "members"
	// MemberOfColumn is the table column denoting the member_of relation/edge.
	MemberOfColumn = "user_member_of"
	// FriendRequestsSentTable is the table that holds the friend_requests_sent relation/edge.
	FriendRequestsSentTable = "friends"
	// FriendRequestsSentInverseTable is the table name for the Friend entity.
	// It exists in this package in order to avoid circular dependency with the "friend" package.
	FriendRequestsSentInverseTable = "friends"
	// FriendRequestsSentColumn is the table column denoting the friend_requests_sent relation/edge.
	FriendRequestsSentColumn = "requester_id"
	// FriendRequestsReceivedTable is the table that holds the friend_requests_received relation/edge.
	FriendRequestsReceivedTable = "friends"
	// FriendRequestsReceivedInverseTable is the table name for the Friend entity.
	// It exists in this package in order to avoid circular dependency with the "friend" package.
	FriendRequestsReceivedInverseTable = "friends"
	// FriendRequestsReceivedColumn is the table column denoting the friend_requests_received relation/edge.
	FriendRequestsReceivedColumn = "addressee_id"
	// SentMessagesTable is the table that holds the sent_messages relation/edge.
	SentMessagesTable = "messages"
	// SentMessagesInverseTable is the table name for the Message entity.
	// It exists in this package in order to avoid circular dependency with the "message" package.
	SentMessagesInverseTable = "messages"
	// SentMessagesColumn is the table column denoting the sent_messages relation/edge.
	SentMessagesColumn = "sender_id"
	// NotificationsTable is the table that holds the notifications relation/edge.
	NotificationsTable = "notifications"
	// NotificationsInverseTable is the table name for the Notification entity.
	// It exists in this package in order to avoid circular dependency with the "notification" package.
	NotificationsInverseTable = "notifications"
	// NotificationsColumn is the table column denoting the notifications relation/edge.
	NotificationsColumn = "user_id"
	// RelatedNotificationsTable is the table that holds the related_notifications relation/edge.
	RelatedNotificationsTable = "notifications"
	// RelatedNotificationsInverseTable is the table name for the Notification entity.
	// It exists in this package in order to avoid circular dependency with the "notification" package.
	RelatedNotificationsInverseTable = "notifications"
	// RelatedNotificationsColumn is the table column denoting the related_notifications relation/edge.
	RelatedNotificationsColumn = "related_user_id"
	// ConversationParticipationsTable is the table that holds the conversation_participations relation/edge.
	ConversationParticipationsTable = "conversation_participants"
	// ConversationParticipationsInverseTable is the table name for the ConversationParticipant entity.
	// It exists in this package in order to avoid circular dependency with the "conversationparticipant" package.
	ConversationParticipationsInverseTable = "conversation_participants"
	// ConversationParticipationsColumn is the table column denoting the conversation_participations relation/edge.
	ConversationParticipationsColumn = "user_id"
	// BlockedUsersTable is the table that holds the blocked_users relation/edge.
	BlockedUsersTable = "blocks"
	// BlockedUsersInverseTable is the table name for the Block entity.
	// It exists in this package in order to avoid circular dependency with the "block" package.
	BlockedUsersInverseTable = "blocks"
	// BlockedUsersColumn is the table column denoting the blocked_users relation/edge.
	BlockedUsersColumn = "blocker_id"
	// BlockedByUsersTable is the table that holds the blocked_by_users relation/edge.
	BlockedByUsersTable = "blocks"
	// BlockedByUsersInverseTable is the table name for the Block entity.
	// It exists in this package in order to avoid circular dependency with the "block" package.
	BlockedByUsersInverseTable = "blocks"
	// BlockedByUsersColumn is the table column denoting the blocked_by_users relation/edge.
	BlockedByUsersColumn = "blocked_id"
	// CallsMadeTable is the table that holds the calls_made relation/edge.
	CallsMadeTable = "calls"
	// CallsMadeInverseTable is the table name for the Call entity.
	// It exists in this package in order to avoid circular dependency with the "call" package.
	CallsMadeInverseTable = "calls"
	// CallsMadeColumn is the table column denoting the calls_made relation/edge.
	CallsMadeColumn = "caller_id"
	// CallsReceivedTable is the table that holds the calls_received relation/edge.
	CallsReceivedTable = "calls"
	// CallsReceivedInverseTable is the table name for the Call entity.
	// It exists in this package in order to avoid circular dependency with the "call" package.
	CallsReceivedInverseTable = "calls"
	// CallsReceivedColumn is the table column denoting the calls_received relation/edge.
	CallsReceivedColumn = "callee_id"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldEmail,
	FieldPassword,
	FieldUsername,
	FieldBio,
	FieldAvaterURL,
	FieldCoverURL,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	UsernameValidator func(string) error
	// BioValidator is a validator for the "bio" field. It is called by the builders before save.
	BioValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByBio orders the results by the bio field.
func ByBio(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBio, opts...).ToFunc()
}

// ByAvaterURL orders the results by the avater_url field.
func ByAvaterURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvaterURL, opts...).ToFunc()
}

// ByCoverURL orders the results by the cover_url field.
func ByCoverURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCoverURL, opts...).ToFunc()
}

// BySessionsCount orders the results by sessions count.
func BySessionsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSessionsStep(), opts...)
	}
}

// BySessions orders the results by sessions terms.
func BySessions(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSessionsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByOwnedGuildsCount orders the results by owned_guilds count.
func ByOwnedGuildsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOwnedGuildsStep(), opts...)
	}
}

// ByOwnedGuilds orders the results by owned_guilds terms.
func ByOwnedGuilds(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnedGuildsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByInvitationsCount orders the results by invitations count.
func ByInvitationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newInvitationsStep(), opts...)
	}
}

// ByInvitations orders the results by invitations terms.
func ByInvitations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newInvitationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMemberOfCount orders the results by member_of count.
func ByMemberOfCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMemberOfStep(), opts...)
	}
}

// ByMemberOf orders the results by member_of terms.
func ByMemberOf(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemberOfStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFriendRequestsSentCount orders the results by friend_requests_sent count.
func ByFriendRequestsSentCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFriendRequestsSentStep(), opts...)
	}
}

// ByFriendRequestsSent orders the results by friend_requests_sent terms.
func ByFriendRequestsSent(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFriendRequestsSentStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByFriendRequestsReceivedCount orders the results by friend_requests_received count.
func ByFriendRequestsReceivedCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newFriendRequestsReceivedStep(), opts...)
	}
}

// ByFriendRequestsReceived orders the results by friend_requests_received terms.
func ByFriendRequestsReceived(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newFriendRequestsReceivedStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySentMessagesCount orders the results by sent_messages count.
func BySentMessagesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSentMessagesStep(), opts...)
	}
}

// BySentMessages orders the results by sent_messages terms.
func BySentMessages(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSentMessagesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNotificationsCount orders the results by notifications count.
func ByNotificationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNotificationsStep(), opts...)
	}
}

// ByNotifications orders the results by notifications terms.
func ByNotifications(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNotificationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRelatedNotificationsCount orders the results by related_notifications count.
func ByRelatedNotificationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRelatedNotificationsStep(), opts...)
	}
}

// ByRelatedNotifications orders the results by related_notifications terms.
func ByRelatedNotifications(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRelatedNotificationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByConversationParticipationsCount orders the results by conversation_participations count.
func ByConversationParticipationsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newConversationParticipationsStep(), opts...)
	}
}

// ByConversationParticipations orders the results by conversation_participations terms.
func ByConversationParticipations(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newConversationParticipationsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBlockedUsersCount orders the results by blocked_users count.
func ByBlockedUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBlockedUsersStep(), opts...)
	}
}

// ByBlockedUsers orders the results by blocked_users terms.
func ByBlockedUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockedUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBlockedByUsersCount orders the results by blocked_by_users count.
func ByBlockedByUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBlockedByUsersStep(), opts...)
	}
}

// ByBlockedByUsers orders the results by blocked_by_users terms.
func ByBlockedByUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockedByUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCallsMadeCount orders the results by calls_made count.
func ByCallsMadeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCallsMadeStep(), opts...)
	}
}

// ByCallsMade orders the results by calls_made terms.
func ByCallsMade(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCallsMadeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByCallsReceivedCount orders the results by calls_received count.
func ByCallsReceivedCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newCallsReceivedStep(), opts...)
	}
}

// ByCallsReceived orders the results by calls_received terms.
func ByCallsReceived(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCallsReceivedStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSessionsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SessionsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SessionsTable, SessionsColumn),
	)
}
func newOwnedGuildsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnedGuildsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, OwnedGuildsTable, OwnedGuildsColumn),
	)
}
func newInvitationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(InvitationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, InvitationsTable, InvitationsColumn),
	)
}
func newMemberOfStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MemberOfInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MemberOfTable, MemberOfColumn),
	)
}
func newFriendRequestsSentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FriendRequestsSentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, FriendRequestsSentTable, FriendRequestsSentColumn),
	)
}
func newFriendRequestsReceivedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(FriendRequestsReceivedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, FriendRequestsReceivedTable, FriendRequestsReceivedColumn),
	)
}
func newSentMessagesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SentMessagesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, SentMessagesTable, SentMessagesColumn),
	)
}
func newNotificationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NotificationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, NotificationsTable, NotificationsColumn),
	)
}
func newRelatedNotificationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RelatedNotificationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, RelatedNotificationsTable, RelatedNotificationsColumn),
	)
}
func newConversationParticipationsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ConversationParticipationsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, ConversationParticipationsTable, ConversationParticipationsColumn),
	)
}
func newBlockedUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockedUsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, BlockedUsersTable, BlockedUsersColumn),
	)
}
func newBlockedByUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockedByUsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, BlockedByUsersTable, BlockedByUsersColumn),
	)
}
func newCallsMadeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CallsMadeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, CallsMadeTable, CallsMadeColumn),
	)
}
func newCallsReceivedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CallsReceivedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, CallsReceivedTable, CallsReceivedColumn),
	)
}
