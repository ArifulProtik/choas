// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"kakashi/chaos/internal/ent/guild"
	"kakashi/chaos/internal/ent/invitation"
	"kakashi/chaos/internal/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Invitation is the model entity for the Invitation schema.
type Invitation struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InvitationQuery when eager-loading is set.
	Edges                 InvitationEdges `json:"edges"`
	invitation_guild      *string
	invitation_invited_by *string
	selectValues          sql.SelectValues
}

// InvitationEdges holds the relations/edges for other nodes in the graph.
type InvitationEdges struct {
	// Guild holds the value of the guild edge.
	Guild *Guild `json:"guild,omitempty"`
	// InvitedBy holds the value of the invited_by edge.
	InvitedBy *User `json:"invited_by,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// GuildOrErr returns the Guild value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InvitationEdges) GuildOrErr() (*Guild, error) {
	if e.Guild != nil {
		return e.Guild, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: guild.Label}
	}
	return nil, &NotLoadedError{edge: "guild"}
}

// InvitedByOrErr returns the InvitedBy value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InvitationEdges) InvitedByOrErr() (*User, error) {
	if e.InvitedBy != nil {
		return e.InvitedBy, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "invited_by"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Invitation) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case invitation.FieldID, invitation.FieldCode:
			values[i] = new(sql.NullString)
		case invitation.FieldCreatedAt, invitation.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case invitation.ForeignKeys[0]: // invitation_guild
			values[i] = new(sql.NullString)
		case invitation.ForeignKeys[1]: // invitation_invited_by
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Invitation fields.
func (i *Invitation) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case invitation.FieldID:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[j])
			} else if value.Valid {
				i.ID = value.String
			}
		case invitation.FieldCreatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[j])
			} else if value.Valid {
				i.CreatedAt = value.Time
			}
		case invitation.FieldUpdatedAt:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[j])
			} else if value.Valid {
				i.UpdatedAt = value.Time
			}
		case invitation.FieldCode:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[j])
			} else if value.Valid {
				i.Code = value.String
			}
		case invitation.ForeignKeys[0]:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invitation_guild", values[j])
			} else if value.Valid {
				i.invitation_guild = new(string)
				*i.invitation_guild = value.String
			}
		case invitation.ForeignKeys[1]:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field invitation_invited_by", values[j])
			} else if value.Valid {
				i.invitation_invited_by = new(string)
				*i.invitation_invited_by = value.String
			}
		default:
			i.selectValues.Set(columns[j], values[j])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Invitation.
// This includes values selected through modifiers, order, etc.
func (i *Invitation) Value(name string) (ent.Value, error) {
	return i.selectValues.Get(name)
}

// QueryGuild queries the "guild" edge of the Invitation entity.
func (i *Invitation) QueryGuild() *GuildQuery {
	return NewInvitationClient(i.config).QueryGuild(i)
}

// QueryInvitedBy queries the "invited_by" edge of the Invitation entity.
func (i *Invitation) QueryInvitedBy() *UserQuery {
	return NewInvitationClient(i.config).QueryInvitedBy(i)
}

// Update returns a builder for updating this Invitation.
// Note that you need to call Invitation.Unwrap() before calling this method if this Invitation
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Invitation) Update() *InvitationUpdateOne {
	return NewInvitationClient(i.config).UpdateOne(i)
}

// Unwrap unwraps the Invitation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Invitation) Unwrap() *Invitation {
	_tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Invitation is not a transactional entity")
	}
	i.config.driver = _tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Invitation) String() string {
	var builder strings.Builder
	builder.WriteString("Invitation(")
	builder.WriteString(fmt.Sprintf("id=%v, ", i.ID))
	builder.WriteString("created_at=")
	builder.WriteString(i.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(i.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(i.Code)
	builder.WriteByte(')')
	return builder.String()
}

// Invitations is a parsable slice of Invitation.
type Invitations []*Invitation
