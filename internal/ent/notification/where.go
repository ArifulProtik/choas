// Code generated by ent, DO NOT EDIT.

package notification

import (
	"kakashi/chaos/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldUpdatedAt, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldUserID, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldTitle, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldContent, v))
}

// IsRead applies equality check predicate on the "is_read" field. It's identical to IsReadEQ.
func IsRead(v bool) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldIsRead, v))
}

// RelatedUserID applies equality check predicate on the "related_user_id" field. It's identical to RelatedUserIDEQ.
func RelatedUserID(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldRelatedUserID, v))
}

// RelatedConversationID applies equality check predicate on the "related_conversation_id" field. It's identical to RelatedConversationIDEQ.
func RelatedConversationID(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldRelatedConversationID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldUpdatedAt, v))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldUserID, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldType, vs...))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldTitle, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldContent, v))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldContent, v))
}

// IsReadEQ applies the EQ predicate on the "is_read" field.
func IsReadEQ(v bool) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldIsRead, v))
}

// IsReadNEQ applies the NEQ predicate on the "is_read" field.
func IsReadNEQ(v bool) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldIsRead, v))
}

// RelatedUserIDEQ applies the EQ predicate on the "related_user_id" field.
func RelatedUserIDEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldRelatedUserID, v))
}

// RelatedUserIDNEQ applies the NEQ predicate on the "related_user_id" field.
func RelatedUserIDNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldRelatedUserID, v))
}

// RelatedUserIDIn applies the In predicate on the "related_user_id" field.
func RelatedUserIDIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldRelatedUserID, vs...))
}

// RelatedUserIDNotIn applies the NotIn predicate on the "related_user_id" field.
func RelatedUserIDNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldRelatedUserID, vs...))
}

// RelatedUserIDGT applies the GT predicate on the "related_user_id" field.
func RelatedUserIDGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldRelatedUserID, v))
}

// RelatedUserIDGTE applies the GTE predicate on the "related_user_id" field.
func RelatedUserIDGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldRelatedUserID, v))
}

// RelatedUserIDLT applies the LT predicate on the "related_user_id" field.
func RelatedUserIDLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldRelatedUserID, v))
}

// RelatedUserIDLTE applies the LTE predicate on the "related_user_id" field.
func RelatedUserIDLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldRelatedUserID, v))
}

// RelatedUserIDContains applies the Contains predicate on the "related_user_id" field.
func RelatedUserIDContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldRelatedUserID, v))
}

// RelatedUserIDHasPrefix applies the HasPrefix predicate on the "related_user_id" field.
func RelatedUserIDHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldRelatedUserID, v))
}

// RelatedUserIDHasSuffix applies the HasSuffix predicate on the "related_user_id" field.
func RelatedUserIDHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldRelatedUserID, v))
}

// RelatedUserIDIsNil applies the IsNil predicate on the "related_user_id" field.
func RelatedUserIDIsNil() predicate.Notification {
	return predicate.Notification(sql.FieldIsNull(FieldRelatedUserID))
}

// RelatedUserIDNotNil applies the NotNil predicate on the "related_user_id" field.
func RelatedUserIDNotNil() predicate.Notification {
	return predicate.Notification(sql.FieldNotNull(FieldRelatedUserID))
}

// RelatedUserIDEqualFold applies the EqualFold predicate on the "related_user_id" field.
func RelatedUserIDEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldRelatedUserID, v))
}

// RelatedUserIDContainsFold applies the ContainsFold predicate on the "related_user_id" field.
func RelatedUserIDContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldRelatedUserID, v))
}

// RelatedConversationIDEQ applies the EQ predicate on the "related_conversation_id" field.
func RelatedConversationIDEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEQ(FieldRelatedConversationID, v))
}

// RelatedConversationIDNEQ applies the NEQ predicate on the "related_conversation_id" field.
func RelatedConversationIDNEQ(v string) predicate.Notification {
	return predicate.Notification(sql.FieldNEQ(FieldRelatedConversationID, v))
}

// RelatedConversationIDIn applies the In predicate on the "related_conversation_id" field.
func RelatedConversationIDIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldIn(FieldRelatedConversationID, vs...))
}

// RelatedConversationIDNotIn applies the NotIn predicate on the "related_conversation_id" field.
func RelatedConversationIDNotIn(vs ...string) predicate.Notification {
	return predicate.Notification(sql.FieldNotIn(FieldRelatedConversationID, vs...))
}

// RelatedConversationIDGT applies the GT predicate on the "related_conversation_id" field.
func RelatedConversationIDGT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGT(FieldRelatedConversationID, v))
}

// RelatedConversationIDGTE applies the GTE predicate on the "related_conversation_id" field.
func RelatedConversationIDGTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldGTE(FieldRelatedConversationID, v))
}

// RelatedConversationIDLT applies the LT predicate on the "related_conversation_id" field.
func RelatedConversationIDLT(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLT(FieldRelatedConversationID, v))
}

// RelatedConversationIDLTE applies the LTE predicate on the "related_conversation_id" field.
func RelatedConversationIDLTE(v string) predicate.Notification {
	return predicate.Notification(sql.FieldLTE(FieldRelatedConversationID, v))
}

// RelatedConversationIDContains applies the Contains predicate on the "related_conversation_id" field.
func RelatedConversationIDContains(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContains(FieldRelatedConversationID, v))
}

// RelatedConversationIDHasPrefix applies the HasPrefix predicate on the "related_conversation_id" field.
func RelatedConversationIDHasPrefix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasPrefix(FieldRelatedConversationID, v))
}

// RelatedConversationIDHasSuffix applies the HasSuffix predicate on the "related_conversation_id" field.
func RelatedConversationIDHasSuffix(v string) predicate.Notification {
	return predicate.Notification(sql.FieldHasSuffix(FieldRelatedConversationID, v))
}

// RelatedConversationIDIsNil applies the IsNil predicate on the "related_conversation_id" field.
func RelatedConversationIDIsNil() predicate.Notification {
	return predicate.Notification(sql.FieldIsNull(FieldRelatedConversationID))
}

// RelatedConversationIDNotNil applies the NotNil predicate on the "related_conversation_id" field.
func RelatedConversationIDNotNil() predicate.Notification {
	return predicate.Notification(sql.FieldNotNull(FieldRelatedConversationID))
}

// RelatedConversationIDEqualFold applies the EqualFold predicate on the "related_conversation_id" field.
func RelatedConversationIDEqualFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldEqualFold(FieldRelatedConversationID, v))
}

// RelatedConversationIDContainsFold applies the ContainsFold predicate on the "related_conversation_id" field.
func RelatedConversationIDContainsFold(v string) predicate.Notification {
	return predicate.Notification(sql.FieldContainsFold(FieldRelatedConversationID, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRelatedUser applies the HasEdge predicate on the "related_user" edge.
func HasRelatedUser() predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RelatedUserTable, RelatedUserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRelatedUserWith applies the HasEdge predicate on the "related_user" edge with a given conditions (other predicates).
func HasRelatedUserWith(preds ...predicate.User) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := newRelatedUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasRelatedConversation applies the HasEdge predicate on the "related_conversation" edge.
func HasRelatedConversation() predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, RelatedConversationTable, RelatedConversationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRelatedConversationWith applies the HasEdge predicate on the "related_conversation" edge with a given conditions (other predicates).
func HasRelatedConversationWith(preds ...predicate.Conversation) predicate.Notification {
	return predicate.Notification(func(s *sql.Selector) {
		step := newRelatedConversationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Notification) predicate.Notification {
	return predicate.Notification(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Notification) predicate.Notification {
	return predicate.Notification(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Notification) predicate.Notification {
	return predicate.Notification(sql.NotPredicates(p))
}
