// Code generated by ent, DO NOT EDIT.

package block

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the block type in the database.
	Label = "block"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldBlockerID holds the string denoting the blocker_id field in the database.
	FieldBlockerID = "blocker_id"
	// FieldBlockedID holds the string denoting the blocked_id field in the database.
	FieldBlockedID = "blocked_id"
	// EdgeBlocker holds the string denoting the blocker edge name in mutations.
	EdgeBlocker = "blocker"
	// EdgeBlocked holds the string denoting the blocked edge name in mutations.
	EdgeBlocked = "blocked"
	// Table holds the table name of the block in the database.
	Table = "blocks"
	// BlockerTable is the table that holds the blocker relation/edge.
	BlockerTable = "blocks"
	// BlockerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	BlockerInverseTable = "users"
	// BlockerColumn is the table column denoting the blocker relation/edge.
	BlockerColumn = "blocker_id"
	// BlockedTable is the table that holds the blocked relation/edge.
	BlockedTable = "blocks"
	// BlockedInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	BlockedInverseTable = "users"
	// BlockedColumn is the table column denoting the blocked relation/edge.
	BlockedColumn = "blocked_id"
)

// Columns holds all SQL columns for block fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldBlockerID,
	FieldBlockedID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// BlockerIDValidator is a validator for the "blocker_id" field. It is called by the builders before save.
	BlockerIDValidator func(string) error
	// BlockedIDValidator is a validator for the "blocked_id" field. It is called by the builders before save.
	BlockedIDValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the Block queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByBlockerID orders the results by the blocker_id field.
func ByBlockerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlockerID, opts...).ToFunc()
}

// ByBlockedID orders the results by the blocked_id field.
func ByBlockedID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBlockedID, opts...).ToFunc()
}

// ByBlockerField orders the results by blocker field.
func ByBlockerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockerStep(), sql.OrderByField(field, opts...))
	}
}

// ByBlockedField orders the results by blocked field.
func ByBlockedField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBlockedStep(), sql.OrderByField(field, opts...))
	}
}
func newBlockerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BlockerTable, BlockerColumn),
	)
}
func newBlockedStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BlockedInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, BlockedTable, BlockedColumn),
	)
}
