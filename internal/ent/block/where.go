// Code generated by ent, DO NOT EDIT.

package block

import (
	"kakashi/chaos/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Block {
	return predicate.Block(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Block {
	return predicate.Block(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldUpdatedAt, v))
}

// BlockerID applies equality check predicate on the "blocker_id" field. It's identical to BlockerIDEQ.
func BlockerID(v string) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldBlockerID, v))
}

// BlockedID applies equality check predicate on the "blocked_id" field. It's identical to BlockedIDEQ.
func BlockedID(v string) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldBlockedID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldUpdatedAt, v))
}

// BlockerIDEQ applies the EQ predicate on the "blocker_id" field.
func BlockerIDEQ(v string) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldBlockerID, v))
}

// BlockerIDNEQ applies the NEQ predicate on the "blocker_id" field.
func BlockerIDNEQ(v string) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldBlockerID, v))
}

// BlockerIDIn applies the In predicate on the "blocker_id" field.
func BlockerIDIn(vs ...string) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldBlockerID, vs...))
}

// BlockerIDNotIn applies the NotIn predicate on the "blocker_id" field.
func BlockerIDNotIn(vs ...string) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldBlockerID, vs...))
}

// BlockerIDGT applies the GT predicate on the "blocker_id" field.
func BlockerIDGT(v string) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldBlockerID, v))
}

// BlockerIDGTE applies the GTE predicate on the "blocker_id" field.
func BlockerIDGTE(v string) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldBlockerID, v))
}

// BlockerIDLT applies the LT predicate on the "blocker_id" field.
func BlockerIDLT(v string) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldBlockerID, v))
}

// BlockerIDLTE applies the LTE predicate on the "blocker_id" field.
func BlockerIDLTE(v string) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldBlockerID, v))
}

// BlockerIDContains applies the Contains predicate on the "blocker_id" field.
func BlockerIDContains(v string) predicate.Block {
	return predicate.Block(sql.FieldContains(FieldBlockerID, v))
}

// BlockerIDHasPrefix applies the HasPrefix predicate on the "blocker_id" field.
func BlockerIDHasPrefix(v string) predicate.Block {
	return predicate.Block(sql.FieldHasPrefix(FieldBlockerID, v))
}

// BlockerIDHasSuffix applies the HasSuffix predicate on the "blocker_id" field.
func BlockerIDHasSuffix(v string) predicate.Block {
	return predicate.Block(sql.FieldHasSuffix(FieldBlockerID, v))
}

// BlockerIDEqualFold applies the EqualFold predicate on the "blocker_id" field.
func BlockerIDEqualFold(v string) predicate.Block {
	return predicate.Block(sql.FieldEqualFold(FieldBlockerID, v))
}

// BlockerIDContainsFold applies the ContainsFold predicate on the "blocker_id" field.
func BlockerIDContainsFold(v string) predicate.Block {
	return predicate.Block(sql.FieldContainsFold(FieldBlockerID, v))
}

// BlockedIDEQ applies the EQ predicate on the "blocked_id" field.
func BlockedIDEQ(v string) predicate.Block {
	return predicate.Block(sql.FieldEQ(FieldBlockedID, v))
}

// BlockedIDNEQ applies the NEQ predicate on the "blocked_id" field.
func BlockedIDNEQ(v string) predicate.Block {
	return predicate.Block(sql.FieldNEQ(FieldBlockedID, v))
}

// BlockedIDIn applies the In predicate on the "blocked_id" field.
func BlockedIDIn(vs ...string) predicate.Block {
	return predicate.Block(sql.FieldIn(FieldBlockedID, vs...))
}

// BlockedIDNotIn applies the NotIn predicate on the "blocked_id" field.
func BlockedIDNotIn(vs ...string) predicate.Block {
	return predicate.Block(sql.FieldNotIn(FieldBlockedID, vs...))
}

// BlockedIDGT applies the GT predicate on the "blocked_id" field.
func BlockedIDGT(v string) predicate.Block {
	return predicate.Block(sql.FieldGT(FieldBlockedID, v))
}

// BlockedIDGTE applies the GTE predicate on the "blocked_id" field.
func BlockedIDGTE(v string) predicate.Block {
	return predicate.Block(sql.FieldGTE(FieldBlockedID, v))
}

// BlockedIDLT applies the LT predicate on the "blocked_id" field.
func BlockedIDLT(v string) predicate.Block {
	return predicate.Block(sql.FieldLT(FieldBlockedID, v))
}

// BlockedIDLTE applies the LTE predicate on the "blocked_id" field.
func BlockedIDLTE(v string) predicate.Block {
	return predicate.Block(sql.FieldLTE(FieldBlockedID, v))
}

// BlockedIDContains applies the Contains predicate on the "blocked_id" field.
func BlockedIDContains(v string) predicate.Block {
	return predicate.Block(sql.FieldContains(FieldBlockedID, v))
}

// BlockedIDHasPrefix applies the HasPrefix predicate on the "blocked_id" field.
func BlockedIDHasPrefix(v string) predicate.Block {
	return predicate.Block(sql.FieldHasPrefix(FieldBlockedID, v))
}

// BlockedIDHasSuffix applies the HasSuffix predicate on the "blocked_id" field.
func BlockedIDHasSuffix(v string) predicate.Block {
	return predicate.Block(sql.FieldHasSuffix(FieldBlockedID, v))
}

// BlockedIDEqualFold applies the EqualFold predicate on the "blocked_id" field.
func BlockedIDEqualFold(v string) predicate.Block {
	return predicate.Block(sql.FieldEqualFold(FieldBlockedID, v))
}

// BlockedIDContainsFold applies the ContainsFold predicate on the "blocked_id" field.
func BlockedIDContainsFold(v string) predicate.Block {
	return predicate.Block(sql.FieldContainsFold(FieldBlockedID, v))
}

// HasBlocker applies the HasEdge predicate on the "blocker" edge.
func HasBlocker() predicate.Block {
	return predicate.Block(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BlockerTable, BlockerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlockerWith applies the HasEdge predicate on the "blocker" edge with a given conditions (other predicates).
func HasBlockerWith(preds ...predicate.User) predicate.Block {
	return predicate.Block(func(s *sql.Selector) {
		step := newBlockerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBlocked applies the HasEdge predicate on the "blocked" edge.
func HasBlocked() predicate.Block {
	return predicate.Block(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BlockedTable, BlockedColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBlockedWith applies the HasEdge predicate on the "blocked" edge with a given conditions (other predicates).
func HasBlockedWith(preds ...predicate.User) predicate.Block {
	return predicate.Block(func(s *sql.Selector) {
		step := newBlockedStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Block) predicate.Block {
	return predicate.Block(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Block) predicate.Block {
	return predicate.Block(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Block) predicate.Block {
	return predicate.Block(sql.NotPredicates(p))
}
